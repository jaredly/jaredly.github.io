/* Core functions.

   This module is implicitly imported and all functions and types
   are always available.
   Some types and operations are required to be defined for the compiler
   to work correctly (i.e. types like `:exn` or `:list`)
*/
module interface std/core
 
//------------------------------
//#kki: import declarations
 
public import std/core/types = std/core/types = "";
public import std/core/hnd = std/core/hnd = "";
 
//------------------------------
//#kki: fixity declarations
 
infixr 80 (^);
infixl 70 (*);
infixl 70 (%);
infixl 70 (/);
infixl 70 cdiv;
infixl 70 cmod;
infixl 60 (+);
infixl 60 (-);
infix 40 (!=);
infix 40 (==);
infix 40 (<=);
infix 40 (>=);
infix 40 (<);
infix 40 (>);
 
//------------------------------
//#kki: local imported aliases
 
// Stateful funs can manipulate heap `:h` using allocations, reads and writes.
local alias std/core/types/st<(h :: H)> :: H -> E = <(std/core/types/read :: H -> X)<(h :: H)>,(std/core/types/write :: H -> X)<(h :: H)>,(std/core/types/alloc :: H -> X)<(h :: H)>> = 1;
 
//------------------------------
//#kki: type declarations
 
// Exception information
public open type exception-info {
  public con ExnError : exception-info;
  public con ExnAssert : exception-info;
  public con ExnTodo : exception-info;
  public con ExnRange : exception-info;
  public con ExnPattern(location: std/core/types/string, definition: std/core/types/string) : (location : std/core/types/string, definition : std/core/types/string) -> exception-info;
  public con ExnSystem(errno: std/core/types/int) : (errno : std/core/types/int) -> exception-info;
  public con ExnInternal(name: std/core/types/string) : (name : std/core/types/string) -> exception-info;
};
// The exception data type
public value{0,2} type exception {
  // The exception data type
  public con Exception(message: std/core/types/string, info: exception-info) : (message : std/core/types/string, info : exception-info) -> exception;
};
// handlers for the `:exn` effect
public recursive type .hnd-exn <(e :: E),a> :: (E, V) -> V {
  public con .Hnd-exn(except-throw-exn: forall<b> (std/core/hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<exception,b,(.hnd-exn :: (E, V) -> V),(e :: E),a>) : forall<(e :: E),a> (except-throw-exn : forall<b> (std/core/hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<exception,b,(.hnd-exn :: (E, V) -> V),(e :: E),a>) -> (.hnd-exn :: (E, V) -> V)<(e :: E),a>;
};
// The `:blocking` effect signifies that a function may block
public type blocking :: X ;
// The console effect signifies that a function may write to the console.
public type console :: X ;
// Delayed (or _lazy_) values are computed (with effect `:e`) only the first time
// `force` is called and cached afterwards.
public value{0,1} type delayed <(e :: E),a> :: (E, V) -> V {
  private con Delay(dref: (std/core/types/ref :: (H, V) -> V)<(std/core/types/global :: H),(std/core/types/either :: (V, V) -> V)<() -> (e :: E) a,a>>) : forall<(e :: E),a> (dref : (std/core/types/ref :: (H, V) -> V)<(std/core/types/global :: H),(std/core/types/either :: (V, V) -> V)<() -> (e :: E) a,a>>) -> (delayed :: (E, V) -> V)<(e :: E),a>;
};
// An `:error` type represents a first-class exception result.
public value{0,2} type error <a> :: V -> V {
  public con Error(exception: exception) : forall<a> (exception : exception) -> (error :: V -> V)<a>;
  public con Ok(result: a) : forall<a> (result : a) -> (error :: V -> V)<a>;
};
// Exceptions
public type exn :: HX {
  private con Exn<(e :: E),a>((.hnd-exn :: (E, V) -> V)<(e :: E),a>) : forall<(e :: E),a> ((.hnd-exn :: (E, V) -> V)<(e :: E),a>) -> (exn :: HX);
};
// The `:fsys` effect signifies a function may access the file system
public type fsys :: X ;
// The `:global-scope` is a special type constant to denote the global scope
public type global-scope :: S ;
// The `:net` effect signifies a function may access the network
public type net :: X ;
// The `:ui` effect signifies a function may access the graphics system
public type ui :: X ;
// The `:io-total` effect is used for functions that perform arbitrary I/O operations, but are terminating without raising exceptions.
public alias io-total :: E = <(std/core/types/ndet :: X),(console :: X),(net :: X),(fsys :: X),(ui :: X),((std/core/types/st :: H -> E)<(std/core/types/global :: H)> == 1 <(std/core/types/read :: H -> X)<(std/core/types/global :: H)>,(std/core/types/write :: H -> X)<(std/core/types/global :: H)>,(std/core/types/alloc :: H -> X)<(std/core/types/global :: H)>>)> = 2;
// The `:io-noexn` effect is used for functions that perform arbitrary I/O operations, but raise no exceptions
public alias io-noexn :: E = <(std/core/types/div :: X),((io-total :: E) == 2 <(std/core/types/ndet :: X),(console :: X),(net :: X),(fsys :: X),(ui :: X),((std/core/types/st :: H -> E)<(std/core/types/global :: H)> == 1 <(std/core/types/read :: H -> X)<(std/core/types/global :: H)>,(std/core/types/write :: H -> X)<(std/core/types/global :: H)>,(std/core/types/alloc :: H -> X)<(std/core/types/global :: H)>>)>)> = 3;
// The `:io` effect is used for functions that perform arbitrary I/O operations.
public alias io :: E = <(std/core/types/handled :: HX -> X)<(exn :: HX)>,((io-noexn :: E) == 3 <(std/core/types/div :: X),((io-total :: E) == 2 <(std/core/types/ndet :: X),(console :: X),(net :: X),(fsys :: X),(ui :: X),((std/core/types/st :: H -> E)<(std/core/types/global :: H)> == 1 <(std/core/types/read :: H -> X)<(std/core/types/global :: H)>,(std/core/types/write :: H -> X)<(std/core/types/global :: H)>,(std/core/types/alloc :: H -> X)<(std/core/types/global :: H)>>)>)>)> = 4;
// The type of lists, which can be either empty (`Nil`) or an element followed
// by a list (`Cons`).
public recursive type list <a> :: V -> V {
  // The empty list.
  public con Nil : forall<a> (list :: V -> V)<a>;
  // A ``head``  element followed by the ``tail``  of the list.
  public con Cons(head: a, tail: (list :: V -> V)<a>) : forall<a> (head : a, tail : (list :: V -> V)<a>) -> (list :: V -> V)<a>;
};
// The `:named` effect is the default umbrella effect for named effects
public type nmd :: X ;
// Abstract type used for passing `null` values to external functions
public type null <a> :: V -> V ;
// An alias for pure effects: a pure function always returns the same result
// when called with the same arguments but may not terminate or raise an exception.
public alias pure :: E = <(std/core/types/handled :: HX -> X)<(exn :: HX)>,(std/core/types/div :: X)> = 1;
public type scope <(s :: S)> :: S -> X ;
// A `:sslice` represents a sub-slice of string and
// has a specific start position and character count. It is used
// instead of string indices to make the actual internal representation
// of strings abstract (like UTF-8 or UTF-16). String slices are
// returned by functions that find sub strings or patterns in
// in strings. Use `string:(slice : sslice) -> string` to
// create a fresh substring from a slice.
public value{16,1} type sslice {
  // A `:sslice` represents a sub-slice of string and
// has a specific start position and character count. It is used
// instead of string indices to make the actual internal representation
// of strings abstract (like UTF-8 or UTF-16). String slices are
// returned by functions that find sub strings or patterns in
// in strings. Use `string:(slice : sslice) -> string` to
// create a fresh substring from a slice.
  private con Sslice(str: std/core/types/string, start: std/core/types/size_t, len: std/core/types/size_t) : (str : std/core/types/string, start : std/core/types/size_t, len : std/core/types/size_t) -> sslice;
};
// A `:stream` is a co-inductive type representing an infinite list of elements.
public recursive co type stream <a> :: V -> V {
  public con Next(head: a, tail: (stream :: V -> V)<a>) : forall<a> (head : a, tail : (stream :: V -> V)<a>) -> (stream :: V -> V)<a>;
};
// An alias for the empty effect.
public alias total :: E = (std/core/types/(<>) :: E) = 1;
// TODO: revisit value codegen
public alias value<a> :: V -> V = a = 1;
 
//------------------------------
//#kki: declarations
 
// Automatically generated. Tests for the `ExnError` constructor of the `:exception-info` type.
public fun is-exnError : (exception-info : exception-info) -> std/core/types/bool;
// Automatically generated. Tests for the `ExnAssert` constructor of the `:exception-info` type.
public fun is-exnAssert : (exception-info : exception-info) -> std/core/types/bool;
// Automatically generated. Tests for the `ExnTodo` constructor of the `:exception-info` type.
public fun is-exnTodo : (exception-info : exception-info) -> std/core/types/bool;
// Automatically generated. Tests for the `ExnRange` constructor of the `:exception-info` type.
public fun is-exnRange : (exception-info : exception-info) -> std/core/types/bool;
// Automatically generated. Tests for the `ExnPattern` constructor of the `:exception-info` type.
public fun is-exnPattern : (exception-info : exception-info) -> std/core/types/bool;
// Automatically generated. Tests for the `ExnSystem` constructor of the `:exception-info` type.
public fun is-exnSystem : (exception-info : exception-info) -> std/core/types/bool;
// Automatically generated. Tests for the `ExnInternal` constructor of the `:exception-info` type.
public fun is-exnInternal : (exception-info : exception-info) -> std/core/types/bool;
public val .tag-ExnError : std/core/types/string;
public val .tag-ExnAssert : std/core/types/string;
public val .tag-ExnTodo : std/core/types/string;
public val .tag-ExnRange : std/core/types/string;
public val .tag-ExnPattern : std/core/types/string;
public val .tag-ExnSystem : std/core/types/string;
public val .tag-ExnInternal : std/core/types/string;
// Automatically generated. Retrieves the `message` constructor field of the `:exception` type.
public fun message : (exception : exception) -> std/core/types/string;
// Automatically generated. Retrieves the `info` constructor field of the `:exception` type.
public fun info : (exception : exception) -> exception-info;
public fun .copy : (exception, message : (std/core/types/optional :: V -> V)<std/core/types/string>, info : (std/core/types/optional :: V -> V)<exception-info>) -> exception;
// Automatically generated. Retrieves the `dref` constructor field of the `:delayed` type.
private fun dref : forall<(e :: E),a> (delayed : (delayed :: (E, V) -> V)<(e :: E),a>) -> (std/core/types/ref :: (H, V) -> V)<(std/core/types/global :: H),(std/core/types/either :: (V, V) -> V)<() -> (e :: E) a,a>>;
// monadic lift
private fun .mlift22848-op : forall<(e :: E),a> ((std/core/types/ref :: (H, V) -> V)<(std/core/types/global :: H),(std/core/types/either :: (V, V) -> V)<() -> (e :: E) a,a>>) -> (delayed :: (E, V) -> V)<(e :: E),a>;
public fun .copy.1 : forall<(e :: E),a> ((delayed :: (E, V) -> V)<(e :: E),a>, dref : (std/core/types/optional :: V -> V)<(std/core/types/ref :: (H, V) -> V)<(std/core/types/global :: H),(std/core/types/either :: (V, V) -> V)<() -> (e :: E) a,a>>>) -> (delayed :: (E, V) -> V)<(e :: E),a>;
// Automatically generated. Tests for the `Error` constructor of the `:error` type.
public fun is-error : forall<a> (error : (error :: V -> V)<a>) -> std/core/types/bool;
// Automatically generated. Tests for the `Ok` constructor of the `:error` type.
public fun is-ok : forall<a> (error : (error :: V -> V)<a>) -> std/core/types/bool;
// Automatically generated. Tests for the `Nil` constructor of the `:list` type.
public fun is-nil : forall<a> (list : (list :: V -> V)<a>) -> std/core/types/bool;
// Automatically generated. Tests for the `Cons` constructor of the `:list` type.
public fun is-cons : forall<a> (list : (list :: V -> V)<a>) -> std/core/types/bool;
// Automatically generated. Retrieves the `str` constructor field of the `:sslice` type.
private fun str : (sslice : sslice) -> std/core/types/string;
// Automatically generated. Retrieves the `start` constructor field of the `:sslice` type.
private fun start : (sslice : sslice) -> std/core/types/size_t;
// Automatically generated. Retrieves the `len` constructor field of the `:sslice` type.
private fun len : (sslice : sslice) -> std/core/types/size_t;
public fun .copy.2 : (sslice, str : (std/core/types/optional :: V -> V)<std/core/types/string>, start : (std/core/types/optional :: V -> V)<std/core/types/size_t>, len : (std/core/types/optional :: V -> V)<std/core/types/size_t>) -> sslice;
// Automatically generated. Retrieves the `head` constructor field of the `:stream` type.
public fun head : forall<a> (stream : (stream :: V -> V)<a>) -> a;
// Automatically generated. Retrieves the `tail` constructor field of the `:stream` type.
public fun tail : forall<a> (stream : (stream :: V -> V)<a>) -> (stream :: V -> V)<a>;
public fun .copy.3 : forall<a> ((stream :: V -> V)<a>, head : (std/core/types/optional :: V -> V)<a>, tail : (std/core/types/optional :: V -> V)<(stream :: V -> V)<a>>) -> (stream :: V -> V)<a>;
// select `throw-exn` operation out of the `:exn` effect handler
public fun .select-throw-exn : forall<a,(e :: E),b> (hnd : (.hnd-exn :: (E, V) -> V)<(e :: E),b>) -> (std/core/hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<exception,a,(.hnd-exn :: (E, V) -> V),(e :: E),b>;
// runtime tag for the `:exn` effect
public val .tag-exn : (std/core/hnd/htag :: ((E, V) -> V) -> V)<(.hnd-exn :: (E, V) -> V)>;
// handler for the `:exn` effect
public fun .handle-exn : forall<a,(e :: E),b> (cfc : std/core/types/int32, hnd : (.hnd-exn :: (E, V) -> V)<(e :: E),b>, ret : (res : a) -> (e :: E) b, action : () -> <(std/core/types/handled :: HX -> X)<(exn :: HX)>|(e :: E)> a) -> (e :: E) b;
// Internal export for the regex module
public fun .new-sslice : (str : std/core/types/string, start : std/core/types/size_t, len : std/core/types/size_t) -> sslice;
// Unsafe: transform any type to a `null` type; used internally by the compiler.
public fun .null-any : forall<a> (x : a) -> (null :: V -> V)<a>;
private val redirect : (std/core/types/ref :: (H, V) -> V)<(std/core/types/global :: H),(std/core/types/maybe :: V -> V)<(std/core/types/string) -> <(console :: X)> ()>>;
// Print a string to the console, including a final newline character.
private fun xprintsln : (s : std/core/types/string) -> <(console :: X)> ();
private fun string-compare : (x : std/core/types/string, y : std/core/types/string) -> std/core/types/int;
// Convert an integer to an `:int32`. The number is _clamped_ to the maximal or minimum `:int32`
// value if it is outside the range of an `:int32`.
public fun int32 : (std/core/types/int) -> std/core/types/int32;
// Convert an integer to an `:size_t`. The number is _clamped_ to the maximal or minimum `:size_t`
// value if it is outside the range of an `:size_t`.
public fun size_t : (i : std/core/types/int) -> std/core/types/size_t;
// Convert a character to a string
public fun string : (c : std/core/types/char) -> std/core/types/string;
// Convert a vector of characters to a string.
public fun string.1 : ((std/core/types/vector :: V -> V)<std/core/types/char>) -> std/core/types/string;
// Convert a list of characters to a string
public fun string.2 : (cs : (list :: V -> V)<std/core/types/char>) -> (total :: E) std/core/types/string;
// O(n). Copy the `slice` argument into a fresh string.
// Takes O(1) time if the slice covers the entire string.
public fun string.3 : (slice : sslice) -> std/core/types/string;
// Convert a `:maybe` string to a string using the empty sting for `Nothing`
public fun string.4 : (ms : (std/core/types/maybe :: V -> V)<std/core/types/string>) -> std/core/types/string;
// Convert a vector to a list with an optional tail.
public fun vlist : forall<a> (v : (std/core/types/vector :: V -> V)<a>, tail : (std/core/types/optional :: V -> V)<(list :: V -> V)<a>>) -> (list :: V -> V)<a>;
private fun int-show-hex : (i : std/core/types/int, use-capitals : std/core/types/bool) -> std/core/types/string;
private fun repeatz : (s : std/core/types/string, n : std/core/types/size_t) -> std/core/types/string;
private fun show-expx : (d : std/core/types/double, prec : std/core/types/int32) -> std/core/types/string;
private fun show-fixedx : (d : std/core/types/double, prec : std/core/types/int32) -> std/core/types/string;
// Print a string to the console
private fun xprints : (s : std/core/types/string) -> <(console :: X)> ();
// Raise an integer `i` to the power of `exp`.
public fun pow : (i : std/core/types/int, exp : std/core/types/int) -> std/core/types/int;
// O(`count`). Advance the start position of a string slice by `count` characters
// up to the end of the string.
// A negative `count` advances the start position backwards upto the first position
// in a string.
// Maintains the character count of the original slice upto the end of the string.
// For example:
//
// * `"abc".first.advance(1).string == "b"`,
// * `"abc".first.advance(3).string == ""`,
// * `"abc".last.advance(-1).string == "b"`.
//
public fun advance : (slice : sslice, count : std/core/types/int) -> sslice;
// Apply a function `f` to a specified argument `x`.
public fun apply : forall<a,b,(e :: E)> (f : (a) -> (e :: E) b, x : a) -> (e :: E) b;
// _Unsafe_. This function removes the exception effect (`:exn`) from the effect of an action
public fun unsafe-noexn : forall<a,(e :: E)> (action : () -> <(std/core/types/handled :: HX -> X)<(exn :: HX)>|(e :: E)> a) -> (e :: E) a;
// O(`count`). Extend a string slice by `count` characters up to the end of the string.
// A negative `count` shrinks the slice up to the empty slice.
// For example:
//
// * `"abc".first.extend(1).string == "ab"`
// * `"abc".last.extend(-1).string == ""`
//
public fun extend : (slice : sslice, count : std/core/types/int) -> sslice;
private fun first1 : (s : std/core/types/string) -> sslice;
// Convert a string to upper-case
public fun to-upper : (s : std/core/types/string) -> std/core/types/string;
public fun cdiv-exp10 : (i : std/core/types/int, n : std/core/types/int) -> std/core/types/int;
public fun mul-exp10 : (i : std/core/types/int, n : std/core/types/int) -> std/core/types/int;
// Return the common prefix of two strings (upto `upto` characters (default is minimum length of the two strings))
public fun common-prefix : (s : std/core/types/string, t : std/core/types/string, upto : (std/core/types/optional :: V -> V)<std/core/types/int>) -> sslice;
// lift
private fun .ctail-lift22726-concat : forall<a> (ys : (list :: V -> V)<a>, zss : (list :: V -> V)<(list :: V -> V)<a>>, (std/core/types/ctail :: V -> V)<(list :: V -> V)<a>>) -> (list :: V -> V)<a>;
// lift
private fun .lift22726-concat : forall<a> (ys : (list :: V -> V)<a>, zss : (list :: V -> V)<(list :: V -> V)<a>>) -> (list :: V -> V)<a>;
// Concatenate all lists in a list (e.g. flatten the list). (tail-recursive)
public fun concat : forall<a> (xss : (list :: V -> V)<(list :: V -> V)<a>>) -> (list :: V -> V)<a>;
// The `const` funs returns its first argument and ignores the second.
public fun const : forall<a,b> (x : a, y : b) -> a;
// Return a 'constant' function that ignores its argument and always returns the same result
public fun const.1 : forall<a,b> (default : a) -> (total :: E) ((x : b) -> a);
// If the slice is not empty,
// return the first character, and a new slice that is advanced by 1.
public fun next : (slice : sslice) -> (std/core/types/maybe :: V -> V)<(std/core/types/char, sslice)>;
// Return the number of decimal digits of `i`. Return `0` when `i==0`.
public fun count-digits : (i : std/core/types/int) -> std/core/types/int;
// Convert a `:maybe<a>` value to `:a`, using the `nothing` parameter for `Nothing`.
public fun default : forall<a> (m : (std/core/types/maybe :: V -> V)<a>, nothing : a) -> a;
// Use default value `def` in case of an error.
public fun default.1 : forall<a> (t : (error :: V -> V)<a>, def : a) -> a;
// Transform an `:error` type to an `:either` value.
public fun either : forall<a> (t : (error :: V -> V)<a>) -> (std/core/types/either :: (V, V) -> V)<exception,a>;
private fun xends-with : (s : std/core/types/string, post : std/core/types/string) -> std/core/types/bool;
// monadic lift
private fun .mlift22849-op : forall<a,b,(e :: E)> ((std/core/types/ctail :: V -> V)<(list :: V -> V)<b>>, f : (a) -> (e :: E) (list :: V -> V)<b>, zz : (list :: V -> V)<a>, ys1.22746 : (list :: V -> V)<b>) -> (e :: E) (list :: V -> V)<b>;
// monadic lift
private fun .mlift22850-op : forall<a,b,(e :: E)> (((list :: V -> V)<b>) -> (list :: V -> V)<b>, f : (a) -> (e :: E) (list :: V -> V)<b>, zz : (list :: V -> V)<a>, ys1.22746 : (list :: V -> V)<b>) -> (e :: E) (list :: V -> V)<b>;
// lift
private fun .ctail-lift22727-flatmap : forall<a,b,(e :: E)> (f : (a) -> (e :: E) (list :: V -> V)<b>, ys : (list :: V -> V)<b>, zs : (list :: V -> V)<a>, (std/core/types/ctail :: V -> V)<(list :: V -> V)<b>>) -> (e :: E) (list :: V -> V)<b>;
// lift
private fun .ctailm-lift22727-flatmap : forall<a,b,(e :: E)> (f : (a) -> (e :: E) (list :: V -> V)<b>, ys : (list :: V -> V)<b>, zs : (list :: V -> V)<a>, ((list :: V -> V)<b>) -> (list :: V -> V)<b>) -> (e :: E) (list :: V -> V)<b>;
// lift
private fun .lift22727-flatmap : forall<a,b,(e :: E)> (f : (a) -> (e :: E) (list :: V -> V)<b>, ys : (list :: V -> V)<b>, zs : (list :: V -> V)<a>) -> (e :: E) (list :: V -> V)<b>;
// Concatenate the result lists from applying a function to all elements.
public fun flatmap : forall<a,b,(e :: E)> (xs : (list :: V -> V)<a>, f : (a) -> (e :: E) (list :: V -> V)<b>) -> (e :: E) (list :: V -> V)<b>;
// lift
private fun .lift22728-reverse-append : forall<a> (acc : (list :: V -> V)<a>, ys : (list :: V -> V)<a>) -> (list :: V -> V)<a>;
// Efficiently reverse a list `xs` and append it to `tl`:
// `reverse-append(xs,tl) == reserve(xs) + tl
public fun reverse-append : forall<a> (xs : (list :: V -> V)<a>, tl : (list :: V -> V)<a>) -> (list :: V -> V)<a>;
// monadic lift
private fun .mlift22851-force : forall<a,(e :: E)> (r : (std/core/types/ref :: (H, V) -> V)<(std/core/types/global :: H),(std/core/types/either :: (V, V) -> V)<() -> (e :: E) a,a>>, x0 : a) -> <(std/core/types/st :: H -> E)<(std/core/types/global :: H)>,(std/core/types/div :: X)|(e :: E)> a;
// Force a delayed value; the value is computed only on the first
// call to `force` and cached afterwards.
public fun force : forall<a,(e :: E)> (delayed : (delayed :: (E, V) -> V)<(e :: E),a>) -> (e :: E) a;
// Generic show: shows the internal representation of an object as a string
// Note: this breaks parametricity so it should not be public
private fun gshow : forall<a> (a) -> std/core/types/string;
// Return the host environment: `dotnet`, `browser`, `webworker`, `node`, or `libc`.
public fun host : () -> <(std/core/types/ndet :: X)> std/core/types/string;
// The `ignore` function ignores its argument.
public fun ignore : forall<a> (x : a) -> ();
// lift
private fun .ctail-lift22729-intersperse : forall<a> (ys : (list :: V -> V)<a>, s : a, (std/core/types/ctail :: V -> V)<(list :: V -> V)<a>>) -> (list :: V -> V)<a>;
// lift
private fun .lift22729-intersperse : forall<a> (ys : (list :: V -> V)<a>, s : a) -> (list :: V -> V)<a>;
// Insert a separator `sep`  between all elements of a list `xs` .
public fun intersperse : forall<a> (xs : (list :: V -> V)<a>, sep : a) -> (list :: V -> V)<a>;
// Is this an even integer?
public fun is-even : (i : std/core/types/int) -> std/core/types/bool;
// Return the number of ending `0` digits of `i`. Return `0` when `i==0`.
public fun is-exp10 : (i : std/core/types/int) -> std/core/types/int;
private fun last1 : (s : std/core/types/string) -> sslice;
// Used by the compiler to wrap main console applications
public fun main-console : forall<a,(e :: E)> (main : () -> (e :: E) a) -> (e :: E) a;
// monadic lift
private fun .mlift22852-op : forall<a,b,(e :: E)> ((std/core/types/ctail :: V -> V)<(list :: V -> V)<b>>, f : (value : a, rest : (list :: V -> V)<a>) -> (e :: E) b, yy : (list :: V -> V)<a>, b) -> (e :: E) (list :: V -> V)<b>;
// monadic lift
private fun .mlift22853-op : forall<a,b,(e :: E)> (((list :: V -> V)<b>) -> (list :: V -> V)<b>, f : (value : a, rest : (list :: V -> V)<a>) -> (e :: E) b, yy : (list :: V -> V)<a>, b) -> (e :: E) (list :: V -> V)<b>;
// lift
private fun .ctail-lift22730-map-peek : forall<a,b,(e :: E)> (f : (value : a, rest : (list :: V -> V)<a>) -> (e :: E) b, ys : (list :: V -> V)<a>, (std/core/types/ctail :: V -> V)<(list :: V -> V)<b>>) -> (e :: E) (list :: V -> V)<b>;
// lift
private fun .ctailm-lift22730-map-peek : forall<a,b,(e :: E)> (f : (value : a, rest : (list :: V -> V)<a>) -> (e :: E) b, ys : (list :: V -> V)<a>, ((list :: V -> V)<b>) -> (list :: V -> V)<b>) -> (e :: E) (list :: V -> V)<b>;
// lift
private fun .lift22730-map-peek : forall<a,b,(e :: E)> (f : (value : a, rest : (list :: V -> V)<a>) -> (e :: E) b, ys : (list :: V -> V)<a>) -> (e :: E) (list :: V -> V)<b>;
// Apply a function `f`  to each element of the input list in sequence where `f` takes
// both the current element and the tail list as arguments.
public fun map-peek : forall<a,b,(e :: E)> (xs : (list :: V -> V)<a>, f : (value : a, rest : (list :: V -> V)<a>) -> (e :: E) b) -> (e :: E) (list :: V -> V)<b>;
private val maxListStack : std/core/types/int;
public fun mbint : (m : (std/core/types/maybe :: V -> V)<std/core/types/int>) -> std/core/types/int;
public fun negate : (i : std/core/types/int) -> std/core/types/int;
private val trace-enabled : (std/core/types/ref :: (H, V) -> V)<(std/core/types/global :: H),std/core/types/bool>;
// Compose two funs `f` and `g`.
public fun o : forall<a,b,c,(e :: E)> (f : (a) -> (e :: E) b, g : (c) -> (e :: E) a) -> ((x : c) -> (e :: E) b);
// Set a `hndler` that is always called when the `action` finishes (either normally or with an exception).
public fun on-exit : forall<a,(e :: E)> (hndler : () -> (e :: E) (), action : () -> (e :: E) a) -> (e :: E) a;
// Given a total function to calculate a value `:a`, return
// a total function that only calculates the value once and then
// returns the cached result.
public fun once : forall<a> (calc : () -> a) -> (() -> a);
private fun xparse-int : (s : std/core/types/string, hex : std/core/types/bool) -> (std/core/types/maybe :: V -> V)<std/core/types/int>;
public fun phantom : forall<a> () -> a;
// Returns a singleton list.
public fun single : forall<a> (x : a) -> (list :: V -> V)<a>;
// Convert a string to lower-case
public fun to-lower : (s : std/core/types/string) -> std/core/types/string;
private fun xtrace : (message : std/core/types/string) -> ();
private fun xtrace-any : forall<a> (message : std/core/types/string, x : a) -> ();
private val unique-count : (std/core/types/ref :: (H, V) -> V)<(std/core/types/global :: H),std/core/types/int>;
// _Unsafe_. This function removes the non-termination effect (`:div`) from the effect of an action
public fun unsafe-nodiv : forall<a,(e :: E)> (action : () -> <(std/core/types/div :: X)|(e :: E)> a) -> (e :: E) a;
public fun unvlist : forall<a> (xs : (list :: V -> V)<a>) -> (std/core/types/vector :: V -> V)<a>;
// Create a new vector of length `n`  with initial elements given by function `f` .
private fun vector-initz : forall<a> (n : std/core/types/size_t, f : (std/core/types/size_t) -> a) -> (std/core/types/vector :: V -> V)<a>;
// Substract two character codePoints
public fun (-.4) : (c : std/core/types/char, d : std/core/types/char) -> (total :: E) std/core/types/char;
public fun int.4 : (b : std/core/types/bool) -> std/core/types/int;
public fun int.5 : (x : std/core/types/order) -> std/core/types/int;
public fun (!=.4) : (x : std/core/types/order, y : std/core/types/order) -> std/core/types/bool;
public fun (!=.5) : (x : std/core/types/bool, y : std/core/types/bool) -> std/core/types/bool;
// Append two lists.
public fun .ctail-append : forall<a> (xs : (list :: V -> V)<a>, ys : (list :: V -> V)<a>, (std/core/types/ctail :: V -> V)<(list :: V -> V)<a>>) -> (list :: V -> V)<a>;
// Append two lists.
public fun append : forall<a> (xs : (list :: V -> V)<a>, ys : (list :: V -> V)<a>) -> (list :: V -> V)<a>;
// Append two lists.
public fun (+.4) : forall<a> (xs : (list :: V -> V)<a>, ys : (list :: V -> V)<a>) -> (list :: V -> V)<a>;
// Add two character code points
public fun (+.5) : (c : std/core/types/char, d : std/core/types/char) -> (total :: E) std/core/types/char;
// Append two strings.
public fun (+.6) : (x : std/core/types/string, y : std/core/types/string) -> std/core/types/string;
private fun printsln : (s : std/core/types/string) -> <(console :: X)> ();
public fun (==.4) : (x : std/core/types/order, y : std/core/types/order) -> std/core/types/bool;
public fun (==.5) : (x : std/core/types/bool, y : std/core/types/bool) -> std/core/types/bool;
public fun (<.5) : (x : std/core/types/order, y : std/core/types/order) -> std/core/types/bool;
public fun (<.6) : (x : std/core/types/bool, y : std/core/types/bool) -> std/core/types/bool;
public fun order : (i : std/core/types/int) -> std/core/types/order;
// Compare two strings.
// Uses the character codes directly for comparison
public fun compare.4 : (x : std/core/types/string, y : std/core/types/string) -> std/core/types/order;
public fun (<.7) : (x : std/core/types/string, y : std/core/types/string) -> std/core/types/bool;
public fun (>.3) : (x : std/core/types/order, y : std/core/types/order) -> std/core/types/bool;
public fun (>.4) : (x : std/core/types/bool, y : std/core/types/bool) -> std/core/types/bool;
public fun (>.5) : (x : std/core/types/string, y : std/core/types/string) -> std/core/types/bool;
public fun compare.1 : (x : std/core/types/char, y : std/core/types/char) -> std/core/types/order;
public fun compare.2 : (x : std/core/types/bool, y : std/core/types/bool) -> std/core/types/order;
public fun compare.3 : (x : std/core/types/double, y : std/core/types/double) -> std/core/types/order;
public fun (>=.3) : (x : std/core/types/order, y : std/core/types/order) -> std/core/types/bool;
public fun (>=.4) : (x : std/core/types/bool, y : std/core/types/bool) -> std/core/types/bool;
public fun (>=.5) : (x : std/core/types/string, y : std/core/types/string) -> std/core/types/bool;
// lift
private fun .lift22731-joinsep : (sep : std/core/types/string, ys : (list :: V -> V)<std/core/types/string>, acc : std/core/types/string) -> std/core/types/string;
// Concatenate all strings in a list
private fun joinsep : (xs : (list :: V -> V)<std/core/types/string>, sep : std/core/types/string) -> std/core/types/string;
// Concatenate all strings in a list
public fun join.2 : (xs : (list :: V -> V)<std/core/types/string>) -> std/core/types/string;
// Concatenate all strings in a list using a specific separator
public fun join.3 : (xs : (list :: V -> V)<std/core/types/string>, sep : std/core/types/string) -> std/core/types/string;
private fun decr : (i : std/core/types/int32) -> std/core/types/int32;
private fun decr.1 : (i : std/core/types/size_t) -> std/core/types/size_t;
public fun (<=.5) : (x : std/core/types/order, y : std/core/types/order) -> std/core/types/bool;
public fun (<=.6) : (x : std/core/types/bool, y : std/core/types/bool) -> std/core/types/bool;
public fun (<=.7) : (x : std/core/types/string, y : std/core/types/string) -> std/core/types/bool;
private fun incr : (i : std/core/types/int32) -> std/core/types/int32;
private fun incr.1 : (i : std/core/types/size_t) -> std/core/types/size_t;
// monadic lift
private fun .mlift22854-op : forall<(e :: E)> (action : (std/core/types/size_t) -> (e :: E) (), end : std/core/types/size_t, i : std/core/types/size_t, wild_ : ()) -> (e :: E) ();
// lift
private fun .lift22732-forz : forall<(e :: E)> (action : (std/core/types/size_t) -> (e :: E) (), end : std/core/types/size_t, i : std/core/types/size_t) -> (e :: E) ();
// Executes `action`  for each integer between `start`  upto `end`  (including both `start`  and `end` ).
// If `start > end`  the function returns without any call to `action` .
private fun forz : forall<(e :: E)> (start : std/core/types/size_t, end : std/core/types/size_t, action : (std/core/types/size_t) -> (e :: E) ()) -> (e :: E) ();
private fun foreach-indexedz : forall<a,(e :: E)> (v : (std/core/types/vector :: V -> V)<a>, f : (a, std/core/types/size_t) -> (e :: E) ()) -> (e :: E) ();
// lift
private fun .lift22733-length.1 : forall<a> (ys : (list :: V -> V)<a>, acc : std/core/types/int) -> std/core/types/int;
// Returns the length of a list.
public fun length.1 : forall<a> (xs : (list :: V -> V)<a>) -> std/core/types/int;
// Return the length of a vector.
public fun length.2 : forall<a> (v : (std/core/types/vector :: V -> V)<a>) -> std/core/types/int;
// lift
private fun .lift22734-list : (low : std/core/types/int, high : std/core/types/int, acc : (list :: V -> V)<std/core/types/int>) -> (list :: V -> V)<std/core/types/int>;
// Returns an integer list of increasing elements from `lo`  to `hi`
// (including both `lo`  and `hi` ).
// If `lo > hi`  the function returns the empty list.
public fun list : (lo : std/core/types/int, hi : std/core/types/int) -> (total :: E) (list :: V -> V)<std/core/types/int>;
// monadic lift
private fun .mlift22855-op : forall<a,(e :: E)> (acc : (list :: V -> V)<a>, f : (std/core/types/int) -> (e :: E) a, high0.22757 : std/core/types/int, low : std/core/types/int, a) -> (e :: E) (list :: V -> V)<a>;
// lift
private fun .lift22735-list.1 : forall<a,(e :: E)> (f : (std/core/types/int) -> (e :: E) a, low : std/core/types/int, high : std/core/types/int, acc : (list :: V -> V)<a>) -> (e :: E) (list :: V -> V)<a>;
// Applies a function `f` to list of increasing elements from `lo`  to `hi`
// (including both `lo`  and `hi` ).
// If `lo > hi`  the function returns the empty list.
public fun list.1 : forall<a,(e :: E)> (lo : std/core/types/int, hi : std/core/types/int, f : (std/core/types/int) -> (e :: E) a) -> (e :: E) (list :: V -> V)<a>;
// monadic lift
private fun .mlift22856-op : forall<a,b,(e :: E)> ((std/core/types/ctail :: V -> V)<(list :: V -> V)<b>>, f : (a) -> (e :: E) b, xx : (list :: V -> V)<a>, b) -> (e :: E) (list :: V -> V)<b>;
// monadic lift
private fun .mlift22857-op : forall<a,b,(e :: E)> (((list :: V -> V)<b>) -> (list :: V -> V)<b>, f : (a) -> (e :: E) b, xx : (list :: V -> V)<a>, b) -> (e :: E) (list :: V -> V)<b>;
// Apply a function `f`  to each element of the input list in sequence.
public fun .ctail-map.5 : forall<a,b,(e :: E)> (xs : (list :: V -> V)<a>, f : (a) -> (e :: E) b, (std/core/types/ctail :: V -> V)<(list :: V -> V)<b>>) -> (e :: E) (list :: V -> V)<b>;
// Apply a function `f`  to each element of the input list in sequence.
public fun .ctailm-map.5 : forall<a,b,(e :: E)> (xs : (list :: V -> V)<a>, f : (a) -> (e :: E) b, ((list :: V -> V)<b>) -> (list :: V -> V)<b>) -> (e :: E) (list :: V -> V)<b>;
// Apply a function `f`  to each element of the input list in sequence.
public fun map.5 : forall<a,b,(e :: E)> (xs : (list :: V -> V)<a>, f : (a) -> (e :: E) b) -> (e :: E) (list :: V -> V)<b>;
// Create a list of characters from `lo`  to `hi`  (inclusive).
public fun list.2 : (lo : std/core/types/char, hi : std/core/types/char) -> (total :: E) (list :: V -> V)<std/core/types/char>;
// Convert a `:maybe` type to a list type.
public fun list.3 : forall<a> (m : (std/core/types/maybe :: V -> V)<a>) -> (list :: V -> V)<a>;
// Convert a string to a list of characters
public fun list.4 : (s : std/core/types/string) -> (total :: E) (list :: V -> V)<std/core/types/char>;
// Convert a vector to a list.
public fun list.5 : forall<a> (v : (std/core/types/vector :: V -> V)<a>) -> (list :: V -> V)<a>;
// monadic lift
private fun .mlift22858-map : forall<a,(e :: E)> (a) -> (e :: E) (std/core/types/maybe :: V -> V)<a>;
public fun map : forall<a,b,(e :: E)> (m : (std/core/types/maybe :: V -> V)<a>, f : (a) -> (e :: E) b) -> (e :: E) (std/core/types/maybe :: V -> V)<b>;
// monadic lift
private fun .mlift22859-map.1 : forall<a,b,(e :: E)> (b) -> (e :: E) (std/core/types/either :: (V, V) -> V)<a,b>;
// Map over the `Right` component of an `:either` type.
public fun map.1 : forall<a,b,c,(e :: E)> (e : (std/core/types/either :: (V, V) -> V)<a,b>, f : (b) -> (e :: E) c) -> (e :: E) (std/core/types/either :: (V, V) -> V)<a,c>;
// monadic lift
private fun .mlift22860-map.2 : forall<a,(e :: E)> (a, a) -> (e :: E) (a, a);
// monadic lift
private fun .mlift22861-map.2 : forall<a,b,(e :: E)> (f : (a) -> (e :: E) b, t : (a, a), b) -> (e :: E) (b, b);
public fun map.2 : forall<a,b,(e :: E)> (t : (a, a), f : (a) -> (e :: E) b) -> (e :: E) (b, b);
// monadic lift
private fun .mlift22862-map.3 : forall<a,(e :: E)> (a, a, a) -> (e :: E) (a, a, a);
// monadic lift
private fun .mlift22863-map.3 : forall<a,b,(e :: E)> (b, f : (a) -> (e :: E) b, t : (a, a, a), b) -> (e :: E) (b, b, b);
// monadic lift
private fun .mlift22864-map.3 : forall<a,b,(e :: E)> (f : (a) -> (e :: E) b, t : (a, a, a), b) -> (e :: E) (b, b, b);
public fun map.3 : forall<a,b,(e :: E)> (t : (a, a, a), f : (a) -> (e :: E) b) -> (e :: E) (b, b, b);
// monadic lift
private fun .mlift22865-map.4 : forall<a,(e :: E)> (a, a, a, a) -> (e :: E) (a, a, a, a);
// monadic lift
private fun .mlift22866-map.4 : forall<a,b,(e :: E)> (b, b, f : (a) -> (e :: E) b, t : (a, a, a, a), b) -> (e :: E) (b, b, b, b);
// monadic lift
private fun .mlift22867-map.4 : forall<a,b,(e :: E)> (b, f : (a) -> (e :: E) b, t : (a, a, a, a), b) -> (e :: E) (b, b, b, b);
// monadic lift
private fun .mlift22868-map.4 : forall<a,b,(e :: E)> (f : (a) -> (e :: E) b, t : (a, a, a, a), b) -> (e :: E) (b, b, b, b);
public fun map.4 : forall<a,b,(e :: E)> (t : (a, a, a, a), f : (a) -> (e :: E) b) -> (e :: E) (b, b, b, b);
// Apply a function `f` to each character in a string
public fun map.6 : forall<(e :: E)> (s : std/core/types/string, f : (std/core/types/char) -> (e :: E) std/core/types/char) -> (e :: E) std/core/types/string;
// monadic lift
private fun .mlift22869-map.7 : forall<a,(e :: E)> (i : std/core/types/size_t, w : (std/core/types/vector :: V -> V)<a>, a) -> (e :: E) ();
// monadic lift
private fun .mlift22870-map.7 : forall<a,(e :: E)> (w : (std/core/types/vector :: V -> V)<a>, wild_ : ()) -> (e :: E) (std/core/types/vector :: V -> V)<a>;
// Apply a total function `f` to each element in a vector `v`
public fun map.7 : forall<a,b,(e :: E)> (v : (std/core/types/vector :: V -> V)<a>, f : (a) -> (e :: E) b) -> (e :: E) (std/core/types/vector :: V -> V)<b>;
// Right-align a string to width `width`  using `fill`  (default is a space) to fill from the left.
public fun pad-left : (s : std/core/types/string, width : std/core/types/int, fill : (std/core/types/optional :: V -> V)<std/core/types/char>) -> std/core/types/string;
// Show an `:int` as a hexadecimal value.\
// The `width`  parameter specifies how wide the hex value is where `"0"`  is used to align.\
// The `use-capitals` parameter (= `True`) determines if captical letters should be used to display the hexadecimal digits.\
// The `pre` (=`"0x"`) is an optional prefix for the number (goes between the sign and the number).
public fun show-hex : (i : std/core/types/int, width : (std/core/types/optional :: V -> V)<std/core/types/int>, use-capitals : (std/core/types/optional :: V -> V)<std/core/types/bool>, pre : (std/core/types/optional :: V -> V)<std/core/types/string>) -> std/core/types/string;
public fun sign.1 : (d : std/core/types/double) -> std/core/types/order;
// Is the integer positive (stricly greater than zero)
public fun is-pos.2 : (i : std/core/types/int) -> std/core/types/bool;
// Is the value positive?
public fun is-pos.3 : (d : std/core/types/double) -> std/core/types/bool;
// Is the list empty?
public fun is-empty : forall<a> (xs : (list :: V -> V)<a>) -> std/core/types/bool;
// Is a slice empty?
public fun is-empty.1 : (slice : sslice) -> std/core/types/bool;
// Is a string empty?
public fun is-empty.2 : (s : std/core/types/string) -> std/core/types/bool;
public fun (||) : forall<a> (m1 : (std/core/types/maybe :: V -> V)<a>, m2 : (std/core/types/maybe :: V -> V)<a>) -> (std/core/types/maybe :: V -> V)<a>;
// Choose a non-empty string
public fun (||.1) : (x : std/core/types/string, y : std/core/types/string) -> std/core/types/string;
// Show a character as a string
private fun show-char : (c : std/core/types/char) -> std/core/types/string;
// Show a `:double` in exponential (scientific) notation.
// The optional `precision` (= `-17`) specifies the precision.
// If `>=0` it specifies the number of digits behind the dot (up to `17` max).
// If negative, then at most the absolute value of `precision` digits behind the dot are used.
public fun show-exp : (d : std/core/types/double, precision : (std/core/types/optional :: V -> V)<std/core/types/int>) -> std/core/types/string;
// Show a `:double` fixed-point notation.
// The optional `precision` (= `-2`) specifies the maximum precision.
// If `>=0` it specifies the number of digits behind the dot (up to `20` max).
// If negative, then at most the absolute value of `precision` digits behind the dot are used.
// This may still show a number in exponential notation if the it is too small or large,
// in particular, for  a `d` where `d > 1.0e21` or `d < 1.0e-15`, or if
// `precision.abs > 17`, the `show-exp` routine is used.
public fun show-fixed : (d : std/core/types/double, precision : (std/core/types/optional :: V -> V)<std/core/types/int>) -> std/core/types/string;
// monadic lift
private fun .mlift22871-show-list : forall<(e :: E)> ((list :: V -> V)<std/core/types/string>) -> (e :: E) std/core/types/string;
// Convert a list to a string
public fun show-list : forall<a,(e :: E)> (xs : (list :: V -> V)<a>, show-elem : (a) -> (e :: E) std/core/types/string) -> (e :: E) std/core/types/string;
// Convert an `:int` to a string
public fun show : (i : std/core/types/int) -> std/core/types/string;
// Show a `:double` as a string.
// If `d >= 1.0e-5` and `d < 1.0e+21`, `show-fixed` is used and otherwise `show-exp`.
// Default `precision` is `-17`.
public fun show.1 : (d : std/core/types/double, precision : (std/core/types/optional :: V -> V)<std/core/types/int>) -> std/core/types/string;
// Show the exception message
public fun show.10 : (exn : exception) -> std/core/types/string;
// Show a `:char` as a character literal
public fun show.2 : (c : std/core/types/char) -> std/core/types/string;
// Show a string as a string literal
public fun show.3 : (s : std/core/types/string) -> std/core/types/string;
// Convert a `:bool` to a string
public fun show.4 : (b : std/core/types/bool) -> std/core/types/string;
// Convert a unit value `()` to a string
public fun show.5 : (u : ()) -> std/core/types/string;
// Show an `:sslice` as a string literal
public fun show.6 : (s : sslice) -> std/core/types/string;
public fun show.7 : (xs : (list :: V -> V)<std/core/types/string>) -> std/core/types/string;
public fun show.8 : (xs : (list :: V -> V)<std/core/types/int>) -> std/core/types/string;
public fun show.9 : (xs : (list :: V -> V)<std/core/types/bool>) -> std/core/types/string;
// Print a string to the console, including a final newline character.
public fun println : (s : std/core/types/string) -> <(console :: X)> ();
// Print an integer to the console, including a final newline character.
public fun println.1 : (i : std/core/types/int) -> <(console :: X)> ();
// Print a double to the console, including a final newline character.
public fun println.2 : (d : std/core/types/double) -> <(console :: X)> ();
// Print a boolean to the console, including a final newline character
public fun println.3 : (b : std/core/types/bool) -> <(console :: X)> ();
// Print a character to the console, including a final newline character.
public fun println.4 : (c : std/core/types/char) -> <(console :: X)> ();
// Print a unit value to the console, including a final newline character
public fun println.5 : (u : ()) -> <(console :: X)> ();
private fun prints : (s : std/core/types/string) -> <(console :: X)> ();
// call `throw-exn` operation of the `:exn` effect
public fun throw-exn : forall<a> (exn : exception) -> <(std/core/types/handled :: HX -> X)<(exn :: HX)>> a;
public fun .default-exn : forall<(e :: E)> (action : () -> <(console :: X),(std/core/types/handled :: HX -> X)<(exn :: HX)>|(e :: E)> ()) -> <(console :: X)|(e :: E)> ();
// Get (zero-based) element `n`  of a list. Return a `:maybe` type.
public fun ([].2) : forall<a> (xs : (list :: V -> V)<a>, n : std/core/types/int) -> (std/core/types/maybe :: V -> V)<a>;
// Raise an integer `i` to the power of `exp`.
public fun (^.1) : (i : std/core/types/int, exp : std/core/types/int) -> std/core/types/int;
// O(1). Return the string slice from the end of `slice` argument
// to the end of the string.
public fun after : (slice : sslice) -> sslice;
// monadic lift
private fun .mlift22872-all : forall<a,(e :: E)> (predicate : (a) -> (e :: E) std/core/types/bool, xx : (list :: V -> V)<a>, std/core/types/bool) -> (e :: E) std/core/types/bool;
// Do all elements satisfy a predicate ?
public fun all : forall<a,(e :: E)> (xs : (list :: V -> V)<a>, predicate : (a) -> (e :: E) std/core/types/bool) -> (e :: E) std/core/types/bool;
// monadic lift
private fun .mlift22873-any : forall<a,(e :: E)> (predicate : (a) -> (e :: E) std/core/types/bool, xx : (list :: V -> V)<a>, std/core/types/bool) -> (e :: E) std/core/types/bool;
// Are there any elements in a list that satisfy a predicate ?
public fun any : forall<a,(e :: E)> (xs : (list :: V -> V)<a>, predicate : (a) -> (e :: E) std/core/types/bool) -> (e :: E) std/core/types/bool;
// Throw an exception with a specified message.
public fun throw : forall<a> (message : std/core/types/string, info : (std/core/types/optional :: V -> V)<exception-info>) -> <(std/core/types/handled :: HX -> X)<(exn :: HX)>> a;
// Transform an `:error` type back to an `exn` effect.
public fun throw.1 : forall<a> (err : (error :: V -> V)<a>) -> <(std/core/types/handled :: HX -> X)<(exn :: HX)>> a;
public fun assert : (message : std/core/types/string, condition : std/core/types/bool) -> ();
// Return the element at position `index` in vector `v`, or `Nothing` if out of bounds
public fun at : forall<a> (v : (std/core/types/vector :: V -> V)<a>, index : std/core/types/int) -> (std/core/types/maybe :: V -> V)<a>;
// O(1). Return the string slice from the start of a string up to the
// start of `slice` argument.
public fun before : (slice : sslice) -> sslice;
// Convert an int to a boolean, using `False` for 0 and `True` otherwise.
public fun bool : (i : std/core/types/int) -> std/core/types/bool;
// Convert a `:maybe` type to a boolean using `False` for `Nothing` and `True` for `Just`.
public fun bool.1 : forall<a> (m : (std/core/types/maybe :: V -> V)<a>) -> std/core/types/bool;
// Convert a string to a boolean, using `False` for the empty string and `True` otherwise.
public fun bool.2 : (s : std/core/types/string) -> std/core/types/bool;
// O(`n`). The first `n` (default = `1`) characters in a string.
public fun first : (s : std/core/types/string, n : (std/core/types/optional :: V -> V)<std/core/types/int>) -> sslice;
// Convert the first character of a string to uppercase.
public fun capitalize : (s : std/core/types/string) -> std/core/types/string;
// Catch any exception raised in `action` and handle it.
// Use `on-exn` or `on-exit` when appropiate.
public fun try : forall<a,(e :: E)> (action : () -> <(std/core/types/handled :: HX -> X)<(exn :: HX)>|(e :: E)> a, hndl : (exception) -> (e :: E) a) -> (e :: E) a;
// monadic lift
private fun .mlift22874-try.1 : forall<a,(e :: E)> (a) -> <(std/core/types/handled :: HX -> X)<(exn :: HX)>|(e :: E)> (error :: V -> V)<a>;
// Transform an exception effect to an  `:error` type.
public fun try.1 : forall<a,(e :: E)> (action : () -> <(std/core/types/handled :: HX -> X)<(exn :: HX)>|(e :: E)> a) -> (e :: E) (error :: V -> V)<a>;
// _Deprecated_; use `try` instead. Catch an exception raised by `throw` and handle it.
// Use `on-exn` or `on-exit` when appropiate.
public fun catch : forall<a,(e :: E)> (action : () -> <(std/core/types/handled :: HX -> X)<(exn :: HX)>|(e :: E)> a, hndl : (exception) -> (e :: E) a) -> (e :: E) a;
public fun cdivmod-exp10 : (i : std/core/types/int, n : std/core/types/int) -> (std/core/types/int, std/core/types/int);
// Concatenate a list of `:maybe` values
public fun .ctail-concat-maybe : forall<a> (xs : (list :: V -> V)<(std/core/types/maybe :: V -> V)<a>>, (std/core/types/ctail :: V -> V)<(list :: V -> V)<a>>) -> (list :: V -> V)<a>;
// Concatenate a list of `:maybe` values
public fun concat-maybe : forall<a> (xs : (list :: V -> V)<(std/core/types/maybe :: V -> V)<a>>) -> (list :: V -> V)<a>;
// monadic lift
private fun .mlift22875-op : forall<a,(e :: E)> (action : (std/core/types/size_t) -> (e :: E) (std/core/types/maybe :: V -> V)<a>, end : std/core/types/size_t, i : std/core/types/size_t, (std/core/types/maybe :: V -> V)<a>) -> (e :: E) (std/core/types/maybe :: V -> V)<a>;
// lift
private fun .lift22736-for-whilez : forall<a,(e :: E)> (action : (std/core/types/size_t) -> (e :: E) (std/core/types/maybe :: V -> V)<a>, end : std/core/types/size_t, i : std/core/types/size_t) -> (e :: E) (std/core/types/maybe :: V -> V)<a>;
// Executes `action`  for each integer between `start`  upto `end`  (including both `start`  and `end` ).
// If `start > end`  the function returns without any call to `action` .
// If `action` returns `Just`, the iteration is stopped and the result returned
private fun for-whilez : forall<a,(e :: E)> (start : std/core/types/size_t, end : std/core/types/size_t, action : (std/core/types/size_t) -> (e :: E) (std/core/types/maybe :: V -> V)<a>) -> (e :: E) (std/core/types/maybe :: V -> V)<a>;
// O(1). The entire string as a slice
public fun slice : (s : std/core/types/string) -> sslice;
// monadic lift
private fun .mlift22876-foreach-while : forall<a,b,(e :: E)> (action : (a) -> (e :: E) (std/core/types/maybe :: V -> V)<b>, xx : (list :: V -> V)<a>, (std/core/types/maybe :: V -> V)<b>) -> (e :: E) (std/core/types/maybe :: V -> V)<b>;
// Invoke `action` for each element of a list while `action` return `Nothing`
public fun foreach-while : forall<a,b,(e :: E)> (xs : (list :: V -> V)<a>, action : (a) -> (e :: E) (std/core/types/maybe :: V -> V)<b>) -> (e :: E) (std/core/types/maybe :: V -> V)<b>;
// monadic lift
private fun .mlift22877-foreach-while.1 : forall<a,(e :: E)> (action : (c : std/core/types/char) -> (e :: E) (std/core/types/maybe :: V -> V)<a>, rest : sslice, (std/core/types/maybe :: V -> V)<a>) -> (e :: E) (std/core/types/maybe :: V -> V)<a>;
// Apply a function for each character in a string slice.
// If `action` returns `Just`, the function returns immediately with that result.
public fun foreach-while.1 : forall<a,(e :: E)> (slice : sslice, action : (c : std/core/types/char) -> (e :: E) (std/core/types/maybe :: V -> V)<a>) -> (e :: E) (std/core/types/maybe :: V -> V)<a>;
// Invoke a function for each character in a string.
// If `action` returns `Just`, the function returns immediately with that result.
public fun foreach-while.2 : forall<a,(e :: E)> (s : std/core/types/string, action : (c : std/core/types/char) -> (e :: E) (std/core/types/maybe :: V -> V)<a>) -> (e :: E) (std/core/types/maybe :: V -> V)<a>;
// Invoke a function `f` for each element in a vector `v`.
// If `f` returns `Just`, the iteration is stopped early and the result is returned.
public fun foreach-while.3 : forall<a,b,(e :: E)> (v : (std/core/types/vector :: V -> V)<a>, f : (a) -> (e :: E) (std/core/types/maybe :: V -> V)<b>) -> (e :: E) (std/core/types/maybe :: V -> V)<b>;
// monadic lift
private fun .mlift22878-foreach : forall<a,(e :: E)> (action : (a) -> (e :: E) (), xx : (list :: V -> V)<a>, wild_ : ()) -> (e :: E) ();
// Invoke `action` for each element of a list
public fun foreach : forall<a,(e :: E)> (xs : (list :: V -> V)<a>, action : (a) -> (e :: E) ()) -> (e :: E) ();
// monadic lift
private fun .mlift22879-foreach.1 : forall<_a,(e :: E)> (wild_ : ()) -> (e :: E) (std/core/types/maybe :: V -> V)<_a>;
// monadic lift
private fun .mlift22880-foreach.1 : forall<_a,(e :: E)> (wild_0 : (std/core/types/maybe :: V -> V)<_a>) -> (e :: E) ();
// Apply a function for each character in a string slice.
public fun foreach.1 : forall<(e :: E)> (slice : sslice, action : (c : std/core/types/char) -> (e :: E) ()) -> (e :: E) ();
// Invoke a function for each character in a string
public fun foreach.2 : forall<(e :: E)> (s : std/core/types/string, action : (c : std/core/types/char) -> (e :: E) ()) -> (e :: E) ();
// Invoke a function `f` for each element in a vector `v`
public fun foreach.3 : forall<a,(e :: E)> (v : (std/core/types/vector :: V -> V)<a>, f : (a) -> (e :: E) ()) -> (e :: E) ();
// O(n). Return the number of characters in a string.
public fun count.1 : (s : std/core/types/string) -> std/core/types/int;
// O(n). Return the number of characters in a string slice
public fun count.2 : (slice : sslice) -> std/core/types/int;
// Count the number of times a predicate is true for each character in a string
public fun count.3 : (s : std/core/types/string, pred : (std/core/types/char) -> std/core/types/bool) -> std/core/types/int;
public fun dec : (i : std/core/types/int) -> std/core/types/int;
// Create a new `:delayed` value.
public fun delay : forall<a,(e :: E)> (action : () -> (e :: E) a) -> (delayed :: (E, V) -> V)<(e :: E),a>;
// Calculate `10^exp`
public fun exp10 : (exp : std/core/types/int) -> std/core/types/int;
// Is the integer negative (stricly smaller than zero)
public fun is-neg.2 : (i : std/core/types/int) -> std/core/types/bool;
// Is the value negative?
public fun is-neg.3 : (d : std/core/types/double) -> std/core/types/bool;
public fun divmod-exp10 : (i : std/core/types/int, n : std/core/types/int) -> (std/core/types/int, std/core/types/int);
// Drop the first `n` elements of a list (or fewer if the list is shorter than `n`)
public fun drop : forall<a> (xs : (list :: V -> V)<a>, n : std/core/types/int) -> (list :: V -> V)<a>;
// monadic lift
private fun .mlift22881-drop-while : forall<a,(e :: E)> (predicate : (a) -> (e :: E) std/core/types/bool, xs : (list :: V -> V)<a>, xx : (list :: V -> V)<a>, std/core/types/bool) -> (e :: E) (list :: V -> V)<a>;
// Drop all initial elements that satisfy `predicate`
public fun drop-while : forall<a,(e :: E)> (xs : (list :: V -> V)<a>, predicate : (a) -> (e :: E) std/core/types/bool) -> (e :: E) (list :: V -> V)<a>;
// An empty slice
public val empty : sslice;
// Does string `s`  end with `post`?
// If so, returns a slice of `s` from the start up to the `post` string at the end.
public fun ends-with : (s : std/core/types/string, post : std/core/types/string) -> (std/core/types/maybe :: V -> V)<sslice>;
// monadic lift
private fun .mlift22882-error-pattern : forall<a> (definition : std/core/types/string, location : std/core/types/string, std/core/types/string) -> a;
// Raise a pattern match exception. This is function is used internally by the
// compiler to generate error messages on pattern match failures.
public fun error-pattern : forall<a> (location : std/core/types/string, definition : std/core/types/string) -> <(std/core/types/handled :: HX -> X)<(exn :: HX)>> a;
// Transform an `:error` type back to an `exn` effect.
public fun exn : forall<a> (err : (error :: V -> V)<a>) -> <(std/core/types/handled :: HX -> X)<(exn :: HX)>> a;
// Calculate `2^exp`.
public fun exp2 : (exp : std/core/types/int) -> std/core/types/int;
// monadic lift
private fun .mlift22883-op : forall<a,(e :: E)> ((std/core/types/ctail :: V -> V)<(list :: V -> V)<a>>, pred : (a) -> (e :: E) std/core/types/bool, x : a, xx : (list :: V -> V)<a>, std/core/types/bool) -> (e :: E) (list :: V -> V)<a>;
// monadic lift
private fun .mlift22884-op : forall<a,(e :: E)> (((list :: V -> V)<a>) -> (list :: V -> V)<a>, pred : (a) -> (e :: E) std/core/types/bool, x : a, xx : (list :: V -> V)<a>, std/core/types/bool) -> (e :: E) (list :: V -> V)<a>;
// Retain only those elements of a list that satisfy the given predicate `pred`.
// For example: `filter([1,2,3],odd?) == [1,3]`
public fun .ctail-filter : forall<a,(e :: E)> (xs : (list :: V -> V)<a>, pred : (a) -> (e :: E) std/core/types/bool, (std/core/types/ctail :: V -> V)<(list :: V -> V)<a>>) -> (e :: E) (list :: V -> V)<a>;
// Retain only those elements of a list that satisfy the given predicate `pred`.
// For example: `filter([1,2,3],odd?) == [1,3]`
public fun .ctailm-filter : forall<a,(e :: E)> (xs : (list :: V -> V)<a>, pred : (a) -> (e :: E) std/core/types/bool, ((list :: V -> V)<a>) -> (list :: V -> V)<a>) -> (e :: E) (list :: V -> V)<a>;
// Retain only those elements of a list that satisfy the given predicate `pred`.
// For example: `filter([1,2,3],odd?) == [1,3]`
public fun filter : forall<a,(e :: E)> (xs : (list :: V -> V)<a>, pred : (a) -> (e :: E) std/core/types/bool) -> (e :: E) (list :: V -> V)<a>;
// monadic lift
private fun .mlift22885-op : forall<a,b,(e :: E)> ((std/core/types/ctail :: V -> V)<(list :: V -> V)<b>>, pred : (a) -> (e :: E) (std/core/types/maybe :: V -> V)<b>, xx : (list :: V -> V)<a>, (std/core/types/maybe :: V -> V)<b>) -> (e :: E) (list :: V -> V)<b>;
// monadic lift
private fun .mlift22886-op : forall<a,b,(e :: E)> (((list :: V -> V)<b>) -> (list :: V -> V)<b>, pred : (a) -> (e :: E) (std/core/types/maybe :: V -> V)<b>, xx : (list :: V -> V)<a>, (std/core/types/maybe :: V -> V)<b>) -> (e :: E) (list :: V -> V)<b>;
// Retain only those elements of a list that satisfy the given predicate `pred`.
// For example: `filterMap([1,2,3],fn(i) { if (i.odd?) then Nothing else Just(i*i) }) == [4]`
public fun .ctail-filter-map : forall<a,b,(e :: E)> (xs : (list :: V -> V)<a>, pred : (a) -> (e :: E) (std/core/types/maybe :: V -> V)<b>, (std/core/types/ctail :: V -> V)<(list :: V -> V)<b>>) -> (e :: E) (list :: V -> V)<b>;
// Retain only those elements of a list that satisfy the given predicate `pred`.
// For example: `filterMap([1,2,3],fn(i) { if (i.odd?) then Nothing else Just(i*i) }) == [4]`
public fun .ctailm-filter-map : forall<a,b,(e :: E)> (xs : (list :: V -> V)<a>, pred : (a) -> (e :: E) (std/core/types/maybe :: V -> V)<b>, ((list :: V -> V)<b>) -> (list :: V -> V)<b>) -> (e :: E) (list :: V -> V)<b>;
// Retain only those elements of a list that satisfy the given predicate `pred`.
// For example: `filterMap([1,2,3],fn(i) { if (i.odd?) then Nothing else Just(i*i) }) == [4]`
public fun filter-map : forall<a,b,(e :: E)> (xs : (list :: V -> V)<a>, pred : (a) -> (e :: E) (std/core/types/maybe :: V -> V)<b>) -> (e :: E) (list :: V -> V)<b>;
private fun is-zero.1 : (i : std/core/types/size_t) -> std/core/types/bool;
// Is the value zero?
public fun is-zero.2 : (d : std/core/types/double) -> std/core/types/bool;
// Find the first element satisfying some predicate
public fun find : forall<a> (xs : (list :: V -> V)<a>, pred : (a) -> std/core/types/bool) -> (std/core/types/maybe :: V -> V)<a>;
// O(n). If it occurs, return the position of substring `sub` in `s`, tupled with
// the position just following the substring `sub`.
public fun find.1 : (s : std/core/types/string, sub : std/core/types/string) -> (std/core/types/maybe :: V -> V)<sslice>;
// Return the last index of substring `sub` in `s` if it occurs.
public fun find-last : (s : std/core/types/string, sub : std/core/types/string) -> (std/core/types/maybe :: V -> V)<sslice>;
// Find the first element satisfying some predicate and return it.
public fun find-maybe : forall<a,b> (xs : (list :: V -> V)<a>, pred : (a) -> (std/core/types/maybe :: V -> V)<b>) -> (std/core/types/maybe :: V -> V)<b>;
// monadic lift
private fun .mlift22887-op : forall<a,b,(e :: E)> ((std/core/types/ctail :: V -> V)<(list :: V -> V)<b>>, f : (a) -> (e :: E) (std/core/types/maybe :: V -> V)<b>, xx : (list :: V -> V)<a>, (std/core/types/maybe :: V -> V)<b>) -> (e :: E) (list :: V -> V)<b>;
// monadic lift
private fun .mlift22888-op : forall<a,b,(e :: E)> (((list :: V -> V)<b>) -> (list :: V -> V)<b>, f : (a) -> (e :: E) (std/core/types/maybe :: V -> V)<b>, xx : (list :: V -> V)<a>, (std/core/types/maybe :: V -> V)<b>) -> (e :: E) (list :: V -> V)<b>;
// Concatenate the `Just` result elements from applying a function to all elements.
public fun .ctail-flatmap-maybe : forall<a,b,(e :: E)> (xs : (list :: V -> V)<a>, f : (a) -> (e :: E) (std/core/types/maybe :: V -> V)<b>, (std/core/types/ctail :: V -> V)<(list :: V -> V)<b>>) -> (e :: E) (list :: V -> V)<b>;
// Concatenate the `Just` result elements from applying a function to all elements.
public fun .ctailm-flatmap-maybe : forall<a,b,(e :: E)> (xs : (list :: V -> V)<a>, f : (a) -> (e :: E) (std/core/types/maybe :: V -> V)<b>, ((list :: V -> V)<b>) -> (list :: V -> V)<b>) -> (e :: E) (list :: V -> V)<b>;
// Concatenate the `Just` result elements from applying a function to all elements.
public fun flatmap-maybe : forall<a,b,(e :: E)> (xs : (list :: V -> V)<a>, f : (a) -> (e :: E) (std/core/types/maybe :: V -> V)<b>) -> (e :: E) (list :: V -> V)<b>;
public fun inc : (i : std/core/types/int) -> std/core/types/int;
public fun fold-int : forall<a> (start : std/core/types/int, end : std/core/types/int, init : a, f : (std/core/types/int, a) -> a) -> a;
// monadic lift
private fun .mlift22889-foldl : forall<a,(e :: E),b> (f : (a, b) -> (e :: E) a, xx : (list :: V -> V)<b>, a) -> (e :: E) a;
// Fold a list from the left, i.e. `foldl([1,2],0,(+)) == (0+1)+2`
// Since `foldl` is tail recursive, it is preferred over `foldr` when using an associative function `f`
public fun foldl : forall<a,b,(e :: E)> ((list :: V -> V)<a>, b, (b, a) -> (e :: E) b) -> (e :: E) b;
public fun foldl1 : forall<a,(e :: E)> (xs : (list :: V -> V)<a>, f : (a, a) -> <(std/core/types/handled :: HX -> X)<(exn :: HX)>|(e :: E)> a) -> <(std/core/types/handled :: HX -> X)<(exn :: HX)>|(e :: E)> a;
// Reverse a list.
public fun reverse : forall<a> (xs : (list :: V -> V)<a>) -> (list :: V -> V)<a>;
// Fold a list from the right, i.e. `foldr([1,2],0,(+)) == 1+(2+0)`
// Note, `foldr` is less efficient than `foldl` as it reverses the list first.
public fun foldr : forall<a,b,(e :: E)> (xs : (list :: V -> V)<a>, z : b, f : (a, b) -> (e :: E) b) -> (e :: E) b;
public fun foldr1 : forall<a,(e :: E)> (xs : (list :: V -> V)<a>, f : (a, a) -> <(std/core/types/handled :: HX -> X)<(exn :: HX)>|(e :: E)> a) -> <(std/core/types/handled :: HX -> X)<(exn :: HX)>|(e :: E)> a;
// monadic lift
private fun .mlift22890-op : forall<(e :: E)> (action : (std/core/types/int) -> (e :: E) (), end : std/core/types/int, i : std/core/types/int, wild_ : ()) -> (e :: E) ();
// lift
private fun .lift22737-for : forall<(e :: E)> (action : (std/core/types/int) -> (e :: E) (), end : std/core/types/int, i : std/core/types/int) -> (e :: E) ();
// Executes `action`  for each integer between `start`  upto `end`  (including both `start`  and `end` ).
// If `start > end`  the function returns without any call to `action` .
public fun for : forall<(e :: E)> (start : std/core/types/int, end : std/core/types/int, action : (std/core/types/int) -> (e :: E) ()) -> (e :: E) ();
// monadic lift
private fun .mlift22891-op : forall<a,(e :: E)> (action : (std/core/types/int) -> (e :: E) (std/core/types/maybe :: V -> V)<a>, end : std/core/types/int, i : std/core/types/int, (std/core/types/maybe :: V -> V)<a>) -> (e :: E) (std/core/types/maybe :: V -> V)<a>;
// lift
private fun .lift22738-for-while : forall<a,(e :: E)> (action : (std/core/types/int) -> (e :: E) (std/core/types/maybe :: V -> V)<a>, end : std/core/types/int, i : std/core/types/int) -> (e :: E) (std/core/types/maybe :: V -> V)<a>;
// Executes `action`  for each integer between `start`  upto `end`  (including both `start`  and `end` ).
// If `start > end`  the function returns without any call to `action` .
// If `action` returns `Just`, the iteration is stopped and the result returned
public fun for-while : forall<a,(e :: E)> (start : std/core/types/int, end : std/core/types/int, action : (std/core/types/int) -> (e :: E) (std/core/types/maybe :: V -> V)<a>) -> (e :: E) (std/core/types/maybe :: V -> V)<a>;
// monadic lift
private fun .mlift22892-foreach-indexed : forall<(h :: H),(e :: E)> (i : (std/core/types/local-var :: (H, V) -> V)<(h :: H),std/core/types/int>, std/core/types/int) -> <(std/core/types/local :: H -> X)<(h :: H)>|(e :: E)> ();
// monadic lift
private fun .mlift22893-foreach-indexed : forall<(h :: H),(e :: E)> (i : (std/core/types/local-var :: (H, V) -> V)<(h :: H),std/core/types/int>, wild_ : ()) -> <(std/core/types/local :: H -> X)<(h :: H)>|(e :: E)> ();
// monadic lift
private fun .mlift22894-foreach-indexed : forall<(h :: H),a,(e :: E)> (action : (std/core/types/int, a) -> (e :: E) (), i : (std/core/types/local-var :: (H, V) -> V)<(h :: H),std/core/types/int>, x : a, j : std/core/types/int) -> <(std/core/types/local :: H -> X)<(h :: H)>|(e :: E)> ();
// Invoke `action` for each element of a list, passing also the position of the element.
public fun foreach-indexed : forall<a,(e :: E)> (xs : (list :: V -> V)<a>, action : (std/core/types/int, a) -> (e :: E) ()) -> (e :: E) ();
// Invoke a function `f` for each element in a vector `v`
public fun foreach-indexed.1 : forall<a,(e :: E)> (v : (std/core/types/vector :: V -> V)<a>, f : (a, std/core/types/int) -> (e :: E) ()) -> (e :: E) ();
// Print a string to the console.
public fun print : (s : std/core/types/string) -> <(console :: X)> ();
// Print an integer to the console.
public fun print.1 : (i : std/core/types/int) -> <(console :: X)> ();
// Print a double to the console.
public fun print.2 : (d : std/core/types/double) -> <(console :: X)> ();
// Print a boolean to the console
public fun print.3 : (b : std/core/types/bool) -> <(console :: X)> ();
// Print a character to the console.
public fun print.4 : (c : std/core/types/char) -> <(console :: X)> ();
// Print a unit value to the console
public fun print.5 : (u : ()) -> <(console :: X)> ();
// Generic print routine: prints the internal representation as a string to the console,
// including a final newline character.
// Note: this breaks parametricity so it should not be public
private fun gprint : forall<a> (x : a) -> <(console :: X)> ();
// Generic print routine: prints the internal representation as a string to the console, including a final newline character.
// Note: this breaks parametricity so it should not be public
private fun gprintln : forall<a> (x : a) -> <(console :: X)> ();
// Return the head of list if the list is not empty.
public fun head.1 : forall<a> (xs : (list :: V -> V)<a>) -> (std/core/types/maybe :: V -> V)<a>;
// Return the head of list if the list is not empty, or use `default` otherwise
public fun head.2 : forall<a> (xs : (list :: V -> V)<a>, default : a) -> a;
// Return the first character of a string as a string (or the empty string)
public fun head.3 : (s : std/core/types/string) -> std/core/types/string;
// Return the first character of a string (or `Nothing` for the empty string).
public fun head-char : (s : std/core/types/string) -> (std/core/types/maybe :: V -> V)<std/core/types/char>;
private fun index-of-acc : forall<a> (xs : (list :: V -> V)<a>, pred : (a) -> std/core/types/bool, idx : std/core/types/int) -> std/core/types/int;
// Returns the index of the first element where `pred` holds, or `-1` if no such element exists.
public fun index-of : forall<a> (xs : (list :: V -> V)<a>, pred : (a) -> std/core/types/bool) -> std/core/types/int;
// Return the list without its last element.
// Return an empty list for an empty list.
public fun .ctail-init : forall<a> (xs : (list :: V -> V)<a>, (std/core/types/ctail :: V -> V)<(list :: V -> V)<a>>) -> (list :: V -> V)<a>;
// Return the list without its last element.
// Return an empty list for an empty list.
public fun init : forall<a> (xs : (list :: V -> V)<a>) -> (list :: V -> V)<a>;
// Is the character a lower-case ASCII character ?
public fun is-lower : (c : std/core/types/char) -> std/core/types/bool;
// Is the character an upper-case ASCII character ?
public fun is-upper : (c : std/core/types/char) -> std/core/types/bool;
// Is the character an ASCII letter is-
public fun is-alpha : (c : std/core/types/char) -> std/core/types/bool;
// Is the character an ASCII digit ?
public fun is-digit : (c : std/core/types/char) -> std/core/types/bool;
// Is the character ASCII letter or digit?
public fun is-alpha-num : (c : std/core/types/char) -> std/core/types/bool;
// Is the character an ASCII character, e.g. `c <= '\x7F'`  ?
public fun is-ascii : (c : std/core/types/char) -> std/core/types/bool;
// Is the character an ASCII control character, e.g. `c < ' '`  ?
public fun is-control : (c : std/core/types/char) -> std/core/types/bool;
// Is the character an ASCII hexa-decimal digit ?
public fun is-hex-digit : (c : std/core/types/char) -> std/core/types/bool;
// Is a slice not empty?
public fun is-notempty : (slice : sslice) -> std/core/types/bool;
// Is a string not empty?
public fun is-notempty.1 : (s : std/core/types/string) -> std/core/types/bool;
// Tests if a character is an element of `" \t\n\r"`
public fun is-white : (c : std/core/types/char) -> std/core/types/bool;
// Append `end` to each string in the list `xs` and join them all together.\
// `join-end([],end) === ""`\
// `join-end(["a","b"],"/") === "a/b/"`
public fun join-end : (xs : (list :: V -> V)<std/core/types/string>, end : std/core/types/string) -> std/core/types/string;
// Return the last element of a list (or `Nothing` for the empty list)
public fun last : forall<a> (xs : (list :: V -> V)<a>) -> (std/core/types/maybe :: V -> V)<a>;
// Return the last element of a list (or `default` for the empty list)
public fun last.1 : forall<a> (xs : (list :: V -> V)<a>, default : a) -> a;
// O(`n`). The last `n` (default = `1`) characters in a string
public fun last.2 : (s : std/core/types/string, n : (std/core/types/optional :: V -> V)<std/core/types/int>) -> sslice;
// Take the first `n` elements of a list (or fewer if the list is shorter than `n`)
public fun .ctail-take : forall<a> (xs : (list :: V -> V)<a>, n : std/core/types/int, (std/core/types/ctail :: V -> V)<(list :: V -> V)<a>>) -> (list :: V -> V)<a>;
// Take the first `n` elements of a list (or fewer if the list is shorter than `n`)
public fun take : forall<a> (xs : (list :: V -> V)<a>, n : std/core/types/int) -> (list :: V -> V)<a>;
// split a list at position `n`
public fun split : forall<a> (xs : (list :: V -> V)<a>, n : std/core/types/int) -> ((list :: V -> V)<a>, (list :: V -> V)<a>);
// Split a string into parts that were delimited by `sep`. The delimeters are not included in the results.
// For example: `split("1,,2",",") == ["1","","2]`
public fun split.1 : (s : std/core/types/string, sep : std/core/types/string) -> (list :: V -> V)<std/core/types/string>;
// Split a string into at most `n` parts that were delimited by a string `sep`. The delimeters are not included in the results (except for possibly the final part).
// For example: `split("1,2,3",",",2) == ["1","2,3"]`
public fun split.2 : (s : std/core/types/string, sep : std/core/types/string, n : std/core/types/int) -> (list :: V -> V)<std/core/types/string>;
// Split a string into a list of lines
public fun lines : (s : std/core/types/string) -> (list :: V -> V)<std/core/types/string>;
// Lookup the first element satisfying some predicate
public fun lookup : forall<a,b> (xs : (list :: V -> V)<(a, b)>, pred : (a) -> std/core/types/bool) -> (std/core/types/maybe :: V -> V)<b>;
// monadic lift
private fun .mlift22895-op : forall<a,(e :: E)> (a, (list :: V -> V)<a>) -> (e :: E) (list :: V -> V)<a>;
// monadic lift
private fun .mlift22896-op : forall<a,b,(e :: E)> (f : (idx : std/core/types/int, value : a) -> (e :: E) b, i : std/core/types/int, yy : (list :: V -> V)<a>, b) -> (e :: E) (list :: V -> V)<b>;
// lift
private fun .lift22739-map-indexed : forall<a,b,(e :: E)> (f : (idx : std/core/types/int, value : a) -> (e :: E) b, ys : (list :: V -> V)<a>, i : std/core/types/int) -> (e :: E) (list :: V -> V)<b>;
// Apply a function `f`  to each element of the input list in sequence where takes
// both the index of the current element and the element itself as arguments.
public fun map-indexed : forall<a,b,(e :: E)> (xs : (list :: V -> V)<a>, f : (idx : std/core/types/int, value : a) -> (e :: E) b) -> (e :: E) (list :: V -> V)<b>;
// monadic lift
private fun .mlift22897-op : forall<a,(e :: E)> (a, (list :: V -> V)<a>) -> (e :: E) (list :: V -> V)<a>;
// monadic lift
private fun .mlift22898-op : forall<a,b,(e :: E)> (f : (idx : std/core/types/int, value : a, rest : (list :: V -> V)<a>) -> (e :: E) b, i : std/core/types/int, yy : (list :: V -> V)<a>, b) -> (e :: E) (list :: V -> V)<b>;
// lift
private fun .lift22740-map-indexed-peek : forall<a,b,(e :: E)> (f : (idx : std/core/types/int, value : a, rest : (list :: V -> V)<a>) -> (e :: E) b, ys : (list :: V -> V)<a>, i : std/core/types/int) -> (e :: E) (list :: V -> V)<b>;
// Apply a function `f`  to each element of the input list in sequence where takes
// both the index of the current element, the element itself, and the tail list as arguments.
public fun map-indexed-peek : forall<a,b,(e :: E)> (xs : (list :: V -> V)<a>, f : (idx : std/core/types/int, value : a, rest : (list :: V -> V)<a>) -> (e :: E) b) -> (e :: E) (list :: V -> V)<b>;
// monadic lift
private fun .mlift22899-op : forall<a,b,(e :: E)> ((std/core/types/ctail :: V -> V)<(list :: V -> V)<b>>, action : (a) -> (e :: E) (std/core/types/maybe :: V -> V)<b>, xx : (list :: V -> V)<a>, (std/core/types/maybe :: V -> V)<b>) -> (e :: E) (list :: V -> V)<b>;
// monadic lift
private fun .mlift22900-op : forall<a,b,(e :: E)> (((list :: V -> V)<b>) -> (list :: V -> V)<b>, action : (a) -> (e :: E) (std/core/types/maybe :: V -> V)<b>, xx : (list :: V -> V)<a>, (std/core/types/maybe :: V -> V)<b>) -> (e :: E) (list :: V -> V)<b>;
// Invoke `action` on each element of a list while `action` returns `Just`
public fun .ctail-map-while : forall<a,b,(e :: E)> (xs : (list :: V -> V)<a>, action : (a) -> (e :: E) (std/core/types/maybe :: V -> V)<b>, (std/core/types/ctail :: V -> V)<(list :: V -> V)<b>>) -> (e :: E) (list :: V -> V)<b>;
// Invoke `action` on each element of a list while `action` returns `Just`
public fun .ctailm-map-while : forall<a,b,(e :: E)> (xs : (list :: V -> V)<a>, action : (a) -> (e :: E) (std/core/types/maybe :: V -> V)<b>, ((list :: V -> V)<b>) -> (list :: V -> V)<b>) -> (e :: E) (list :: V -> V)<b>;
// Invoke `action` on each element of a list while `action` returns `Just`
public fun map-while : forall<a,b,(e :: E)> (xs : (list :: V -> V)<a>, action : (a) -> (e :: E) (std/core/types/maybe :: V -> V)<b>) -> (e :: E) (list :: V -> V)<b>;
// Return the maximum of two integers
public fun max : (i : std/core/types/int, j : std/core/types/int) -> std/core/types/int;
// Returns the largest of two doubles
public fun max.1 : (x : std/core/types/double, y : std/core/types/double) -> std/core/types/double;
// Returns the largest element of a list of integers (or `default` (=`0`) for the empty list)
public fun maximum : (xs : (list :: V -> V)<std/core/types/int>, default : (std/core/types/optional :: V -> V)<std/core/types/int>) -> std/core/types/int;
// Returns the largest element of a list of doubles (or `0` for the empty list)
public fun maximum.1 : (xs : (list :: V -> V)<std/core/types/double>) -> std/core/types/double;
// Match a `:maybe` value and either return a default value on `Nothing` or apply a function to the value on `Just`
public fun maybe : forall<a,b,(e :: E)> (m : (std/core/types/maybe :: V -> V)<a>, onNothing : b, onJust : (a) -> (e :: E) b) -> (e :: E) b;
// Convert a `:maybe<a>` value to `:a`, using the `nothing` parameter for `Nothing`.
// This is an alias for `default`.
public fun maybe.1 : forall<a> (m : (std/core/types/maybe :: V -> V)<a>, nothing : a) -> a;
// Convert a `:either` to a `:maybe` type discarding the value of the `Left` constructor
// and using `Just` for the `Right` constructor.
public fun maybe.2 : forall<a,b> (e : (std/core/types/either :: (V, V) -> V)<a,b>) -> (std/core/types/maybe :: V -> V)<b>;
// Convert a list to a `:maybe` type, using `Nothing` for an empty list, and otherwise `Just` on the head element.
// Note: this is just `head`.
public fun maybe.3 : forall<a> (xs : (list :: V -> V)<a>) -> (std/core/types/maybe :: V -> V)<a>;
// Transform a boolean to a maybe type, using `Nothing` for `False`
public fun maybe.4 : (b : std/core/types/bool) -> (std/core/types/maybe :: V -> V)<()>;
// Transform an integer to a maybe type, using `Nothing` for `0`
public fun maybe.5 : (i : std/core/types/int) -> (std/core/types/maybe :: V -> V)<std/core/types/int>;
// Transform a string to a maybe type, using `Nothing` for an empty string
public fun maybe.6 : (s : std/core/types/string) -> (std/core/types/maybe :: V -> V)<std/core/types/string>;
// Transform an `:error` type to a `:maybe` value.
public fun maybe.7 : forall<a> (t : (error :: V -> V)<a>) -> (std/core/types/maybe :: V -> V)<a>;
// Transform a `:null` type to a `:maybe` type. Note that it is not
// always the case that `id(x) == maybe(null(x))` (e.g. when `x = Just(Nothing)`).
public fun maybe.8 : forall<a> (n : (null :: V -> V)<a>) -> (std/core/types/maybe :: V -> V)<a>;
// Return the minimum of two integers
public fun min : (i : std/core/types/int, j : std/core/types/int) -> std/core/types/int;
// Returns the smallest of two doubles
public fun min.1 : (x : std/core/types/double, y : std/core/types/double) -> std/core/types/double;
// Returns the smallest element of a list of integers (or `default` (=`0`) for the empty list)
public fun minimum : (xs : (list :: V -> V)<std/core/types/int>, default : (std/core/types/optional :: V -> V)<std/core/types/int>) -> std/core/types/int;
// Returns the smallest element of a list of doubles (or `0` for the empty list)
public fun minimum.1 : (xs : (list :: V -> V)<std/core/types/double>) -> std/core/types/double;
// Disable tracing completely.
public fun notrace : () -> <(std/core/types/st :: H -> E)<(std/core/types/global :: H)>> ();
// Transform a `:maybe` type to a `:null` type (using `null` for `Nothing`).
public fun null : forall<a> (x : (std/core/types/maybe :: V -> V)<a>) -> (null :: V -> V)<a>;
// Cast a integer that is zero to a null
public fun null.1 : (i : std/core/types/int) -> (null :: V -> V)<std/core/types/int>;
// Cast an empty string a null
public fun null.2 : (s : std/core/types/string) -> (null :: V -> V)<std/core/types/string>;
// Cast a boolean `False` to null
public fun null.3 : (b : std/core/types/bool) -> (null :: V -> V)<()>;
public val null-const : forall<a> (null :: V -> V)<a>;
// Left-align a string to width `width`  using `fill`  (default is a space) to fill on the right.
public fun pad-right : (s : std/core/types/string, width : std/core/types/int, fill : (std/core/types/optional :: V -> V)<std/core/types/char>) -> std/core/types/string;
// Is `pre`  a prefix of `s`? If so, returns a slice
// of `s` following `pre` up to the end of `s`.
public fun starts-with : (s : std/core/types/string, pre : std/core/types/string) -> (std/core/types/maybe :: V -> V)<sslice>;
// Trim off a substring `sub` while `s` starts with that string.
public fun trim-left.1 : (s : std/core/types/string, sub : std/core/types/string) -> std/core/types/string;
// Trim off a substring `sub` while `s` ends with that string.
public fun trim-right.1 : (s : std/core/types/string, sub : std/core/types/string) -> std/core/types/string;
// Trim whitespace on the left and right side of a string
public fun trim : (s : std/core/types/string) -> std/core/types/string;
// Parse an integer after trimming whitespace.
// If an illegal digit character is encountered `Nothing` is returned.
// An empty string will result in `Just(0)`.
// A string can start with a `-` sign for negative numbers,
// and with `0x` or `0X` for hexadecimal numbers (in which case the `hex` parameter is ignored).
public fun parse-int : (s : std/core/types/string, hex : (std/core/types/optional :: V -> V)<std/core/types/bool>) -> (std/core/types/maybe :: V -> V)<std/core/types/int>;
// Parse an integer using `parseInt`. If an illegal digit character is encountered the
// `default` value is returned. An empty string will also result in `default`.
public fun parse-int-default : (s : std/core/types/string, default : (std/core/types/optional :: V -> V)<std/core/types/int>, hex : (std/core/types/optional :: V -> V)<std/core/types/bool>) -> std/core/types/int;
// monadic lift
private fun .mlift22901-partition-acc : forall<a,(e :: E)> (acc1 : (list :: V -> V)<a>, acc2 : (list :: V -> V)<a>, pred : (a) -> (e :: E) std/core/types/bool, x : a, xx : (list :: V -> V)<a>, std/core/types/bool) -> (e :: E) ((list :: V -> V)<a>, (list :: V -> V)<a>);
private fun partition-acc : forall<a,(e :: E)> (xs : (list :: V -> V)<a>, pred : (a) -> (e :: E) std/core/types/bool, acc1 : (list :: V -> V)<a>, acc2 : (list :: V -> V)<a>) -> (e :: E) ((list :: V -> V)<a>, (list :: V -> V)<a>);
// Partition a list in two lists where the first list contains
// those elements that satisfy the given predicate `pred`.
// For example: `partition([1,2,3],odd?) == ([1,3],[2])`
public fun partition : forall<a,(e :: E)> (xs : (list :: V -> V)<a>, pred : (a) -> (e :: E) std/core/types/bool) -> (e :: E) ((list :: V -> V)<a>, (list :: V -> V)<a>);
// redirect `print` and `println` calls to a specified function.
public fun print-redirect : (print : (msg : std/core/types/string) -> <(console :: X)> ()) -> <(io :: E)> ();
// Remove those elements of a list that satisfy the given predicate `pred`.
// For example: `remove([1,2,3],odd?) == [2]`
public fun remove : forall<a> (xs : (list :: V -> V)<a>, pred : (a) -> std/core/types/bool) -> (list :: V -> V)<a>;
// Repeat a string `n` times
public fun repeat : (s : std/core/types/string, n : std/core/types/int) -> std/core/types/string;
// The `repeat` fun executes `action`  `n`  times.
public fun repeat.1 : forall<(e :: E)> (n : std/core/types/int, action : () -> (e :: E) ()) -> (e :: E) ();
// Create a list of `n`  repeated elementes `x`
public fun .ctail-replicate : forall<a> (x : a, n : std/core/types/int, (std/core/types/ctail :: V -> V)<(list :: V -> V)<a>>) -> (list :: V -> V)<a>;
// Create a list of `n`  repeated elementes `x`
public fun replicate : forall<a> (x : a, n : std/core/types/int) -> (list :: V -> V)<a>;
public fun show-tuple : forall<a,b> (x : (a, b), showfst : (a) -> std/core/types/string, showsnd : (b) -> std/core/types/string) -> std/core/types/string;
// monadic lift
private fun .mlift22902-op : forall<a,(e :: E)> (acc : (list :: V -> V)<a>, predicate : (a) -> (e :: E) std/core/types/bool, y : a, ys : (list :: V -> V)<a>, yy : (list :: V -> V)<a>, std/core/types/bool) -> (e :: E) ((list :: V -> V)<a>, (list :: V -> V)<a>);
// lift
private fun .lift22741-span : forall<a,(e :: E)> (predicate : (a) -> (e :: E) std/core/types/bool, ys : (list :: V -> V)<a>, acc : (list :: V -> V)<a>) -> (e :: E) ((list :: V -> V)<a>, (list :: V -> V)<a>);
public fun span : forall<a,(e :: E)> (xs : (list :: V -> V)<a>, predicate : (a) -> (e :: E) std/core/types/bool) -> (e :: E) ((list :: V -> V)<a>, (list :: V -> V)<a>);
// Return the sum of a list of integers
public fun sum : (xs : (list :: V -> V)<std/core/types/int>) -> std/core/types/int;
// Return the tail of list. Returns the empty list if `xs` is empty.
public fun tail.1 : forall<a> (xs : (list :: V -> V)<a>) -> (list :: V -> V)<a>;
// Return the tail of a string (or the empty string)
public fun tail.2 : (s : std/core/types/string) -> std/core/types/string;
// monadic lift
private fun .mlift22903-op : forall<a,(e :: E)> ((std/core/types/ctail :: V -> V)<(list :: V -> V)<a>>, predicate : (a) -> (e :: E) std/core/types/bool, x : a, xx : (list :: V -> V)<a>, std/core/types/bool) -> (e :: E) (list :: V -> V)<a>;
// monadic lift
private fun .mlift22904-op : forall<a,(e :: E)> (((list :: V -> V)<a>) -> (list :: V -> V)<a>, predicate : (a) -> (e :: E) std/core/types/bool, x : a, xx : (list :: V -> V)<a>, std/core/types/bool) -> (e :: E) (list :: V -> V)<a>;
// Keep only those initial elements that satisfy `predicate`
public fun .ctail-take-while : forall<a,(e :: E)> (xs : (list :: V -> V)<a>, predicate : (a) -> (e :: E) std/core/types/bool, (std/core/types/ctail :: V -> V)<(list :: V -> V)<a>>) -> (e :: E) (list :: V -> V)<a>;
// Keep only those initial elements that satisfy `predicate`
public fun .ctailm-take-while : forall<a,(e :: E)> (xs : (list :: V -> V)<a>, predicate : (a) -> (e :: E) std/core/types/bool, ((list :: V -> V)<a>) -> (list :: V -> V)<a>) -> (e :: E) (list :: V -> V)<a>;
// Keep only those initial elements that satisfy `predicate`
public fun take-while : forall<a,(e :: E)> (xs : (list :: V -> V)<a>, predicate : (a) -> (e :: E) std/core/types/bool) -> (e :: E) (list :: V -> V)<a>;
public fun todo : (message : std/core/types/string) -> ();
// Trace a message used for debug purposes.
// The behaviour is system dependent. On a browser and node it uses
// `console.log`  by default.
// Disabled if `notrace` is called.
public fun trace : (message : std/core/types/string) -> ();
public fun trace-any : forall<a> (message : std/core/types/string, x : a) -> ();
// Truncate a string to `count` characters.
public fun truncate : (s : std/core/types/string, count : std/core/types/int) -> std/core/types/string;
// Return a default value when an exception is raised
public fun try-default : forall<a,(e :: E)> (value : a, action : () -> <(std/core/types/handled :: HX -> X)<(exn :: HX)>|(e :: E)> a) -> (e :: E) a;
// Returns a unique integer (modulo 32-bits).
public fun unique : () -> <(std/core/types/ndet :: X)> std/core/types/int;
// Get the value of the `Just` constructor or raise an exception
public fun unjust : forall<a> (m : (std/core/types/maybe :: V -> V)<a>) -> <(std/core/types/handled :: HX -> X)<(exn :: HX)>> a;
// Join a list of strings with newlines
public fun unlines : (xs : (list :: V -> V)<std/core/types/string>) -> std/core/types/string;
// lift
private fun .lift22742-unzip : forall<a,b> (ys : (list :: V -> V)<(a, b)>, acc1 : (list :: V -> V)<a>, acc2 : (list :: V -> V)<b>) -> ((list :: V -> V)<a>, (list :: V -> V)<b>);
// Unzip a list of pairs into two lists
public fun unzip : forall<a,b> (xs : (list :: V -> V)<(a, b)>) -> ((list :: V -> V)<a>, (list :: V -> V)<b>);
// Convert a string to a vector of characters.
public fun vector.1 : (s : std/core/types/string) -> (std/core/types/vector :: V -> V)<std/core/types/char>;
// Create a new vector of length `n`  with initial elements `default` .
public fun vector.2 : forall<a> (n : std/core/types/int, default : a) -> (std/core/types/vector :: V -> V)<a>;
// Convert a list to a vector.
public fun vector.3 : forall<a> (xs : (list :: V -> V)<a>) -> (std/core/types/vector :: V -> V)<a>;
// Create a new vector of length `n`  with initial elements given by function `f` .
public fun vector-init : forall<a> (n : std/core/types/int, f : (std/core/types/int) -> a) -> (std/core/types/vector :: V -> V)<a>;
// monadic lift
private fun .mlift22905-while : forall<(e :: E)> (action : () -> <(std/core/types/div :: X)|(e :: E)> (), predicate : () -> <(std/core/types/div :: X)|(e :: E)> std/core/types/bool, wild_ : ()) -> <(std/core/types/div :: X)|(e :: E)> ();
// monadic lift
private fun .mlift22906-while : forall<(e :: E)> (action : () -> <(std/core/types/div :: X)|(e :: E)> (), predicate : () -> <(std/core/types/div :: X)|(e :: E)> std/core/types/bool, std/core/types/bool) -> <(std/core/types/div :: X)|(e :: E)> ();
// The `while` fun executes `action`  as long as `pred`  is `true`.
public fun while : forall<(e :: E)> (predicate : () -> <(std/core/types/div :: X)|(e :: E)> std/core/types/bool, action : () -> <(std/core/types/div :: X)|(e :: E)> ()) -> <(std/core/types/div :: E)|(e :: E)> ();
// Zip two lists together by pairing the corresponding elements.
// The returned list is only as long as the smallest input list.
public fun .ctail-zip : forall<a,b> (xs : (list :: V -> V)<a>, ys : (list :: V -> V)<b>, (std/core/types/ctail :: V -> V)<(list :: V -> V)<(a, b)>>) -> (list :: V -> V)<(a, b)>;
// Zip two lists together by pairing the corresponding elements.
// The returned list is only as long as the smallest input list.
public fun zip : forall<a,b> (xs : (list :: V -> V)<a>, ys : (list :: V -> V)<b>) -> (list :: V -> V)<(a, b)>;
// monadic lift
private fun .mlift22907-op : forall<a,b,c,(e :: E)> ((std/core/types/ctail :: V -> V)<(list :: V -> V)<c>>, f : (a, b) -> (e :: E) c, xx : (list :: V -> V)<a>, yy : (list :: V -> V)<b>, c) -> (e :: E) (list :: V -> V)<c>;
// monadic lift
private fun .mlift22908-op : forall<a,b,c,(e :: E)> (((list :: V -> V)<c>) -> (list :: V -> V)<c>, f : (a, b) -> (e :: E) c, xx : (list :: V -> V)<a>, yy : (list :: V -> V)<b>, c) -> (e :: E) (list :: V -> V)<c>;
// Zip two lists together by apply a function `f` to all corresponding elements.
// The returned list is only as long as the smallest input list.
public fun .ctail-zipwith : forall<a,b,c,(e :: E)> (xs : (list :: V -> V)<a>, ys : (list :: V -> V)<b>, f : (a, b) -> (e :: E) c, (std/core/types/ctail :: V -> V)<(list :: V -> V)<c>>) -> (e :: E) (list :: V -> V)<c>;
// Zip two lists together by apply a function `f` to all corresponding elements.
// The returned list is only as long as the smallest input list.
public fun .ctailm-zipwith : forall<a,b,c,(e :: E)> (xs : (list :: V -> V)<a>, ys : (list :: V -> V)<b>, f : (a, b) -> (e :: E) c, ((list :: V -> V)<c>) -> (list :: V -> V)<c>) -> (e :: E) (list :: V -> V)<c>;
// Zip two lists together by apply a function `f` to all corresponding elements.
// The returned list is only as long as the smallest input list.
public fun zipwith : forall<a,b,c,(e :: E)> (xs : (list :: V -> V)<a>, ys : (list :: V -> V)<b>, f : (a, b) -> (e :: E) c) -> (e :: E) (list :: V -> V)<c>;
// monadic lift
private fun .mlift22909-zipwith-acc : forall<(e :: E),a,b,c> (acc : (list :: V -> V)<b>, f : (std/core/types/int, a, c) -> (e :: E) b, i : std/core/types/int, xx : (list :: V -> V)<a>, yy : (list :: V -> V)<c>, b) -> (e :: E) (list :: V -> V)<b>;
private fun zipwith-acc : forall<a,b,c,(e :: E)> ((std/core/types/int, a, b) -> (e :: E) c, std/core/types/int, (list :: V -> V)<c>, (list :: V -> V)<a>, (list :: V -> V)<b>) -> (e :: E) (list :: V -> V)<c>;
// monadic lift
private fun .mlift22910-op : forall<a,(e :: E)> (a, (list :: V -> V)<a>) -> (e :: E) (list :: V -> V)<a>;
// monadic lift
private fun .mlift22911-op : forall<a,b,c,(e :: E)> (f : (std/core/types/int, a, b) -> (e :: E) c, i : std/core/types/int, xx : (list :: V -> V)<a>, yy : (list :: V -> V)<b>, c) -> (e :: E) (list :: V -> V)<c>;
// lift
private fun .lift22743-zipwith-indexed : forall<a,b,c,(e :: E)> (f : (std/core/types/int, a, b) -> (e :: E) c, i : std/core/types/int, xs : (list :: V -> V)<a>, ys : (list :: V -> V)<b>) -> (e :: E) (list :: V -> V)<c>;
// Zip two lists together by apply a function `f` to all corresponding elements
// and their index in the list.
// The returned list is only as long as the smallest input list.
public fun zipwith-indexed : forall<a,b,c,(e :: E)> (xs0 : (list :: V -> V)<a>, ys0 : (list :: V -> V)<b>, f : (std/core/types/int, a, b) -> (e :: E) c) -> (e :: E) (list :: V -> V)<c>;
 
//------------------------------
//#kki: external declarations
 
// Add the state effect to a function effect.
public extern inject-st : forall<a,(h :: H),(e :: E)> (() -> (e :: E) a) -> (total :: E) (() -> <(std/core/types/st :: H -> E)<(h :: H)>|(e :: E)> a) = inline "#1";
public extern (==) : (std/core/types/char, std/core/types/char) -> std/core/types/bool {
  inline "(#1 == #2)";
  js inline "(#1 === #2)";
};
public extern (!=) : (std/core/types/char, std/core/types/char) -> std/core/types/bool {
  inline "(#1 != #2)";
  js inline "(#1 !== #2)";
};
public extern (<=) : (std/core/types/char, std/core/types/char) -> std/core/types/bool = inline "(#1 <= #2)";
public extern (>=) : (std/core/types/char, std/core/types/char) -> std/core/types/bool = inline "(#1 >= #2)";
public extern (<) : (std/core/types/char, std/core/types/char) -> std/core/types/bool = inline "(#1 < #2)";
public extern (>) : (std/core/types/char, std/core/types/char) -> std/core/types/bool = inline "(#1 > #2)";
// Convert a character to its unicode code point
public extern int : (std/core/types/char) -> std/core/types/int {
  inline "#1";
  c inline "kk_integer_from_int(#1,kk_context())";
  cs inline "new BigInteger(#1)";
};
// Convert a unicode code point to a character
public extern char : (std/core/types/int) -> std/core/types/char {
  inline "(#1)";
  c inline "kk_integer_clamp32(#1,kk_context())";
  cs inline "Primitive.IntToInt32(#1)";
};
// Compare two integers
public extern compare : (std/core/types/int, std/core/types/int) -> std/core/types/order {
  c inline "kk_int_as_order(kk_integer_cmp(#1,#2,kk_context()),kk_context())";
  cs inline "Primitive.IntCompare(#1,#2)";
  js inline "$std_core._int_compare(#1,#2)";
};
// Are two integers equal?
public extern (==.1) : (std/core/types/int, std/core/types/int) -> std/core/types/bool {
  c inline "kk_integer_eq(#1,#2,kk_context())";
  cs inline "(#1 == #2)";
  js inline "$std_core._int_eq(#1,#2)";
};
// Are two integers not equal?
public extern (!=.1) : (std/core/types/int, std/core/types/int) -> std/core/types/bool {
  c inline "kk_integer_neq(#1,#2,kk_context())";
  cs inline "(#1 != #2)";
  js inline "$std_core._int_ne(#1,#2)";
};
// Is the first integer smaller or equal to the second?
public extern (<=.1) : (std/core/types/int, std/core/types/int) -> std/core/types/bool {
  c inline "kk_integer_lte(#1,#2,kk_context())";
  cs inline "(#1 <= #2)";
  js inline "$std_core._int_le(#1,#2)";
};
// Is the first integer greater or equal to the second?
public extern (>=.1) : (std/core/types/int, std/core/types/int) -> std/core/types/bool {
  c inline "kk_integer_gte(#1,#2,kk_context())";
  cs inline "(#1 >= #2)";
  js inline "$std_core._int_ge(#1,#2)";
};
// Is the first integer smaller than the second?
public extern (<.1) : (std/core/types/int, std/core/types/int) -> std/core/types/bool {
  c inline "kk_integer_lt(#1,#2,kk_context())";
  cs inline "(#1 < #2)";
  js inline "$std_core._int_lt(#1,#2)";
};
// Is the first integer greater than the second?
public extern (>.1) : (std/core/types/int, std/core/types/int) -> std/core/types/bool {
  c inline "kk_integer_gt(#1,#2,kk_context())";
  cs inline "(#1 > #2)";
  js inline "$std_core._int_gt(#1,#2)";
};
// Add two integers.
public extern (+) : (std/core/types/int, std/core/types/int) -> std/core/types/int {
  c inline "kk_integer_add(#1,#2,kk_context())";
  cs inline "(#1 + #2)";
  js inline "$std_core._int_add(#1,#2)";
};
// Substract two integers.
public extern (-) : (std/core/types/int, std/core/types/int) -> std/core/types/int {
  c inline "kk_integer_sub(#1,#2,kk_context())";
  cs inline "(#1 - #2)";
  js inline "$std_core._int_sub(#1,#2)";
};
// Multiply two integers.
public extern (*) : (std/core/types/int, std/core/types/int) -> std/core/types/int {
  c inline "kk_integer_mul(#1,#2,kk_context())";
  cs inline "(#1 * #2)";
  js inline "$std_core._int_mul(#1,#2)";
};
// Euclidean-0 division of two integers. See also `divmod:(x : int, y : int) -> (int,int)`.
public extern (/) : (x : std/core/types/int, y : std/core/types/int) -> std/core/types/int {
  c inline "kk_integer_div(#1,#2,kk_context())";
  cs inline "Primitive.IntDiv(#1,#2)";
  js inline "$std_core._int_div(#1,#2)";
};
// Euclidean modulus of two integers; always a non-negative number. See also `divmod:(x : int, y : int) -> (int,int)`.
public extern (%) : (std/core/types/int, std/core/types/int) -> std/core/types/int {
  c inline "kk_integer_mod(#1,#2,kk_context())";
  cs inline "Primitive.IntMod(#1,#2)";
  js inline "$std_core._int_mod(#1,#2)";
};
// Euclidean-0 division & modulus.
// Euclidean division is defined as: For any `D`  and `d`  where `d!=0` , we have:
//
// 1. `D == d*(D/d) + (D%d)`
// 2. `D%d`  is always positive where `0 <= D%d < abs(d)`
//
// Moreover, Euclidean-0 is a total function, for the case where `d==0`  we have
// that `D%0 == D`  and `D/0 == 0` . So property (1) still holds, but not property (2).
//
// Useful laws that hold for Euclidean-0 division:
//
// * `D/(-d) == -(D/d)`
// * `D%(-d) == D%d`
// * `D/(2^n) == sar(D,n)         `  (with `0 <= n <= 31`  and `2^n`  means `2`  to the power of `n` )
// * `D%(2^n) == D & ((2^n) - 1)  `  (with `0 <= n <= 31`  and `2^n`  means `2`  to the power of `n` )
//
// See also _Division and modulus for computer scientists, Daan Leijen, 2001_ for further information
// available at: <http://research.microsoft.com/pubs/151917/divmodnote.pdf> .
public extern divmod : (x : std/core/types/int, y : std/core/types/int) -> (std/core/types/int, std/core/types/int) {
  c inline "kk_integer_div_mod_tuple(#1,#2,kk_context())";
  cs inline "Primitive.IntDivMod(#1,#2)";
  js inline "$std_core._int_divmod(#1,#2)";
};
// Negate an integer.
public extern (~) : (i : std/core/types/int) -> std/core/types/int {
  c inline "kk_integer_neg(#1,kk_context())";
  cs inline "(-#1)";
  js inline "$std_core._int_negate(#1)";
};
// Convert an integer to a `:double`. May return `nan` if the integer is too large to represent as a `:double`.
public extern double : (std/core/types/int) -> std/core/types/double {
  c inline "kk_integer_as_double(#1,kk_context())";
  cs inline "Primitive.IntToDouble(#1)";
  js inline "$std_core._int_to_double(#1)";
};
// Is this an odd integer?
public extern is-odd : (std/core/types/int) -> std/core/types/bool {
  c inline "kk_integer_is_odd(#1,kk_context())";
  cs inline "!(#1.IsEven)";
  js inline "$std_core._int_isodd(#1)";
};
// Is this equal to zero?
public extern is-zero : (std/core/types/int) -> std/core/types/bool {
  c inline "kk_integer_is_zero(#1,kk_context())";
  cs inline "(#1.IsZero)";
  js inline "$std_core._int_iszero(#1)";
};
// Return the absolute value of an integer.
public extern abs : (i : std/core/types/int) -> std/core/types/int {
  c inline "kk_integer_abs(#1,kk_context())";
  cs inline "BigInteger.Abs(#1)";
  js inline "$std_core._int_abs(#1)";
};
public extern sign : (i : std/core/types/int) -> std/core/types/order {
  c inline "kk_int_as_order(kk_integer_signum(#1,kk_context()),kk_context())";
  cs inline "Primitive.IntSign(#1)";
  js inline "$std_core._int_sign(#1)";
};
// Convert an `:int32` to an `:int`.
public extern int.1 : (i : std/core/types/int32) -> std/core/types/int {
  c inline "kk_integer_from_int(#1,kk_context())";
  cs inline "(new BigInteger(#1))";
  js inline "$std_core._int_double(#1)";
};
// Minimal set of operations that we need in `std/core`.
private extern (<=.2) : (std/core/types/int32, std/core/types/int32) -> std/core/types/bool {
  inline "(#1 <= #2)";
  js inline "(#1 <= #2)";
};
private extern (<.2) : (std/core/types/int32, std/core/types/int32) -> std/core/types/bool {
  inline "(#1 < #2)";
  js inline "(#1 < #2)";
};
private extern (+.1) : (std/core/types/int32, std/core/types/int32) -> std/core/types/int32 {
  inline "(#1 + #2)";
  js inline "((#1 + #2)|0)";
};
private extern (-.1) : (std/core/types/int32, std/core/types/int32) -> std/core/types/int32 {
  inline "(#1 - #2)";
  js inline "((#1 - #2)|0)";
};
private extern is-pos : (i : std/core/types/int32) -> std/core/types/bool = inline "(#1>0)";
private extern is-neg : (i : std/core/types/int32) -> std/core/types/bool = inline "(#1<0)";
// Convert an `:size_t` to an `:int`.
private extern int.2 : (i : std/core/types/size_t) -> std/core/types/int {
  c inline "kk_integer_from_size_t(#1,kk_context())";
  cs inline "(new BigInteger(#1))";
  js inline "$std_core._int_double(#1)";
};
// Minimal set of operations that we need in `std/core`.
private extern (<=.3) : (std/core/types/size_t, std/core/types/size_t) -> std/core/types/bool = inline "(#1 <= #2)";
private extern (<.3) : (std/core/types/size_t, std/core/types/size_t) -> std/core/types/bool = inline "(#1 < #2)";
private extern (+.2) : (std/core/types/size_t, std/core/types/size_t) -> std/core/types/size_t {
  inline "(#1 + #2)";
  js inline "((#1 + #2)|0)";
};
private extern (-.2) : (std/core/types/size_t, std/core/types/size_t) -> std/core/types/size_t {
  inline "(#1 - #2)";
  js inline "((#1 - #2)|0)";
};
private extern is-pos.1 : (i : std/core/types/size_t) -> std/core/types/bool = inline "(#1 > 0)";
private extern is-neg.1 : (i : std/core/types/size_t) -> std/core/types/bool = inline "(#1 < 0)";
public extern (==.2) : (std/core/types/double, std/core/types/double) -> std/core/types/bool {
  inline "(#1 == #2)";
  js inline "(#1 === #2)";
};
public extern (!=.2) : (std/core/types/double, std/core/types/double) -> std/core/types/bool {
  inline "(#1 != #2)";
  js inline "(#1 !== #2)";
};
public extern (<=.4) : (std/core/types/double, std/core/types/double) -> std/core/types/bool = inline "(#1 <= #2)";
public extern (>=.2) : (std/core/types/double, std/core/types/double) -> std/core/types/bool = inline "(#1 >= #2)";
public extern (<.4) : (std/core/types/double, std/core/types/double) -> std/core/types/bool = inline "(#1 < #2)";
public extern (>.2) : (std/core/types/double, std/core/types/double) -> std/core/types/bool = inline "(#1 > #2)";
public extern (+.3) : (std/core/types/double, std/core/types/double) -> std/core/types/double = inline "(#1 + #2)";
public extern (-.3) : (std/core/types/double, std/core/types/double) -> std/core/types/double = inline "(#1 - #2)";
public extern (*.1) : (std/core/types/double, std/core/types/double) -> std/core/types/double = inline "(#1 * #2)";
public extern (/.1) : (std/core/types/double, std/core/types/double) -> std/core/types/double = inline "(#1 / #2)";
public extern (%.1) : (std/core/types/double, std/core/types/double) -> std/core/types/double = inline "(#1 % #2)";
// Negate a `:double`.
public extern (~.1) : (d : std/core/types/double) -> std/core/types/double = inline "(-#1)";
// convert a `:double` to an `:int` using `round` to round to its nearest integer.
// (rounding to an even number on a tie)
// Returns `0` if the argument is not `finite?`.
public extern int.3 : (d : std/core/types/double) -> std/core/types/int {
  c inline "kk_integer_from_double(#1,kk_context())";
  cs inline "Primitive.IntDouble(#1)";
  js inline "$std_core._int_double(#1)";
};
// Returns the value `d`  raised to the power `p` .
public extern (^) : (d : std/core/types/double, p : std/core/types/double) -> std/core/types/double {
  c inline "pow(#1,#2)";
  cs inline "Math.Pow(#1,#2)";
  js inline "Math.pow(#1,#2)";
};
// Return the absolute value of a `:double` `d`
public extern abs.1 : (d : std/core/types/double) -> std/core/types/double {
  c inline "kk_double_abs(#1)";
  cs inline "Math.Abs(#1)";
  js inline "Math.abs(#1)";
};
// Are two strings equal?
// Uses exact equality between character codes.
public extern (==.3) : (std/core/types/string, std/core/types/string) -> std/core/types/bool {
  c inline "kk_string_is_eq(#1,#2,kk_context())";
  cs inline "(#1 == #2)";
  js inline "(#1 === #2)";
};
// Are two strings not equal?
public extern (!=.3) : (std/core/types/string, std/core/types/string) -> std/core/types/bool {
  c inline "kk_string_is_neq(#1,#2,kk_context())";
  inline "(#1 != #2)";
  js inline "(#1 !== #2)";
};
// Length returns the length in the platform specific encoding (and should not be exported)
private extern length : (s : std/core/types/string) -> std/core/types/size_t {
  c inline "kk_string_len(#1,kk_context())";
  cs inline "#1.Length";
  js inline "#1.length";
};
// Does string `s`  contain the string `sub`  ?
private extern xindex-of : (s : std/core/types/string, sub : std/core/types/string) -> std/core/types/size_t {
  c inline "kk_string_index_of1(#1,#2,kk_context())";
  cs inline "((#1).IndexOf(#2) + 1)";
  js inline "((#1).indexOf(#2) + 1)";
};
// Does string `s`  contain the string `sub`  ?
private extern xlast-index-of : (s : std/core/types/string, sub : std/core/types/string) -> std/core/types/size_t {
  c inline "kk_string_last_index_of1(#1,#2,kk_context())";
  cs inline "(#1.LastIndexOf(#2) + 1)";
  js inline "((#1).lastIndexOf(#2) + 1)";
};
private extern xstarts-with : (s : std/core/types/string, pre : std/core/types/string) -> std/core/types/bool {
  c inline "kk_string_starts_with(#1,#2,kk_context())";
  cs inline "#1.StartsWith(#2)";
  js inline "(#1.substr(0,#2.length) === #2)";
};
// Does string `s`  contain the string `sub`  ?
public extern contains : (s : std/core/types/string, sub : std/core/types/string) -> std/core/types/bool {
  c inline "kk_string_contains(#1,#2,kk_context())";
  cs inline "((#1).Contains(#2))";
  js inline "((#1).indexOf(#2) >= 0)";
};
// Concatenate a vector of strings
public extern join : (v : (std/core/types/vector :: V -> V)<std/core/types/string>) -> std/core/types/string {
  c inline "kk_string_join(#1,kk_context())";
  cs inline "String.Concat(#1)";
  js inline "((#1).join(\x27\x27))";
};
// Concatenate a vector of strings with a separator `sep`
public extern join.1 : (v : (std/core/types/vector :: V -> V)<std/core/types/string>, sep : std/core/types/string) -> (total :: E) std/core/types/string {
  c inline "kk_string_join_with(#1,#2,kk_context())";
  cs inline "Primitive.Concat(#1,#2)";
  js inline "((#1).join(#2))";
};
private extern splitv : (s : std/core/types/string, sep : std/core/types/string) -> (std/core/types/vector :: V -> V)<std/core/types/string> {
  c inline "kk_string_splitv(#1,#2,kk_context())";
  cs inline "(#1.Split(new String[]{#2}, StringSplitOptions.None))";
  js inline "((#1).split(#2))";
};
private extern splitv.1 : (s : std/core/types/string, sep : std/core/types/string, n : std/core/types/size_t) -> (std/core/types/vector :: V -> V)<std/core/types/string> {
  c inline "kk_string_splitv_atmost(#1,#2,#3,kk_context())";
  cs inline "#1.Split(new String[]{#2},#3, StringSplitOptions.None)";
  js inline "(#1).split(#2, #3)";
};
// Replace every occurrence of `pattern` to `repl` in a string.
public extern replace-all : (s : std/core/types/string, pattern : std/core/types/string, repl : std/core/types/string) -> std/core/types/string {
  c inline "kk_string_replace_all(#1,#2,#3,kk_context())";
  cs inline "(#1).Replace(#2,#3)";
  js inline "(#1).replace(new RegExp((#2).replace(/[\x5C\x5C\x5C$\x5C^*+\x5C-{}?().]/g,\x27\x5C\x5C$&\x27),\x27g\x27),#3)";
};
// Count occurences of `pattern` in a string.
public extern count : (s : std/core/types/string, pattern : std/core/types/string) -> std/core/types/int {
  c inline "kk_string_count_pattern(#1,#2,kk_context())";
  cs inline "Primitive.Count(#1,#2)";
  js inline "((#2) ? ((#1).match(new RegExp((#2).replace(/[\x5C\x5C\x5C$\x5C^*+\x5C-{}?().]/g,\x27\x5C\x5C$&\x27),\x27g\x27))||[]).length : 0)";
};
// Trim the starting white space of a string
public extern trim-left : (s : std/core/types/string) -> std/core/types/string {
  c inline "kk_string_trim_left(#1,kk_context())";
  cs inline "(#1).TrimStart()";
  js inline "((#1).replace(/^\x5Cs\x5Cs*/,\x27\x27))";
};
// Trim the ending white space of a string.
public extern trim-right : (s : std/core/types/string) -> std/core/types/string {
  c inline "kk_string_trim_right(#1,kk_context())";
  cs inline "(#1).TrimEnd()";
  js inline "((#1).replace(/\x5Cs+$/,\x27\x27))";
};
// Return the element at position `index`  in vector `v`  without bounds check!
private extern unsafe-idx : forall<a> (v : (std/core/types/vector :: V -> V)<a>, index : std/core/types/size_t) -> (total :: E) a {
  c inline "kk_vector_at(#1,#2)";
  cs inline "(#1)[#2]";
  js inline "(#1)[#2]";
};
private extern unsafe-assign : forall<a> (v : (std/core/types/vector :: V -> V)<a>, i : std/core/types/size_t, x : a) -> (total :: E) () {
  c inline "kk_vector_unsafe_assign(#1,#2,#3,kk_context())";
  cs inline "(#1)[#2] = #3";
  js inline "(#1)[#2] = #3";
};
private extern unsafe-vector : forall<a> (n : std/core/types/size_t) -> (total :: E) (std/core/types/vector :: V -> V)<a> {
  c inline "kk_vector_allocz(#1,kk_context())";
  cs inline "(new ##1[#1])";
  js inline "Array(#1)";
};
// Return the element at position `index`  in vector `v` . Raise an out of bounds exception if `index < 0`  or `index >= v.length` .
public extern ([]) : forall<a> (v : (std/core/types/vector :: V -> V)<a>, index : std/core/types/int) -> <(std/core/types/handled :: HX -> X)<(exn :: HX)>> a {
  c inline "kk_vector_at_int(#1,#2,kk_context())";
  cs inline "(#1)[Primitive.IntToInt32(#2)]";
  js inline "$std_core._vector_at(#1,#2)";
};
private extern lengthz : forall<a> (v : (std/core/types/vector :: V -> V)<a>) -> std/core/types/size_t {
  c inline "kk_vector_len(#1)";
  cs inline "((#1).Length)";
  js inline "((#1).length)";
};
// Create an empty vector.
public extern vector : forall<a> () -> (std/core/types/vector :: V -> V)<a> {
  c inline "kk_vector_empty()";
  cs inline "new ##1[0]";
  js inline "[]";
};
// _Unsafe_. This function removes the non-termination effect (`:div`) from the effect of an action
public extern unsafe-nostate : forall<a,(h :: H)> (action : () -> <(std/core/types/st :: H -> E)<(h :: H)>,(console :: X)> a) -> (() -> <(console :: X)> a) = inline "#1";
public extern inject-local : forall<a,(e :: E),(h :: H)> (action : () -> (e :: E) a) -> (total :: E) (() -> <(std/core/types/local :: H -> X)<(h :: H)>|(e :: E)> a) = inline "#1";
// Assign to an entry in a local `:vector` variable.
public extern ([].1) : forall<(h :: H),a,(e :: E)> (self : (std/core/types/local-var :: (H, V) -> V)<(h :: H),(std/core/types/vector :: V -> V)<a>>, index : std/core/types/int, assigned : a) -> <(std/core/types/local :: H -> X)<(h :: H)>,(std/core/types/handled :: HX -> X)<(exn :: HX)>|(e :: E)> () {
  c inline "kk_ref_vector_assign(#1,#2,#3,kk_context())";
  cs inline "(#1)[(int)#2] = #3";
  js inline "(#1)[#2] = #3";
};
// .open is used in the compiler to open up closed effects.
// Usually simplified away but still present if --no-simplify flag is given
public extern .open : forall<a,b> (x : a) -> (total :: E) b = inline "#1";
// Magic casting to the `:any` type.
public extern .toany : forall<a> (x : a) -> std/core/types/any {
  inline "#1";
  cs inline "(object)(#1)";
};
 
//------------------------------
//#kki: inline definitions
 
//.inline-section
fun is-exnError // inline size: 1
  = fn(exception-info: exception-info){
    match (exception-info) {
      ((std/core/ExnError() : exception-info ) as .pat: exception-info)
         -> std/core/types/True;
      (.pat0: exception-info)
         -> std/core/types/False;
    };
  };
fun is-exnAssert // inline size: 1
  = fn(exception-info: exception-info){
    match (exception-info) {
      ((std/core/ExnAssert() : exception-info ) as .pat: exception-info)
         -> std/core/types/True;
      (.pat0: exception-info)
         -> std/core/types/False;
    };
  };
fun is-exnTodo // inline size: 1
  = fn(exception-info: exception-info){
    match (exception-info) {
      ((std/core/ExnTodo() : exception-info ) as .pat: exception-info)
         -> std/core/types/True;
      (.pat0: exception-info)
         -> std/core/types/False;
    };
  };
fun is-exnRange // inline size: 1
  = fn(exception-info: exception-info){
    match (exception-info) {
      ((std/core/ExnRange() : exception-info ) as .pat: exception-info)
         -> std/core/types/True;
      (.pat0: exception-info)
         -> std/core/types/False;
    };
  };
fun is-exnPattern // inline size: 1
  = fn(exception-info: exception-info){
    match (exception-info) {
      ((std/core/ExnPattern((.pat0: std/core/types/string) : std/core/types/string, (.pat1: std/core/types/string) : std/core/types/string) : exception-info ) as .pat: exception-info)
         -> std/core/types/True;
      (.pat2: exception-info)
         -> std/core/types/False;
    };
  };
fun is-exnSystem // inline size: 1
  = fn(exception-info: exception-info){
    match (exception-info) {
      ((std/core/ExnSystem((.pat0: std/core/types/int) : std/core/types/int) : exception-info ) as .pat: exception-info)
         -> std/core/types/True;
      (.pat1: exception-info)
         -> std/core/types/False;
    };
  };
fun is-exnInternal // inline size: 1
  = fn(exception-info: exception-info){
    match (exception-info) {
      ((std/core/ExnInternal((.pat0: std/core/types/string) : std/core/types/string) : exception-info ) as .pat: exception-info)
         -> std/core/types/True;
      (.pat1: exception-info)
         -> std/core/types/False;
    };
  };
inline fun message // inline size: 0
  = fn(exception: exception){
    match (exception) {
      ((.skip std/core/Exception((.x: std/core/types/string) : std/core/types/string, (.pat0: exception-info) : exception-info) : exception ) as .pat: exception)
         -> .x;
    };
  };
inline fun info // inline size: 0
  = fn(exception: exception){
    match (exception) {
      ((.skip std/core/Exception((.pat0: std/core/types/string) : std/core/types/string, (.x: exception-info) : exception-info) : exception ) as .pat: exception)
         -> .x;
    };
  };
fun .copy // inline size: 3
  = fn(.this: exception, message: (std/core/types/optional :: V -> V)<std/core/types/string>, info: (std/core/types/optional :: V -> V)<exception-info>){
    std/core/Exception((match (message) {
        ((std/core/types/Optional((.message.1672: std/core/types/string) : std/core/types/string) : (std/core/types/optional :: V -> V)<std/core/types/string> ) as .pat: ((std/core/types/optional :: V -> V)<std/core/types/string>))
           -> .message.1672;
        ((.skip std/core/types/None() : (std/core/types/optional :: V -> V)<std/core/types/string> ) as .pat0: ((std/core/types/optional :: V -> V)<std/core/types/string>))
           -> (match (.this) {
            ((.skip std/core/Exception((.x: std/core/types/string) : std/core/types/string, (.pat00: exception-info) : exception-info) : exception ) as .pat1: exception)
               -> .x;
          });
      }), (match (info) {
        ((std/core/types/Optional((.info.1678: exception-info) : exception-info) : (std/core/types/optional :: V -> V)<exception-info> ) as .pat10: ((std/core/types/optional :: V -> V)<exception-info>))
           -> .info.1678;
        ((.skip std/core/types/None() : (std/core/types/optional :: V -> V)<exception-info> ) as .pat2: ((std/core/types/optional :: V -> V)<exception-info>))
           -> (match (.this) {
            ((.skip std/core/Exception((.pat01: std/core/types/string) : std/core/types/string, (.x0: exception-info) : exception-info) : exception ) as .pat3: exception)
               -> .x0;
          });
      }));
  };
inline fun dref // inline size: 0
  = forall<(e :: E),a> fn(delayed: (delayed :: (E, V) -> V)<(e :: E),a>){
    (match (delayed) {
      ((.skip std/core/Delay((.x: (std/core/types/ref :: (H, V) -> V)<(std/core/types/global :: H),(std/core/types/either :: (V, V) -> V)<() -> (e :: E) a,a>>) : (std/core/types/ref :: (H, V) -> V)<(std/core/types/global :: H),(std/core/types/either :: (V, V) -> V)<() -> (e :: E) a,a>>) : (delayed :: (E, V) -> V)<(e :: E),a> ) as .pat: ((delayed :: (E, V) -> V)<(e :: E),a>))
         -> .x;
    });
  };
fun .copy.1 // inline size: 6
  = forall<(e :: E),a> fn(.this: (delayed :: (E, V) -> V)<(e :: E),a>, dref: (std/core/types/optional :: V -> V)<(std/core/types/ref :: (H, V) -> V)<(std/core/types/global :: H),(std/core/types/either :: (V, V) -> V)<() -> (e :: E) a,a>>>){
    (match ((std/core/hnd/yielding())) {
      ((std/core/types/True() : std/core/types/bool ) as .pat: std/core/types/bool)
         -> std/core/hnd/yield-extend<(std/core/types/ref :: (H, V) -> V)<(std/core/types/global :: H),(std/core/types/either :: (V, V) -> V)<() -> (e :: E) a,a>>,(delayed :: (E, V) -> V)<(e :: E),a>,(std/core/types/(<>) :: E)>((fn(.c.0: (std/core/types/ref :: (H, V) -> V)<(std/core/types/global :: H),(std/core/types/either :: (V, V) -> V)<() -> (e :: E) a,a>>){
          (std/core/.mlift22848-op<(e :: E),a>(.c.0));
        }));
      ((.skip std/core/types/False() : std/core/types/bool ) as .pat0: std/core/types/bool)
         -> std/core/Delay<(e :: E),a>((match (dref) {
          ((std/core/types/Optional((.dref.1711: (std/core/types/ref :: (H, V) -> V)<(std/core/types/global :: H),(std/core/types/either :: (V, V) -> V)<() -> (e :: E) a,a>>) : (std/core/types/ref :: (H, V) -> V)<(std/core/types/global :: H),(std/core/types/either :: (V, V) -> V)<() -> (e :: E) a,a>>) : (std/core/types/optional :: V -> V)<(std/core/types/ref :: (H, V) -> V)<(std/core/types/global :: H),(std/core/types/either :: (V, V) -> V)<() -> (e :: E) a,a>>> ) as .pat1: ((std/core/types/optional :: V -> V)<(std/core/types/ref :: (H, V) -> V)<(std/core/types/global :: H),(std/core/types/either :: (V, V) -> V)<() -> (e :: E) a,a>>>))
             -> .dref.1711;
          ((.skip std/core/types/None() : (std/core/types/optional :: V -> V)<(std/core/types/ref :: (H, V) -> V)<(std/core/types/global :: H),(std/core/types/either :: (V, V) -> V)<() -> (e :: E) a,a>>> ) as .pat00: ((std/core/types/optional :: V -> V)<(std/core/types/ref :: (H, V) -> V)<(std/core/types/global :: H),(std/core/types/either :: (V, V) -> V)<() -> (e :: E) a,a>>>))
             -> (match (.this) {
              ((.skip std/core/Delay((.x: (std/core/types/ref :: (H, V) -> V)<(std/core/types/global :: H),(std/core/types/either :: (V, V) -> V)<() -> (e :: E) a,a>>) : (std/core/types/ref :: (H, V) -> V)<(std/core/types/global :: H),(std/core/types/either :: (V, V) -> V)<() -> (e :: E) a,a>>) : (delayed :: (E, V) -> V)<(e :: E),a> ) as .pat2: ((delayed :: (E, V) -> V)<(e :: E),a>))
                 -> .x;
            });
        }));
    });
  };
fun is-error // inline size: 1
  = forall<a> fn(error: (error :: V -> V)<a>){
    (match (error) {
      ((std/core/Error(((.skip std/core/Exception((.pat1: std/core/types/string) : std/core/types/string, (.pat2: exception-info) : exception-info) : exception ) as .pat0: exception) : exception) : (error :: V -> V)<a> ) as .pat: ((error :: V -> V)<a>))
         -> std/core/types/True;
      (.pat3: ((error :: V -> V)<a>))
         -> std/core/types/False;
    });
  };
fun is-ok // inline size: 1
  = forall<a> fn(error: (error :: V -> V)<a>){
    (match (error) {
      ((std/core/Ok((.pat0: a) : a) : (error :: V -> V)<a> ) as .pat: ((error :: V -> V)<a>))
         -> std/core/types/True;
      (.pat1: ((error :: V -> V)<a>))
         -> std/core/types/False;
    });
  };
fun is-nil // inline size: 1
  = forall<a> fn(list: (list :: V -> V)<a>){
    (match (list) {
      ((std/core/Nil() : (list :: V -> V)<a> ) as .pat: ((list :: V -> V)<a>))
         -> std/core/types/True;
      (.pat0: ((list :: V -> V)<a>))
         -> std/core/types/False;
    });
  };
fun is-cons // inline size: 1
  = forall<a> fn(list: (list :: V -> V)<a>){
    (match (list) {
      ((std/core/Cons((.pat0: a) : a, (.pat1: (list :: V -> V)<a>) : (list :: V -> V)<a>) : (list :: V -> V)<a> ) as .pat: ((list :: V -> V)<a>))
         -> std/core/types/True;
      ((.skip std/core/Nil() : (list :: V -> V)<a> ) as .pat2: ((list :: V -> V)<a>))
         -> std/core/types/False;
    });
  };
inline fun str // inline size: 0
  = fn(sslice: sslice){
    match (sslice) {
      ((.skip std/core/Sslice((.x: std/core/types/string) : std/core/types/string, (.pat0: std/core/types/size_t) : std/core/types/size_t, (.pat1: std/core/types/size_t) : std/core/types/size_t) : sslice ) as .pat: sslice)
         -> .x;
    };
  };
inline fun start // inline size: 0
  = fn(sslice: sslice){
    match (sslice) {
      ((.skip std/core/Sslice((.pat0: std/core/types/string) : std/core/types/string, (.x: std/core/types/size_t) : std/core/types/size_t, (.pat1: std/core/types/size_t) : std/core/types/size_t) : sslice ) as .pat: sslice)
         -> .x;
    };
  };
inline fun len // inline size: 0
  = fn(sslice: sslice){
    match (sslice) {
      ((.skip std/core/Sslice((.pat0: std/core/types/string) : std/core/types/string, (.pat1: std/core/types/size_t) : std/core/types/size_t, (.x: std/core/types/size_t) : std/core/types/size_t) : sslice ) as .pat: sslice)
         -> .x;
    };
  };
fun .copy.2 // inline size: 4
  = fn(.this: sslice, str: (std/core/types/optional :: V -> V)<std/core/types/string>, start: (std/core/types/optional :: V -> V)<std/core/types/size_t>, len: (std/core/types/optional :: V -> V)<std/core/types/size_t>){
    std/core/Sslice((match (str) {
        ((std/core/types/Optional((.str.1812: std/core/types/string) : std/core/types/string) : (std/core/types/optional :: V -> V)<std/core/types/string> ) as .pat: ((std/core/types/optional :: V -> V)<std/core/types/string>))
           -> .str.1812;
        ((.skip std/core/types/None() : (std/core/types/optional :: V -> V)<std/core/types/string> ) as .pat0: ((std/core/types/optional :: V -> V)<std/core/types/string>))
           -> (match (.this) {
            ((.skip std/core/Sslice((.x: std/core/types/string) : std/core/types/string, (.pat00: std/core/types/size_t) : std/core/types/size_t, (.pat10: std/core/types/size_t) : std/core/types/size_t) : sslice ) as .pat1: sslice)
               -> .x;
          });
      }), (match (start) {
        ((std/core/types/Optional((.start.1818: std/core/types/size_t) : std/core/types/size_t) : (std/core/types/optional :: V -> V)<std/core/types/size_t> ) as .pat11: ((std/core/types/optional :: V -> V)<std/core/types/size_t>))
           -> .start.1818;
        ((.skip std/core/types/None() : (std/core/types/optional :: V -> V)<std/core/types/size_t> ) as .pat2: ((std/core/types/optional :: V -> V)<std/core/types/size_t>))
           -> (match (.this) {
            ((.skip std/core/Sslice((.pat01: std/core/types/string) : std/core/types/string, (.x0: std/core/types/size_t) : std/core/types/size_t, (.pat12: std/core/types/size_t) : std/core/types/size_t) : sslice ) as .pat3: sslice)
               -> .x0;
          });
      }), (match (len) {
        ((std/core/types/Optional((.len.1824: std/core/types/size_t) : std/core/types/size_t) : (std/core/types/optional :: V -> V)<std/core/types/size_t> ) as .pat30: ((std/core/types/optional :: V -> V)<std/core/types/size_t>))
           -> .len.1824;
        ((.skip std/core/types/None() : (std/core/types/optional :: V -> V)<std/core/types/size_t> ) as .pat4: ((std/core/types/optional :: V -> V)<std/core/types/size_t>))
           -> (match (.this) {
            ((.skip std/core/Sslice((.pat02: std/core/types/string) : std/core/types/string, (.pat13: std/core/types/size_t) : std/core/types/size_t, (.x1: std/core/types/size_t) : std/core/types/size_t) : sslice ) as .pat5: sslice)
               -> .x1;
          });
      }));
  };
inline fun head // inline size: 0
  = forall<a> fn(stream: (stream :: V -> V)<a>){
    (match (stream) {
      ((.skip std/core/Next((.x: a) : a, (.pat0: (stream :: V -> V)<a>) : (stream :: V -> V)<a>) : (stream :: V -> V)<a> ) as .pat: ((stream :: V -> V)<a>))
         -> .x;
    });
  };
inline fun tail // inline size: 0
  = forall<a> fn(stream: (stream :: V -> V)<a>){
    (match (stream) {
      ((.skip std/core/Next((.pat0: a) : a, (.x: (stream :: V -> V)<a>) : (stream :: V -> V)<a>) : (stream :: V -> V)<a> ) as .pat: ((stream :: V -> V)<a>))
         -> .x;
    });
  };
fun .copy.3 // inline size: 3
  = forall<a> fn(.this: (stream :: V -> V)<a>, head: (std/core/types/optional :: V -> V)<a>, tail: (std/core/types/optional :: V -> V)<(stream :: V -> V)<a>>){
    std/core/Next<a>((match (head) {
        ((std/core/types/Optional((.head.1874: a) : a) : (std/core/types/optional :: V -> V)<a> ) as .pat: ((std/core/types/optional :: V -> V)<a>))
           -> .head.1874;
        ((.skip std/core/types/None() : (std/core/types/optional :: V -> V)<a> ) as .pat0: ((std/core/types/optional :: V -> V)<a>))
           -> (match (.this) {
            ((.skip std/core/Next((.x: a) : a, (.pat00: (stream :: V -> V)<a>) : (stream :: V -> V)<a>) : (stream :: V -> V)<a> ) as .pat1: ((stream :: V -> V)<a>))
               -> .x;
          });
      }), (match (tail) {
        ((std/core/types/Optional((.tail.1881: (stream :: V -> V)<a>) : (stream :: V -> V)<a>) : (std/core/types/optional :: V -> V)<(stream :: V -> V)<a>> ) as .pat10: ((std/core/types/optional :: V -> V)<(stream :: V -> V)<a>>))
           -> .tail.1881;
        ((.skip std/core/types/None() : (std/core/types/optional :: V -> V)<(stream :: V -> V)<a>> ) as .pat2: ((std/core/types/optional :: V -> V)<(stream :: V -> V)<a>>))
           -> (match (.this) {
            ((.skip std/core/Next((.pat01: a) : a, (.x0: (stream :: V -> V)<a>) : (stream :: V -> V)<a>) : (stream :: V -> V)<a> ) as .pat3: ((stream :: V -> V)<a>))
               -> .x0;
          });
      }));
  };
inline fun .select-throw-exn // inline size: 0
  = forall<a,(e :: E),b> fn(hnd: (.hnd-exn :: (E, V) -> V)<(e :: E),b>){
    (match (hnd) {
      ((.skip std/core/.Hnd-exn((except-throw-exn: (forall<c> (std/core/hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<exception,c,(.hnd-exn :: (E, V) -> V),(e :: E),b>)) : (forall<c> (std/core/hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<exception,c,(.hnd-exn :: (E, V) -> V),(e :: E),b>)) : (.hnd-exn :: (E, V) -> V)<(e :: E),b> ) as .pat: ((.hnd-exn :: (E, V) -> V)<(e :: E),b>))
         -> except-throw-exn<a>;
    });
  };
fun .new-sslice // inline size: 1
  = fn(str: std/core/types/string, start: std/core/types/size_t, len: std/core/types/size_t){
    std/core/Sslice(str, start, len);
  };
fun string.4 // inline size: 1
  = fn(ms: (std/core/types/maybe :: V -> V)<std/core/types/string>){
    match (ms) {
      ((std/core/types/Nothing() : (std/core/types/maybe :: V -> V)<std/core/types/string> ) as .pat: ((std/core/types/maybe :: V -> V)<std/core/types/string>))
         -> "";
      ((.skip std/core/types/Just((s: std/core/types/string) : std/core/types/string) : (std/core/types/maybe :: V -> V)<std/core/types/string> ) as .pat0: ((std/core/types/maybe :: V -> V)<std/core/types/string>))
         -> s;
    };
  };
fun apply // inline size: 1
  = forall<a,b,(e :: E)> fn<(e :: E)>(f: (a) -> (e :: E) b, x: a){
    f(x);
  };
fun unsafe-noexn // inline size: 1
  = forall<a,(e :: E)> fn<(e :: E)>(action: () -> <(std/core/types/handled :: HX -> X)<(exn :: HX)>|(e :: E)> a){
    std/core/types/unsafe-total<a,<(std/core/types/handled :: HX -> X)<(exn :: HX)>|(e :: E)>>(action);
  };
recursive fun .lift22726-concat // inline size: 1
  = forall<a> fn(ys: (list :: V -> V)<a>, zss: (list :: V -> V)<(list :: V -> V)<a>>){
    std/core/.ctail-lift22726-concat<a>(ys, zss, (std/core/types/CTailNil<(list :: V -> V)<a>>));
  };
fun concat // inline size: 1
  = forall<a> fn(xss: (list :: V -> V)<(list :: V -> V)<a>>){
    std/core/.lift22726-concat<a>((std/core/Nil<a>), xss);
  };
inline fun const // inline size: 0
  = forall<a,b> fn(x: a, y: b){
    x;
  };
inline fun const.1 // inline size: 0
  = forall<a,b> fn<(total :: E)>(default: a){
    fn(_l123-c7: b){
      default;
    };
  };
fun default // inline size: 1
  = forall<a> fn(m: (std/core/types/maybe :: V -> V)<a>, nothing: a){
    (match (m) {
      ((std/core/types/Nothing() : (std/core/types/maybe :: V -> V)<a> ) as .pat: ((std/core/types/maybe :: V -> V)<a>))
         -> nothing;
      ((.skip std/core/types/Just((x: a) : a) : (std/core/types/maybe :: V -> V)<a> ) as .pat0: ((std/core/types/maybe :: V -> V)<a>))
         -> x;
    });
  };
fun default.1 // inline size: 1
  = forall<a> fn(t: (error :: V -> V)<a>, def: a){
    (match (t) {
      ((std/core/Error(((.skip std/core/Exception((.pat1: std/core/types/string) : std/core/types/string, (.pat2: exception-info) : exception-info) : exception ) as .pat0: exception) : exception) : (error :: V -> V)<a> ) as .pat: ((error :: V -> V)<a>))
         -> def;
      ((.skip std/core/Ok((x: a) : a) : (error :: V -> V)<a> ) as .pat3: ((error :: V -> V)<a>))
         -> x;
    });
  };
fun either // inline size: 3
  = forall<a> fn(t: (error :: V -> V)<a>){
    (match (t) {
      ((std/core/Error(((.skip std/core/Exception((.pat0: std/core/types/string) : std/core/types/string, (.pat1: exception-info) : exception-info) : exception ) as exn: exception) : exception) : (error :: V -> V)<a> ) as .pat: ((error :: V -> V)<a>))
         -> std/core/types/Left<exception,a>(exn);
      ((.skip std/core/Ok((x: a) : a) : (error :: V -> V)<a> ) as .pat2: ((error :: V -> V)<a>))
         -> std/core/types/Right<exception,a>(x);
    });
  };
recursive fun .lift22727-flatmap // inline size: 4
  = forall<a,b,(e :: E)> fn<(e :: E)>(f: (a) -> (e :: E) (list :: V -> V)<b>, ys: (list :: V -> V)<b>, zs: (list :: V -> V)<a>){
    (match ((std/core/hnd/.evv-is-affine())) {
      ((std/core/types/True() : std/core/types/bool ) as .pat: std/core/types/bool)
         -> std/core/.ctail-lift22727-flatmap<a,b,(e :: E)>(f, ys, zs, (std/core/types/CTailNil<(list :: V -> V)<b>>));
      (.pat0: std/core/types/bool)
         -> std/core/.ctailm-lift22727-flatmap<a,b,(e :: E)>(f, ys, zs, (fn(.ctail.22792: (list :: V -> V)<b>){
            .ctail.22792;
          }));
    });
  };
fun flatmap // inline size: 1
  = forall<a,b,(e :: E)> fn<(e :: E)>(xs: (list :: V -> V)<a>, f: (a) -> (e :: E) (list :: V -> V)<b>){
    std/core/.lift22727-flatmap<a,b,(e :: E)>(f, (std/core/Nil<b>), xs);
  };
recursive fun .lift22728-reverse-append // inline size: 3
  = forall<a> fn(acc: (list :: V -> V)<a>, ys: (list :: V -> V)<a>){
    (match (ys) {
      ((std/core/Cons((x: a) : a, (xx: (list :: V -> V)<a>) : (list :: V -> V)<a>) : (list :: V -> V)<a> ) as .pat: ((list :: V -> V)<a>))
         -> std/core/.lift22728-reverse-append<a>((std/core/Cons<a>(x, acc)), xx);
      ((.skip std/core/Nil() : (list :: V -> V)<a> ) as .pat0: ((list :: V -> V)<a>))
         -> acc;
    });
  };
fun reverse-append // inline size: 1
  = forall<a> fn(xs: (list :: V -> V)<a>, tl: (list :: V -> V)<a>){
    std/core/.lift22728-reverse-append<a>(tl, xs);
  };
fun force // inline size: 8
  = forall<a,(e :: E)> fn<(e :: E)>(delayed: (delayed :: (E, V) -> V)<(e :: E),a>){
    (match ((std/core/types/(!.1)<(std/core/types/global :: H),(std/core/types/either :: (V, V) -> V)<() -> (e :: E) a,a>,<(std/core/types/div :: E),(std/core/types/alloc :: H -> X)<(std/core/types/global :: H)>,(std/core/types/write :: H -> X)<(std/core/types/global :: H)>|(e :: E)>>((match (delayed) {
      ((.skip std/core/Delay((.x: (std/core/types/ref :: (H, V) -> V)<(std/core/types/global :: H),(std/core/types/either :: (V, V) -> V)<() -> (e :: E) a,a>>) : (std/core/types/ref :: (H, V) -> V)<(std/core/types/global :: H),(std/core/types/either :: (V, V) -> V)<() -> (e :: E) a,a>>) : (delayed :: (E, V) -> V)<(e :: E),a> ) as .pat: ((delayed :: (E, V) -> V)<(e :: E),a>))
         -> .x;
    })))) {
      ((std/core/types/Right((x: a) : a) : (std/core/types/either :: (V, V) -> V)<() -> (e :: E) a,a> ) as .pat0: ((std/core/types/either :: (V, V) -> V)<() -> (e :: E) a,a>))
         -> x;
      ((.skip std/core/types/Left((action0: () -> (e :: E) a) : () -> (e :: E) a) : (std/core/types/either :: (V, V) -> V)<() -> (e :: E) a,a> ) as .pat00: ((std/core/types/either :: (V, V) -> V)<() -> (e :: E) a,a>))
         -> val x0.22946 : a
              = std/core/hnd/.mask-builtin<a,(e :: E),<(std/core/types/div :: X)|(e :: E)>>(action0);
            val next.22947 : (a) -> <(std/core/types/st :: H -> E)<(std/core/types/global :: H)>,(std/core/types/div :: X)|(e :: E)> a
              = fn<<(std/core/types/st :: H -> E)<(std/core/types/global :: H)>,(std/core/types/div :: X)|(e :: E)>>(x00: a){
                std/core/.mlift22851-force<a,(e :: E)>((match (delayed) {
                    ((.skip std/core/Delay((.x: (std/core/types/ref :: (H, V) -> V)<(std/core/types/global :: H),(std/core/types/either :: (V, V) -> V)<() -> (e :: E) a,a>>) : (std/core/types/ref :: (H, V) -> V)<(std/core/types/global :: H),(std/core/types/either :: (V, V) -> V)<() -> (e :: E) a,a>>) : (delayed :: (E, V) -> V)<(e :: E),a> ) as .pat: ((delayed :: (E, V) -> V)<(e :: E),a>))
                       -> .x;
                  }), x00);
              };
        (match ((std/core/hnd/yielding())) {
          ((std/core/types/True() : std/core/types/bool ) as .pat1: std/core/types/bool)
             -> std/core/hnd/yield-extend<a,a,<(std/core/types/st :: H -> E)<(std/core/types/global :: H)>,(std/core/types/div :: X)|(e :: E)>>(next.22947);
          ((.skip std/core/types/False() : std/core/types/bool ) as .pat01: std/core/types/bool)
             -> next.22947(x0.22946);
        });
    });
  };
inline fun ignore // inline size: 0
  = forall<a> fn(x: a){
    std/core/types/();
  };
recursive fun .lift22729-intersperse // inline size: 1
  = forall<a> fn(ys: (list :: V -> V)<a>, s: a){
    std/core/.ctail-lift22729-intersperse<a>(ys, s, (std/core/types/CTailNil<(list :: V -> V)<a>>));
  };
fun intersperse // inline size: 3
  = forall<a> fn(xs: (list :: V -> V)<a>, sep: a){
    (match (xs) {
      ((std/core/Cons((x: a) : a, (xx: (list :: V -> V)<a>) : (list :: V -> V)<a>) : (list :: V -> V)<a> ) as .pat: ((list :: V -> V)<a>))
         -> std/core/Cons<a>(x, (std/core/.lift22729-intersperse<a>(xx, sep)));
      ((.skip std/core/Nil() : (list :: V -> V)<a> ) as .pat0: ((list :: V -> V)<a>))
         -> std/core/Nil<a>;
    });
  };
fun is-even // inline size: 2
  = fn(i: std/core/types/int){
    std/core/types/(!)((std/core/is-odd(i)));
  };
recursive fun .ctailm-lift22730-map-peek // inline size: 10
  = forall<a,b,(e :: E)> fn<(e :: E)>(f: (value : a, rest : (list :: V -> V)<a>) -> (e :: E) b, ys: (list :: V -> V)<a>, .accm: ((list :: V -> V)<b>) -> (list :: V -> V)<b>){
    (match (ys) {
      ((std/core/Cons((y: a) : a, (yy: (list :: V -> V)<a>) : (list :: V -> V)<a>) : (list :: V -> V)<a> ) as .pat: ((list :: V -> V)<a>))
         -> val x.22965 : b
                  = f(y, yy);
        (match ((std/core/hnd/yielding())) {
          ((std/core/types/True() : std/core/types/bool ) as .pat0: std/core/types/bool)
             -> std/core/hnd/yield-extend<b,(list :: V -> V)<b>,(e :: E)>((fn<(e :: E)>(.ctail.22801: b){
              (std/core/.mlift22853-op<a,b,(e :: E)>(.accm, f, yy, .ctail.22801));
            }));
          ((.skip std/core/types/False() : std/core/types/bool ) as .pat00: std/core/types/bool)
             -> std/core/.ctailm-lift22730-map-peek<a,b,(e :: E)>(f, yy, (fn(.ctail.22800: (list :: V -> V)<b>){
                (.accm((std/core/Cons<b>(x.22965, .ctail.22800))));
              }));
        });
      ((.skip std/core/Nil() : (list :: V -> V)<a> ) as .pat01: ((list :: V -> V)<a>))
         -> .accm((std/core/Nil<b>));
    });
  };
recursive fun .lift22730-map-peek // inline size: 4
  = forall<a,b,(e :: E)> fn<(e :: E)>(f: (value : a, rest : (list :: V -> V)<a>) -> (e :: E) b, ys: (list :: V -> V)<a>){
    (match ((std/core/hnd/.evv-is-affine())) {
      ((std/core/types/True() : std/core/types/bool ) as .pat: std/core/types/bool)
         -> std/core/.ctail-lift22730-map-peek<a,b,(e :: E)>(f, ys, (std/core/types/CTailNil<(list :: V -> V)<b>>));
      (.pat0: std/core/types/bool)
         -> std/core/.ctailm-lift22730-map-peek<a,b,(e :: E)>(f, ys, (fn(.ctail.22799: (list :: V -> V)<b>){
            .ctail.22799;
          }));
    });
  };
fun map-peek // inline size: 1
  = forall<a,b,(e :: E)> fn<(e :: E)>(xs: (list :: V -> V)<a>, f: (value : a, rest : (list :: V -> V)<a>) -> (e :: E) b){
    std/core/.lift22730-map-peek<a,b,(e :: E)>(f, xs);
  };
inline val maxListStack // inline size: 0
  = 50;
fun mbint // inline size: 1
  = fn(m: (std/core/types/maybe :: V -> V)<std/core/types/int>){
    match (m) {
      ((std/core/types/Nothing() : (std/core/types/maybe :: V -> V)<std/core/types/int> ) as .pat: ((std/core/types/maybe :: V -> V)<std/core/types/int>))
         -> 0;
      ((.skip std/core/types/Just((i: std/core/types/int) : std/core/types/int) : (std/core/types/maybe :: V -> V)<std/core/types/int> ) as .pat0: ((std/core/types/maybe :: V -> V)<std/core/types/int>))
         -> i;
    };
  };
fun negate // inline size: 1
  = fn(i: std/core/types/int){
    std/core/(~)(i);
  };
inline val trace-enabled // inline size: 0
  = std/core/types/ref<(std/core/types/global :: H),std/core/types/bool>(std/core/types/True);
fun o // inline size: 5
  = forall<a,b,c,(e :: E)> fn(f: (a) -> (e :: E) b, g: (c) -> (e :: E) a){
    fn<(e :: E)>(x: c){
      val x0.22970 : a
            = g(x);
      (match ((std/core/hnd/yielding())) {
        ((std/core/types/True() : std/core/types/bool ) as .pat: std/core/types/bool)
           -> std/core/hnd/yield-extend<a,b,(e :: E)>(f);
        ((.skip std/core/types/False() : std/core/types/bool ) as .pat0: std/core/types/bool)
           -> f(x0.22970);
      });
    };
  };
fun on-exit // inline size: 1
  = forall<a,(e :: E)> fn<(e :: E)>(hndler: () -> (e :: E) (), action: () -> (e :: E) a){
    std/core/hnd/finally<a,(e :: E)>(hndler, action);
  };
fun once // inline size: 6
  = forall<a> fn(calc: () -> a){
    val r : (std/core/types/ref :: (H, V) -> V)<(_h :: H),(std/core/types/maybe :: V -> V)<a>>
          = std/core/types/ref<(_h :: H),(std/core/types/maybe :: V -> V)<a>>((std/core/types/Nothing<a>));
    fn(){
      (match ((std/core/types/(!.1)<(_h :: H),(std/core/types/maybe :: V -> V)<a>,<(std/core/types/write :: H -> X)<(_h :: H)>,(std/core/types/div :: E)|(_e :: E)>>(r))) {
        ((std/core/types/Just((x: a) : a) : (std/core/types/maybe :: V -> V)<a> ) as .pat: ((std/core/types/maybe :: V -> V)<a>))
           -> x;
        ((.skip std/core/types/Nothing() : (std/core/types/maybe :: V -> V)<a> ) as .pat0: ((std/core/types/maybe :: V -> V)<a>))
           -> val x0 : a
                = calc();
              val _ : ()
                = std/core/types/set<(_h :: H),(std/core/types/maybe :: V -> V)<a>>(r, (std/core/types/Just<a>(x0)));
          x0;
      });
    };
  };
fun single // inline size: 1
  = forall<a> fn(x: a){
    std/core/Cons<a>(x, (std/core/Nil<a>));
  };
fun unsafe-nodiv // inline size: 1
  = forall<a,(e :: E)> fn<(e :: E)>(action: () -> <(std/core/types/div :: X)|(e :: E)> a){
    std/core/types/unsafe-total<a,<(std/core/types/div :: X)|(e :: E)>>(action);
  };
fun (-.4) // inline size: 4
  = fn<(total :: E)>(c: std/core/types/char, d: std/core/types/char){
    std/core/char((std/core/(-)((std/core/int(c)), (std/core/int(d)))));
  };
fun int.4 // inline size: 1
  = fn(b: std/core/types/bool){
    match (b) {
      ((std/core/types/True() : std/core/types/bool ) as .pat: std/core/types/bool)
         -> 1;
      ((.skip std/core/types/False() : std/core/types/bool ) as .pat0: std/core/types/bool)
         -> 0;
    };
  };
fun int.5 // inline size: 3
  = fn(x: std/core/types/order){
    match (x) {
      ((std/core/types/Lt() : std/core/types/order ) as .pat: std/core/types/order)
         -> std/core/(-)(0, 1);
      ((std/core/types/Eq() : std/core/types/order ) as .pat0: std/core/types/order)
         -> 0;
      ((.skip std/core/types/Gt() : std/core/types/order ) as .pat1: std/core/types/order)
         -> 1;
    };
  };
fun (!=.4) // inline size: 3
  = fn(x: std/core/types/order, y: std/core/types/order){
    std/core/(!=.1)((std/core/int.5(x)), (std/core/int.5(y)));
  };
fun (!=.5) // inline size: 2
  = fn(x: std/core/types/bool, y: std/core/types/bool){
    match (x) {
      ((std/core/types/True() : std/core/types/bool ) as .pat: std/core/types/bool)
         -> std/core/types/(!)(y);
      ((.skip std/core/types/False() : std/core/types/bool ) as .pat0: std/core/types/bool)
         -> y;
    };
  };
recursive fun .ctail-append // inline size: 10
  = forall<a> fn(xs: (list :: V -> V)<a>, ys: (list :: V -> V)<a>, .acc: (std/core/types/ctail :: V -> V)<(list :: V -> V)<a>>){
    (match (xs) {
      ((std/core/Cons((x: a) : a, (xx: (list :: V -> V)<a>) : (list :: V -> V)<a>) : (list :: V -> V)<a> ) as .pat: ((list :: V -> V)<a>))
         -> val .ctail.22802 : (list :: V -> V)<a>
              = std/core/types/.cfield-hole<(list :: V -> V)<a>>();
            val .ctail.22803 : (list :: V -> V)<a>
              = std/core/Cons<a>(x, .ctail.22802);
        std/core/.ctail-append<a>(xx, ys, val field.22977 : ((std/core/types/cfield :: V -> V)<(list :: V -> V)<a>>)
                                                = (std/core/types/.cfield-of<(list :: V -> V)<a>>(.ctail.22803, "(\x22std/core\x22,\x22Cons\x22)", "(\x22\x22,\x22tail\x22)"));
          (match (.acc) {
            ((std/core/types/CTail((head: (list :: V -> V)<a>) : (list :: V -> V)<a>, (last: (std/core/types/cfield :: V -> V)<(list :: V -> V)<a>>) : (std/core/types/cfield :: V -> V)<(list :: V -> V)<a>>) : (std/core/types/ctail :: V -> V)<(list :: V -> V)<a>> ) as .pat0: ((std/core/types/ctail :: V -> V)<(list :: V -> V)<a>>))
               -> val _ : ()
                        = std/core/types/cfield-set<(list :: V -> V)<a>>(last, .ctail.22803);
              std/core/types/CTail<(list :: V -> V)<a>>(head, field.22977);
            ((.skip std/core/types/CTailNil() : (std/core/types/ctail :: V -> V)<(list :: V -> V)<a>> ) as .pat00: ((std/core/types/ctail :: V -> V)<(list :: V -> V)<a>>))
               -> std/core/types/CTail<(list :: V -> V)<a>>(.ctail.22803, field.22977);
          }));
      ((.skip std/core/Nil() : (list :: V -> V)<a> ) as .pat01: ((list :: V -> V)<a>))
         -> std/core/types/.ctail-resolve<(list :: V -> V)<a>>(.acc, ys);
    });
  };
recursive fun append // inline size: 1
  = forall<a> fn(xs: (list :: V -> V)<a>, ys: (list :: V -> V)<a>){
    std/core/.ctail-append<a>(xs, ys, (std/core/types/CTailNil<(list :: V -> V)<a>>));
  };
fun (+.4) // inline size: 1
  = forall<a> fn(xs: (list :: V -> V)<a>, ys: (list :: V -> V)<a>){
    std/core/append<a>(xs, ys);
  };
fun (+.5) // inline size: 4
  = fn<(total :: E)>(c: std/core/types/char, d: std/core/types/char){
    std/core/char((std/core/(+)((std/core/int(c)), (std/core/int(d)))));
  };
fun (==.4) // inline size: 3
  = fn(x: std/core/types/order, y: std/core/types/order){
    std/core/(==.1)((std/core/int.5(x)), (std/core/int.5(y)));
  };
fun (==.5) // inline size: 2
  = fn(x: std/core/types/bool, y: std/core/types/bool){
    match (x) {
      ((std/core/types/True() : std/core/types/bool ) as .pat: std/core/types/bool)
         -> y;
      ((.skip std/core/types/False() : std/core/types/bool ) as .pat0: std/core/types/bool)
         -> std/core/types/(!)(y);
    };
  };
fun (<.5) // inline size: 3
  = fn(x: std/core/types/order, y: std/core/types/order){
    std/core/(<.1)((std/core/int.5(x)), (std/core/int.5(y)));
  };
fun (<.6) // inline size: 2
  = fn(x: std/core/types/bool, y: std/core/types/bool){
    match ((std/core/types/(!)(x))) {
      ((std/core/types/True() : std/core/types/bool ) as .pat: std/core/types/bool)
         -> y;
      (.pat0: std/core/types/bool)
         -> std/core/types/False;
    };
  };
fun order // inline size: 4
  = fn(i: std/core/types/int){
    match ((std/core/(<.1)(i, 0))) {
      ((std/core/types/True() : std/core/types/bool ) as .pat: std/core/types/bool)
         -> std/core/types/Lt;
      ((.skip std/core/types/False() : std/core/types/bool ) as .pat0: std/core/types/bool)
         -> (match ((std/core/(>.1)(i, 0))) {
          ((std/core/types/True() : std/core/types/bool ) as .pat1: std/core/types/bool)
             -> std/core/types/Gt;
          ((.skip std/core/types/False() : std/core/types/bool ) as .pat2: std/core/types/bool)
             -> std/core/types/Eq;
        });
    };
  };
fun compare.4 // inline size: 5
  = fn(x: std/core/types/string, y: std/core/types/string){
    val i.22978 : std/core/types/int
          = std/core/string-compare(x, y);
    match ((std/core/(<.1)(i.22978, 0))) {
      ((std/core/types/True() : std/core/types/bool ) as .pat: std/core/types/bool)
         -> std/core/types/Lt;
      ((.skip std/core/types/False() : std/core/types/bool ) as .pat0: std/core/types/bool)
         -> (match ((std/core/(>.1)(i.22978, 0))) {
          ((std/core/types/True() : std/core/types/bool ) as .pat1: std/core/types/bool)
             -> std/core/types/Gt;
          ((.skip std/core/types/False() : std/core/types/bool ) as .pat2: std/core/types/bool)
             -> std/core/types/Eq;
        });
    };
  };
fun (<.7) // inline size: 6
  = fn(x: std/core/types/string, y: std/core/types/string){
    val x0.22979 : std/core/types/order
          = std/core/compare.4(x, y);
    std/core/(==.1)((std/core/int.5(x0.22979)), (match (std/core/types/Lt) {
        ((std/core/types/Lt() : std/core/types/order ) as .pat: std/core/types/order)
           -> std/core/(-)(0, 1);
        ((std/core/types/Eq() : std/core/types/order ) as .pat0: std/core/types/order)
           -> 0;
        ((.skip std/core/types/Gt() : std/core/types/order ) as .pat1: std/core/types/order)
           -> 1;
      }));
  };
fun (>.3) // inline size: 3
  = fn(x: std/core/types/order, y: std/core/types/order){
    std/core/(>.1)((std/core/int.5(x)), (std/core/int.5(y)));
  };
fun (>.4) // inline size: 2
  = fn(x: std/core/types/bool, y: std/core/types/bool){
    match (x) {
      ((std/core/types/True() : std/core/types/bool ) as .pat: std/core/types/bool)
         -> std/core/types/(!)(y);
      (.pat0: std/core/types/bool)
         -> std/core/types/False;
    };
  };
fun (>.5) // inline size: 6
  = fn(x: std/core/types/string, y: std/core/types/string){
    val x0.22981 : std/core/types/order
          = std/core/compare.4(x, y);
    std/core/(==.1)((std/core/int.5(x0.22981)), (match (std/core/types/Gt) {
        ((std/core/types/Lt() : std/core/types/order ) as .pat: std/core/types/order)
           -> std/core/(-)(0, 1);
        ((std/core/types/Eq() : std/core/types/order ) as .pat0: std/core/types/order)
           -> 0;
        ((.skip std/core/types/Gt() : std/core/types/order ) as .pat1: std/core/types/order)
           -> 1;
      }));
  };
fun compare.1 // inline size: 4
  = fn(x: std/core/types/char, y: std/core/types/char){
    match ((std/core/(<)(x, y))) {
      ((std/core/types/True() : std/core/types/bool ) as .pat: std/core/types/bool)
         -> std/core/types/Lt;
      ((.skip std/core/types/False() : std/core/types/bool ) as .pat0: std/core/types/bool)
         -> (match ((std/core/(>)(x, y))) {
          ((std/core/types/True() : std/core/types/bool ) as .pat1: std/core/types/bool)
             -> std/core/types/Gt;
          ((.skip std/core/types/False() : std/core/types/bool ) as .pat2: std/core/types/bool)
             -> std/core/types/Eq;
        });
    };
  };
fun compare.2 // inline size: 4
  = fn(x: std/core/types/bool, y: std/core/types/bool){
    match ((std/core/(<.6)(x, y))) {
      ((std/core/types/True() : std/core/types/bool ) as .pat: std/core/types/bool)
         -> std/core/types/Lt;
      ((.skip std/core/types/False() : std/core/types/bool ) as .pat0: std/core/types/bool)
         -> (match ((std/core/(>.4)(x, y))) {
          ((std/core/types/True() : std/core/types/bool ) as .pat1: std/core/types/bool)
             -> std/core/types/Gt;
          ((.skip std/core/types/False() : std/core/types/bool ) as .pat2: std/core/types/bool)
             -> std/core/types/Eq;
        });
    };
  };
fun compare.3 // inline size: 4
  = fn(x: std/core/types/double, y: std/core/types/double){
    match ((std/core/(<.4)(x, y))) {
      ((std/core/types/True() : std/core/types/bool ) as .pat: std/core/types/bool)
         -> std/core/types/Lt;
      ((.skip std/core/types/False() : std/core/types/bool ) as .pat0: std/core/types/bool)
         -> (match ((std/core/(>.2)(x, y))) {
          ((std/core/types/True() : std/core/types/bool ) as .pat1: std/core/types/bool)
             -> std/core/types/Gt;
          ((.skip std/core/types/False() : std/core/types/bool ) as .pat2: std/core/types/bool)
             -> std/core/types/Eq;
        });
    };
  };
fun (>=.3) // inline size: 3
  = fn(x: std/core/types/order, y: std/core/types/order){
    std/core/(>=.1)((std/core/int.5(x)), (std/core/int.5(y)));
  };
fun (>=.4) // inline size: 2
  = fn(x: std/core/types/bool, y: std/core/types/bool){
    std/core/types/(!)((std/core/(<.6)(x, y)));
  };
fun (>=.5) // inline size: 6
  = fn(x: std/core/types/string, y: std/core/types/string){
    val x0.22983 : std/core/types/order
          = std/core/compare.4(x, y);
    std/core/(>.1)((std/core/int.5(x0.22983)), (match (std/core/types/Lt) {
        ((std/core/types/Lt() : std/core/types/order ) as .pat: std/core/types/order)
           -> std/core/(-)(0, 1);
        ((std/core/types/Eq() : std/core/types/order ) as .pat0: std/core/types/order)
           -> 0;
        ((.skip std/core/types/Gt() : std/core/types/order ) as .pat1: std/core/types/order)
           -> 1;
      }));
  };
recursive fun .lift22731-joinsep // inline size: 4
  = fn(sep: std/core/types/string, ys: (list :: V -> V)<std/core/types/string>, acc: std/core/types/string){
    match (ys) {
      ((std/core/Cons((y: std/core/types/string) : std/core/types/string, (yy: (list :: V -> V)<std/core/types/string>) : (list :: V -> V)<std/core/types/string>) : (list :: V -> V)<std/core/types/string> ) as .pat: ((list :: V -> V)<std/core/types/string>))
         -> val acc0.22753 : std/core/types/string
                  = std/core/(+.6)((std/core/(+.6)(acc, sep)), y);
        std/core/.lift22731-joinsep(sep, yy, acc0.22753);
      ((.skip std/core/Nil() : (list :: V -> V)<std/core/types/string> ) as .pat0: ((list :: V -> V)<std/core/types/string>))
         -> acc;
    };
  };
fun joinsep // inline size: 2
  = fn(xs: (list :: V -> V)<std/core/types/string>, sep: std/core/types/string){
    match (xs) {
      ((std/core/Nil() : (list :: V -> V)<std/core/types/string> ) as .pat: ((list :: V -> V)<std/core/types/string>))
         -> "";
      ((.skip std/core/Cons((x: std/core/types/string) : std/core/types/string, (xx: (list :: V -> V)<std/core/types/string>) : (list :: V -> V)<std/core/types/string>) : (list :: V -> V)<std/core/types/string> ) as .pat0: ((list :: V -> V)<std/core/types/string>))
         -> std/core/.lift22731-joinsep(sep, xx, x);
    };
  };
fun join.2 // inline size: 2
  = fn(xs: (list :: V -> V)<std/core/types/string>){
    match (xs) {
      ((std/core/Nil() : (list :: V -> V)<std/core/types/string> ) as .pat: ((list :: V -> V)<std/core/types/string>))
         -> "";
      ((.skip std/core/Cons((x: std/core/types/string) : std/core/types/string, (xx: (list :: V -> V)<std/core/types/string>) : (list :: V -> V)<std/core/types/string>) : (list :: V -> V)<std/core/types/string> ) as .pat0: ((list :: V -> V)<std/core/types/string>))
         -> std/core/.lift22731-joinsep("", xx, x);
    };
  };
fun join.3 // inline size: 1
  = fn(xs: (list :: V -> V)<std/core/types/string>, sep: std/core/types/string){
    std/core/joinsep(xs, sep);
  };
fun decr // inline size: 2
  = fn(i: std/core/types/int32){
    std/core/(-.1)(i, (std/core/int32(1)));
  };
fun (<=.5) // inline size: 3
  = fn(x: std/core/types/order, y: std/core/types/order){
    std/core/(<=.1)((std/core/int.5(x)), (std/core/int.5(y)));
  };
fun (<=.6) // inline size: 2
  = fn(x: std/core/types/bool, y: std/core/types/bool){
    std/core/types/(!)((std/core/(>.4)(x, y)));
  };
fun (<=.7) // inline size: 6
  = fn(x: std/core/types/string, y: std/core/types/string){
    val x0.22987 : std/core/types/order
          = std/core/compare.4(x, y);
    std/core/(<.1)((std/core/int.5(x0.22987)), (match (std/core/types/Gt) {
        ((std/core/types/Lt() : std/core/types/order ) as .pat: std/core/types/order)
           -> std/core/(-)(0, 1);
        ((std/core/types/Eq() : std/core/types/order ) as .pat0: std/core/types/order)
           -> 0;
        ((.skip std/core/types/Gt() : std/core/types/order ) as .pat1: std/core/types/order)
           -> 1;
      }));
  };
fun incr // inline size: 2
  = fn(i: std/core/types/int32){
    std/core/(+.1)(i, (std/core/int32(1)));
  };
recursive fun .lift22732-forz // inline size: 9
  = forall<(e :: E)> fn<(e :: E)>(action: (std/core/types/size_t) -> (e :: E) (), end: std/core/types/size_t, i: std/core/types/size_t){
    (match ((std/core/(<=.3)(i, end))) {
      ((std/core/types/True() : std/core/types/bool ) as .pat: std/core/types/bool)
         -> val x.22989 : ()
                  = action(i);
        (match ((std/core/hnd/yielding())) {
          ((std/core/types/True() : std/core/types/bool ) as .pat0: std/core/types/bool)
             -> std/core/hnd/yield-extend<(),(),(e :: E)>((fn<(e :: E)>(wild_: ()){
              (std/core/.mlift22854-op<(e :: E)>(action, end, i, wild_));
            }));
          ((.skip std/core/types/False() : std/core/types/bool ) as .pat00: std/core/types/bool)
             -> val i0.22754 : std/core/types/size_t
                      = std/core/incr.1(i);
            std/core/.lift22732-forz<(e :: E)>(action, end, i0.22754);
        });
      ((.skip std/core/types/False() : std/core/types/bool ) as .pat01: std/core/types/bool)
         -> std/core/types/();
    });
  };
fun forz // inline size: 1
  = forall<(e :: E)> fn<(e :: E)>(start: std/core/types/size_t, end: std/core/types/size_t, action: (std/core/types/size_t) -> (e :: E) ()){
    std/core/.lift22732-forz<(e :: E)>(action, end, start);
  };
fun foreach-indexedz // inline size: 6
  = forall<a,(e :: E)> fn<(e :: E)>(v: (std/core/types/vector :: V -> V)<a>, f: (a, std/core/types/size_t) -> (e :: E) ()){
    val start.22993 : std/core/types/size_t
      = std/core/size_t(0);
    val end.22994 : std/core/types/size_t
      = std/core/decr.1((std/core/lengthz<a>(v)));
    std/core/.lift22732-forz<(e :: E)>((fn<(e :: E)>(i: std/core/types/size_t){
        (f((std/core/unsafe-idx<a>(v, i)), i));
      }), end.22994, start.22993);
  };
recursive fun .lift22733-length.1 // inline size: 3
  = forall<a> fn(ys: (list :: V -> V)<a>, acc: std/core/types/int){
    (match (ys) {
      ((std/core/Cons((.pat0: a) : a, (yy: (list :: V -> V)<a>) : (list :: V -> V)<a>) : (list :: V -> V)<a> ) as .pat: ((list :: V -> V)<a>))
         -> std/core/.lift22733-length.1<a>(yy, (std/core/(+)(acc, 1)));
      ((.skip std/core/Nil() : (list :: V -> V)<a> ) as .pat1: ((list :: V -> V)<a>))
         -> acc;
    });
  };
fun length.1 // inline size: 1
  = forall<a> fn(xs: (list :: V -> V)<a>){
    std/core/.lift22733-length.1<a>(xs, 0);
  };
fun length.2 // inline size: 2
  = forall<a> fn(v: (std/core/types/vector :: V -> V)<a>){
    std/core/int.2((std/core/lengthz<a>(v)));
  };
recursive fun .lift22734-list // inline size: 5
  = fn(low: std/core/types/int, high: std/core/types/int, acc: (list :: V -> V)<std/core/types/int>){
    match ((std/core/(>.1)(low, high))) {
      ((std/core/types/True() : std/core/types/bool ) as .pat: std/core/types/bool)
         -> acc;
      ((.skip std/core/types/False() : std/core/types/bool ) as .pat0: std/core/types/bool)
         -> std/core/.lift22734-list(low, (std/core/(-)(high, 1)), (std/core/Cons<std/core/types/int>(high, acc)));
    };
  };
fun list // inline size: 1
  = fn<(total :: E)>(lo: std/core/types/int, hi: std/core/types/int){
    std/core/.lift22734-list(lo, hi, (std/core/Nil<std/core/types/int>));
  };
recursive fun .lift22735-list.1 // inline size: 10
  = forall<a,(e :: E)> fn<(e :: E)>(f: (std/core/types/int) -> (e :: E) a, low: std/core/types/int, high: std/core/types/int, acc: (list :: V -> V)<a>){
    (match ((std/core/(>.1)(low, high))) {
      ((std/core/types/True() : std/core/types/bool ) as .pat: std/core/types/bool)
         -> acc;
      ((.skip std/core/types/False() : std/core/types/bool ) as .pat0: std/core/types/bool)
         -> val high0.22757 : std/core/types/int
              = std/core/(-)(high, 1);
            val x.22996 : a
              = f(high);
        (match ((std/core/hnd/yielding())) {
          ((std/core/types/True() : std/core/types/bool ) as .pat1: std/core/types/bool)
             -> std/core/hnd/yield-extend<a,(list :: V -> V)<a>,(e :: E)>((fn<(e :: E)>(.y.46: a){
              (std/core/.mlift22855-op<a,(e :: E)>(acc, f, high0.22757, low, .y.46));
            }));
          ((.skip std/core/types/False() : std/core/types/bool ) as .pat00: std/core/types/bool)
             -> val acc0.22758 : (list :: V -> V)<a>
                      = std/core/Cons<a>(x.22996, acc);
            std/core/.lift22735-list.1<a,(e :: E)>(f, low, high0.22757, acc0.22758);
        });
    });
  };
fun list.1 // inline size: 1
  = forall<a,(e :: E)> fn<(e :: E)>(lo: std/core/types/int, hi: std/core/types/int, f: (std/core/types/int) -> (e :: E) a){
    std/core/.lift22735-list.1<a,(e :: E)>(f, lo, hi, (std/core/Nil<a>));
  };
recursive fun .ctailm-map.5 // inline size: 10
  = forall<a,b,(e :: E)> fn<(e :: E)>(xs: (list :: V -> V)<a>, f: (a) -> (e :: E) b, .accm: ((list :: V -> V)<b>) -> (list :: V -> V)<b>){
    (match (xs) {
      ((std/core/Cons((x: a) : a, (xx: (list :: V -> V)<a>) : (list :: V -> V)<a>) : (list :: V -> V)<a> ) as .pat: ((list :: V -> V)<a>))
         -> val x0.23012 : b
                  = f(x);
        (match ((std/core/hnd/yielding())) {
          ((std/core/types/True() : std/core/types/bool ) as .pat0: std/core/types/bool)
             -> std/core/hnd/yield-extend<b,(list :: V -> V)<b>,(e :: E)>((fn<(e :: E)>(.ctail.22809: b){
              (std/core/.mlift22857-op<a,b,(e :: E)>(.accm, f, xx, .ctail.22809));
            }));
          ((.skip std/core/types/False() : std/core/types/bool ) as .pat00: std/core/types/bool)
             -> std/core/.ctailm-map.5<a,b,(e :: E)>(xx, f, (fn(.ctail.22808: (list :: V -> V)<b>){
                (.accm((std/core/Cons<b>(x0.23012, .ctail.22808))));
              }));
        });
      ((.skip std/core/Nil() : (list :: V -> V)<a> ) as .pat01: ((list :: V -> V)<a>))
         -> .accm((std/core/Nil<b>));
    });
  };
recursive fun map.5 // inline size: 4
  = forall<a,b,(e :: E)> fn<(e :: E)>(xs: (list :: V -> V)<a>, f: (a) -> (e :: E) b){
    (match ((std/core/hnd/.evv-is-affine())) {
      ((std/core/types/True() : std/core/types/bool ) as .pat: std/core/types/bool)
         -> std/core/.ctail-map.5<a,b,(e :: E)>(xs, f, (std/core/types/CTailNil<(list :: V -> V)<b>>));
      (.pat0: std/core/types/bool)
         -> std/core/.ctailm-map.5<a,b,(e :: E)>(xs, f, (fn(.ctail.22807: (list :: V -> V)<b>){
            .ctail.22807;
          }));
    });
  };
fun list.2 // inline size: 4
  = fn<(total :: E)>(lo: std/core/types/char, hi: std/core/types/char){
    std/core/map.5<std/core/types/int,std/core/types/char,(total :: E)>(val lo0.23016 : std/core/types/int
                                                                          = (std/core/int(lo));
                                                                        val hi0.23017 : std/core/types/int
                                                                          = (std/core/int(hi));
      (std/core/.lift22734-list(lo0.23016, hi0.23017, (std/core/Nil<std/core/types/int>))), std/core/char);
  };
fun list.3 // inline size: 2
  = forall<a> fn(m: (std/core/types/maybe :: V -> V)<a>){
    (match (m) {
      ((std/core/types/Nothing() : (std/core/types/maybe :: V -> V)<a> ) as .pat: ((std/core/types/maybe :: V -> V)<a>))
         -> std/core/Nil<a>;
      ((.skip std/core/types/Just((x: a) : a) : (std/core/types/maybe :: V -> V)<a> ) as .pat0: ((std/core/types/maybe :: V -> V)<a>))
         -> std/core/Cons<a>(x, (std/core/Nil<a>));
    });
  };
fun list.5 // inline size: 1
  = forall<a> fn(v: (std/core/types/vector :: V -> V)<a>){
    std/core/vlist<a>(v, (std/core/types/None<(list :: V -> V)<a>>));
  };
fun map // inline size: 7
  = forall<a,b,(e :: E)> fn<(e :: E)>(m: (std/core/types/maybe :: V -> V)<a>, f: (a) -> (e :: E) b){
    (match (m) {
      ((std/core/types/Nothing() : (std/core/types/maybe :: V -> V)<a> ) as .pat: ((std/core/types/maybe :: V -> V)<a>))
         -> std/core/types/Nothing<b>;
      ((.skip std/core/types/Just((x: a) : a) : (std/core/types/maybe :: V -> V)<a> ) as .pat0: ((std/core/types/maybe :: V -> V)<a>))
         -> val x0.23018 : b
                  = f(x);
        (match ((std/core/hnd/yielding())) {
          ((std/core/types/True() : std/core/types/bool ) as .pat1: std/core/types/bool)
             -> std/core/hnd/yield-extend<b,(std/core/types/maybe :: V -> V)<b>,(e :: E)>((fn<(e :: E)>(.y.59: b){
              (std/core/.mlift22858-map<b,(e :: E)>(.y.59));
            }));
          ((.skip std/core/types/False() : std/core/types/bool ) as .pat00: std/core/types/bool)
             -> std/core/types/Just<b>(x0.23018);
        });
    });
  };
fun map.1 // inline size: 8
  = forall<a,b,c,(e :: E)> fn<(e :: E)>(e: (std/core/types/either :: (V, V) -> V)<a,b>, f: (b) -> (e :: E) c){
    (match (e) {
      ((std/core/types/Right((x: b) : b) : (std/core/types/either :: (V, V) -> V)<a,b> ) as .pat: ((std/core/types/either :: (V, V) -> V)<a,b>))
         -> val x0.23022 : c
                  = f(x);
        (match ((std/core/hnd/yielding())) {
          ((std/core/types/True() : std/core/types/bool ) as .pat0: std/core/types/bool)
             -> std/core/hnd/yield-extend<c,(std/core/types/either :: (V, V) -> V)<a,c>,(e :: E)>((fn<(e :: E)>(.y.61: c){
              (std/core/.mlift22859-map.1<a,c,(e :: E)>(.y.61));
            }));
          ((.skip std/core/types/False() : std/core/types/bool ) as .pat00: std/core/types/bool)
             -> std/core/types/Right<a,c>(x0.23022);
        });
      ((.skip std/core/types/Left((x00: a) : a) : (std/core/types/either :: (V, V) -> V)<a,b> ) as .pat01: ((std/core/types/either :: (V, V) -> V)<a,b>))
         -> std/core/types/Left<a,c>(x00);
    });
  };
fun map.6 // inline size: 6
  = forall<(e :: E)> fn<(e :: E)>(s: std/core/types/string, f: (std/core/types/char) -> (e :: E) std/core/types/char){
    val x.23089 : (list :: V -> V)<std/core/types/char>
          = std/core/map.5<std/core/types/char,std/core/types/char,(e :: E)>((std/core/list.4(s)), f);
    (match ((std/core/hnd/yielding())) {
      ((std/core/types/True() : std/core/types/bool ) as .pat: std/core/types/bool)
         -> std/core/hnd/yield-extend<(list :: V -> V)<std/core/types/char>,std/core/types/string,(e :: E)>(std/core/string.2);
      ((.skip std/core/types/False() : std/core/types/bool ) as .pat0: std/core/types/bool)
         -> std/core/string.2(x.23089);
    });
  };
fun pad-left // inline size: 9
  = fn(s: std/core/types/string, width: std/core/types/int, fill: (std/core/types/optional :: V -> V)<std/core/types/char>){
    val w : std/core/types/size_t
      = std/core/size_t(width);
    val n : std/core/types/size_t
      = std/core/length(s);
    match ((std/core/(<=.3)(w, n))) {
      ((std/core/types/True() : std/core/types/bool ) as .pat1: std/core/types/bool)
         -> s;
      ((.skip std/core/types/False() : std/core/types/bool ) as .pat2: std/core/types/bool)
         -> std/core/(+.6)((std/core/repeatz((std/core/string((match (fill) {
              ((std/core/types/Optional((.fill.8593: std/core/types/char) : std/core/types/char) : (std/core/types/optional :: V -> V)<std/core/types/char> ) as .pat: ((std/core/types/optional :: V -> V)<std/core/types/char>))
                 -> .fill.8593;
              ((.skip std/core/types/None() : (std/core/types/optional :: V -> V)<std/core/types/char> ) as .pat0: ((std/core/types/optional :: V -> V)<std/core/types/char>))
                 -> ' ';
            }))), (std/core/(-.2)(w, n)))), s);
    };
  };
fun sign.1 // inline size: 4
  = fn(d: std/core/types/double){
    match ((std/core/(<.4)(d, 0.0))) {
      ((std/core/types/True() : std/core/types/bool ) as .pat: std/core/types/bool)
         -> std/core/types/Lt;
      ((.skip std/core/types/False() : std/core/types/bool ) as .pat0: std/core/types/bool)
         -> (match ((std/core/(>.2)(d, 0.0))) {
          ((std/core/types/True() : std/core/types/bool ) as .pat1: std/core/types/bool)
             -> std/core/types/Gt;
          ((.skip std/core/types/False() : std/core/types/bool ) as .pat2: std/core/types/bool)
             -> std/core/types/Eq;
        });
    };
  };
fun is-pos.2 // inline size: 6
  = fn(i: std/core/types/int){
    val x.23107 : std/core/types/order
          = std/core/sign(i);
    std/core/(==.1)((std/core/int.5(x.23107)), (match (std/core/types/Gt) {
        ((std/core/types/Lt() : std/core/types/order ) as .pat: std/core/types/order)
           -> std/core/(-)(0, 1);
        ((std/core/types/Eq() : std/core/types/order ) as .pat0: std/core/types/order)
           -> 0;
        ((.skip std/core/types/Gt() : std/core/types/order ) as .pat1: std/core/types/order)
           -> 1;
      }));
  };
fun is-pos.3 // inline size: 1
  = fn(d: std/core/types/double){
    std/core/(>.2)(d, 0.0);
  };
fun is-empty // inline size: 1
  = forall<a> fn(xs: (list :: V -> V)<a>){
    (match (xs) {
      ((std/core/Nil() : (list :: V -> V)<a> ) as .pat: ((list :: V -> V)<a>))
         -> std/core/types/True;
      (.pat0: ((list :: V -> V)<a>))
         -> std/core/types/False;
    });
  };
fun is-empty.1 // inline size: 2
  = fn(slice: sslice){
    std/core/types/(!)((std/core/is-pos.1((match (slice) {
      ((.skip std/core/Sslice((.pat0: std/core/types/string) : std/core/types/string, (.pat1: std/core/types/size_t) : std/core/types/size_t, (.x: std/core/types/size_t) : std/core/types/size_t) : sslice ) as .pat: sslice)
         -> .x;
    }))));
  };
fun is-empty.2 // inline size: 1
  = fn(s: std/core/types/string){
    std/core/(==.3)(s, "");
  };
fun (||) // inline size: 1
  = forall<a> fn(m1: (std/core/types/maybe :: V -> V)<a>, m2: (std/core/types/maybe :: V -> V)<a>){
    (match (m1) {
      ((std/core/types/Nothing() : (std/core/types/maybe :: V -> V)<a> ) as .pat: ((std/core/types/maybe :: V -> V)<a>))
         -> m2;
      (.pat0: ((std/core/types/maybe :: V -> V)<a>))
         -> m1;
    });
  };
fun (||.1) // inline size: 2
  = fn(x: std/core/types/string, y: std/core/types/string){
    match ((std/core/is-empty.2(x))) {
      ((std/core/types/True() : std/core/types/bool ) as .pat: std/core/types/bool)
         -> y;
      ((.skip std/core/types/False() : std/core/types/bool ) as .pat0: std/core/types/bool)
         -> x;
    };
  };
fun show-exp // inline size: 3
  = fn(d: std/core/types/double, precision: (std/core/types/optional :: V -> V)<std/core/types/int>){
    std/core/show-expx(d, (std/core/int32((match (precision) {
        ((std/core/types/Optional((.precision.10028: std/core/types/int) : std/core/types/int) : (std/core/types/optional :: V -> V)<std/core/types/int> ) as .pat: ((std/core/types/optional :: V -> V)<std/core/types/int>))
           -> .precision.10028;
        ((.skip std/core/types/None() : (std/core/types/optional :: V -> V)<std/core/types/int> ) as .pat0: ((std/core/types/optional :: V -> V)<std/core/types/int>))
           -> -17;
      }))));
  };
fun show-list // inline size: 9
  = forall<a,(e :: E)> fn<(e :: E)>(xs: (list :: V -> V)<a>, show-elem: (a) -> (e :: E) std/core/types/string){
    val x.23135 : (list :: V -> V)<std/core/types/string>
          = std/core/map.5<a,std/core/types/string,(e :: E)>(xs, show-elem);
    (match ((std/core/hnd/yielding())) {
      ((std/core/types/True() : std/core/types/bool ) as .pat: std/core/types/bool)
         -> std/core/hnd/yield-extend<(list :: V -> V)<std/core/types/string>,std/core/types/string,(e :: E)>((fn<(e :: E)>(.y.75: (list :: V -> V)<std/core/types/string>){
          (std/core/.mlift22871-show-list<(e :: E)>(.y.75));
        }));
      ((.skip std/core/types/False() : std/core/types/bool ) as .pat0: std/core/types/bool)
         -> std/core/(+.6)((std/core/(+.6)("[", (match (x.23135) {
              ((std/core/Nil() : (list :: V -> V)<std/core/types/string> ) as .pat1: ((list :: V -> V)<std/core/types/string>))
                 -> "";
              ((.skip std/core/Cons((x: std/core/types/string) : std/core/types/string, (xx: (list :: V -> V)<std/core/types/string>) : (list :: V -> V)<std/core/types/string>) : (list :: V -> V)<std/core/types/string> ) as .pat00: ((list :: V -> V)<std/core/types/string>))
                 -> std/core/.lift22731-joinsep(",", xx, x);
            }))), "]");
    });
  };
inline fun show.10 // inline size: 0
  = fn(exn: exception){
    match (exn) {
      ((.skip std/core/Exception((.x: std/core/types/string) : std/core/types/string, (.pat0: exception-info) : exception-info) : exception ) as .pat: exception)
         -> .x;
    };
  };
fun show.2 // inline size: 3
  = fn(c: std/core/types/char){
    std/core/(+.6)((std/core/(+.6)("\x27", (std/core/show-char(c)))), "\x27");
  };
fun show.3 // inline size: 6
  = fn(s: std/core/types/string){
    std/core/(+.6)((std/core/(+.6)("\x22", val xs.23148 : ((list :: V -> V)<std/core/types/string>)
                                                 = (std/core/map.5<std/core/types/char,std/core/types/string,(std/core/types/(<>) :: E)>((std/core/list.4(s)), std/core/show-char));
        (match (xs.23148) {
          ((std/core/Nil() : (list :: V -> V)<std/core/types/string> ) as .pat: ((list :: V -> V)<std/core/types/string>))
             -> "";
          ((.skip std/core/Cons((x: std/core/types/string) : std/core/types/string, (xx: (list :: V -> V)<std/core/types/string>) : (list :: V -> V)<std/core/types/string>) : (list :: V -> V)<std/core/types/string> ) as .pat0: ((list :: V -> V)<std/core/types/string>))
             -> std/core/.lift22731-joinsep("", xx, x);
        }))), "\x22");
  };
fun show.4 // inline size: 1
  = fn(b: std/core/types/bool){
    match (b) {
      ((std/core/types/True() : std/core/types/bool ) as .pat: std/core/types/bool)
         -> "True";
      ((.skip std/core/types/False() : std/core/types/bool ) as .pat0: std/core/types/bool)
         -> "False";
    };
  };
inline fun show.5 // inline size: 0
  = fn(u: ()){
    "()";
  };
fun show.6 // inline size: 7
  = fn(s: sslice){
    val s0.23151 : std/core/types/string
          = std/core/string.3(s);
    std/core/(+.6)((std/core/(+.6)("\x22", val xs.23152 : ((list :: V -> V)<std/core/types/string>)
                                                 = (std/core/map.5<std/core/types/char,std/core/types/string,(std/core/types/(<>) :: E)>((std/core/list.4(s0.23151)), std/core/show-char));
        (match (xs.23152) {
          ((std/core/Nil() : (list :: V -> V)<std/core/types/string> ) as .pat: ((list :: V -> V)<std/core/types/string>))
             -> "";
          ((.skip std/core/Cons((x: std/core/types/string) : std/core/types/string, (xx: (list :: V -> V)<std/core/types/string>) : (list :: V -> V)<std/core/types/string>) : (list :: V -> V)<std/core/types/string> ) as .pat0: ((list :: V -> V)<std/core/types/string>))
             -> std/core/.lift22731-joinsep("", xx, x);
        }))), "\x22");
  };
fun show.7 // inline size: 1
  = fn(xs: (list :: V -> V)<std/core/types/string>){
    std/core/show-list<std/core/types/string,(std/core/types/(<>) :: E)>(xs, std/core/show.3);
  };
fun show.8 // inline size: 1
  = fn(xs: (list :: V -> V)<std/core/types/int>){
    std/core/show-list<std/core/types/int,(std/core/types/(<>) :: E)>(xs, std/core/show);
  };
fun show.9 // inline size: 1
  = fn(xs: (list :: V -> V)<std/core/types/bool>){
    std/core/show-list<std/core/types/bool,(std/core/types/(<>) :: E)>(xs, std/core/show.4);
  };
fun println // inline size: 1
  = fn<<(console :: X)>>(s: std/core/types/string){
    std/core/printsln(s);
  };
fun println.1 // inline size: 2
  = fn<<(console :: X)>>(i: std/core/types/int){
    std/core/printsln((std/core/show(i)));
  };
fun println.2 // inline size: 2
  = fn<<(console :: X)>>(d: std/core/types/double){
    std/core/printsln((std/core/show.1(d, (std/core/types/None<std/core/types/int>))));
  };
fun println.3 // inline size: 2
  = fn<<(console :: X)>>(b: std/core/types/bool){
    std/core/printsln((std/core/show.4(b)));
  };
fun println.4 // inline size: 2
  = fn<<(console :: X)>>(c: std/core/types/char){
    std/core/printsln((std/core/string(c)));
  };
fun println.5 // inline size: 1
  = fn<<(console :: X)>>(u: ()){
    std/core/printsln("()");
  };
fun throw-exn // inline size: 3
  = forall<a> fn<<(std/core/types/handled :: HX -> X)<(exn :: HX)>>>(exn: exception){
    val ev.23156 : (std/core/hnd/ev :: ((E, V) -> V) -> V)<(.hnd-exn :: (E, V) -> V)>
          = std/core/hnd/.evv-at<(.hnd-exn :: (E, V) -> V)>((std/core/size_t(0)));
    (match (ev.23156) {
      ((.skip std/core/hnd/Ev<(e :: E),b>((.pat0: (std/core/hnd/htag :: ((E, V) -> V) -> V)<(.hnd-exn :: (E, V) -> V)>) : (std/core/hnd/htag :: ((E, V) -> V) -> V)<(.hnd-exn :: (E, V) -> V)>, (m: (std/core/hnd/marker :: (E, V) -> V)<(e :: E),b>) : (std/core/hnd/marker :: (E, V) -> V)<(e :: E),b>, (h: (.hnd-exn :: (E, V) -> V)<(e :: E),b>) : (.hnd-exn :: (E, V) -> V)<(e :: E),b>, (.pat1: std/core/hnd/cfc) : std/core/hnd/cfc, (.pat2: (std/core/hnd/evv :: E -> V)<(e :: E)>) : (std/core/hnd/evv :: E -> V)<(e :: E)>) : (std/core/hnd/ev :: ((E, V) -> V) -> V)<(.hnd-exn :: (E, V) -> V)> ) as .pat: ((std/core/hnd/ev :: ((E, V) -> V) -> V)<(.hnd-exn :: (E, V) -> V)>))
         -> (match ((match (h) {
          ((.skip std/core/.Hnd-exn((except-throw-exn: (forall<c> (std/core/hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<exception,c,(.hnd-exn :: (E, V) -> V),(e :: E),b>)) : (forall<c> (std/core/hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<exception,c,(.hnd-exn :: (E, V) -> V),(e :: E),b>)) : (.hnd-exn :: (E, V) -> V)<(e :: E),b> ) as .pat3: ((.hnd-exn :: (E, V) -> V)<(e :: E),b>))
             -> except-throw-exn<a>;
        })) {
          ((.skip std/core/hnd/Clause1((f: ((std/core/hnd/marker :: (E, V) -> V)<(e :: E),b>, (std/core/hnd/ev :: ((E, V) -> V) -> V)<(.hnd-exn :: (E, V) -> V)>, exception) -> (e :: E) a) : ((std/core/hnd/marker :: (E, V) -> V)<(e :: E),b>, (std/core/hnd/ev :: ((E, V) -> V) -> V)<(.hnd-exn :: (E, V) -> V)>, exception) -> (e :: E) a) : (std/core/hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<exception,a,(.hnd-exn :: (E, V) -> V),(e :: E),b> ) as .pat30: ((std/core/hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<exception,a,(.hnd-exn :: (E, V) -> V),(e :: E),b>))
             -> f(m, ev.23156, exn);
        });
    });
  };
fun .default-exn // inline size: 7
  = forall<(e :: E)> fn<<(console :: X)|(e :: E)>>(action: () -> <(std/core/types/handled :: HX -> X)<(exn :: HX)>,(console :: X)|(e :: E)> ()){
    std/core/.handle-exn<(),<(console :: X)|(e :: E)>,()>((std/core/int32(0)), (std/core/.Hnd-exn<<(console :: X)|(e :: E)>,()>((forall<a> std/core/hnd/Clause1<exception,a,(.hnd-exn :: (E, V) -> V),<(console :: X)|(e :: E)>,()>((fn<<(console :: X)|(e :: E)>>(m: (std/core/hnd/marker :: (E, V) -> V)<<(console :: X)|(e :: E)>,()>, _ev: (std/core/hnd/ev :: ((E, V) -> V) -> V)<(.hnd-exn :: (E, V) -> V)>, x: exception){
        (std/core/hnd/yield-to-final<a,<(console :: X)|(e :: E)>,<(console :: X)|(e :: E)>,()>(m, (fn<<(console :: X)|(e :: E)>>(_k: (() -> a) -> <(console :: X)|(e :: E)> ()){
            val _ : ()
                  = (std/core/prints("uncaught exception: "));
            (std/core/printsln((match (x) {
              ((.skip std/core/Exception((.x: std/core/types/string) : std/core/types/string, (.pat0: exception-info) : exception-info) : exception ) as .pat: exception)
                 -> .x;
            })));
          })));
      }))))), (fn<<(console :: X)|(e :: E)>>(.x0: ()){
        .x0;
      }), action);
  };
recursive fun ([].2) // inline size: 8
  = forall<a> fn(xs: (list :: V -> V)<a>, n: std/core/types/int){
    (match (xs) {
      ((std/core/Cons((x: a) : a, (xx: (list :: V -> V)<a>) : (list :: V -> V)<a>) : (list :: V -> V)<a> ) as .pat: ((list :: V -> V)<a>))
         -> (match ((std/core/(>.1)(n, 0))) {
          ((std/core/types/True() : std/core/types/bool ) as .pat0: std/core/types/bool)
             -> std/core/([].2)<a>(xx, (std/core/(-)(n, 1)));
          ((.skip std/core/types/False() : std/core/types/bool ) as .pat1: std/core/types/bool)
             -> (match ((std/core/(==.1)(n, 0))) {
              ((std/core/types/True() : std/core/types/bool ) as .pat2: std/core/types/bool)
                 -> std/core/types/Just<a>(x);
              ((.skip std/core/types/False() : std/core/types/bool ) as .pat3: std/core/types/bool)
                 -> std/core/types/Nothing<a>;
            });
        });
      ((.skip std/core/Nil() : (list :: V -> V)<a> ) as .pat4: ((list :: V -> V)<a>))
         -> std/core/types/Nothing<a>;
    });
  };
fun (^.1) // inline size: 1
  = fn(i: std/core/types/int, exp: std/core/types/int){
    std/core/pow(i, exp);
  };
fun after // inline size: 5
  = fn(slice: sslice){
    match (slice) {
      ((.skip std/core/Sslice((s: std/core/types/string) : std/core/types/string, (start: std/core/types/size_t) : std/core/types/size_t, (len: std/core/types/size_t) : std/core/types/size_t) : sslice ) as .pat: sslice)
         -> std/core/Sslice(s, (std/core/(+.2)(start, len)), (std/core/(-.2)((std/core/length(s)), (std/core/(+.2)(start, len)))));
    };
  };
recursive fun all // inline size: 8
  = forall<a,(e :: E)> fn<(e :: E)>(xs: (list :: V -> V)<a>, predicate: (a) -> (e :: E) std/core/types/bool){
    (match (xs) {
      ((std/core/Cons((x: a) : a, (xx: (list :: V -> V)<a>) : (list :: V -> V)<a>) : (list :: V -> V)<a> ) as .pat: ((list :: V -> V)<a>))
         -> val x0.23162 : std/core/types/bool
                  = predicate(x);
        (match ((std/core/hnd/yielding())) {
          ((std/core/types/True() : std/core/types/bool ) as .pat0: std/core/types/bool)
             -> std/core/hnd/yield-extend<std/core/types/bool,std/core/types/bool,(e :: E)>((fn<(e :: E)>(.y.78: std/core/types/bool){
              (std/core/.mlift22872-all<a,(e :: E)>(predicate, xx, .y.78));
            }));
          ((.skip std/core/types/False() : std/core/types/bool ) as .pat00: std/core/types/bool)
             -> (match (x0.23162) {
              ((std/core/types/True() : std/core/types/bool ) as .pat01: std/core/types/bool)
                 -> std/core/all<a,(e :: E)>(xx, predicate);
              ((.skip std/core/types/False() : std/core/types/bool ) as .pat1: std/core/types/bool)
                 -> std/core/types/False;
            });
        });
      ((.skip std/core/Nil() : (list :: V -> V)<a> ) as .pat2: ((list :: V -> V)<a>))
         -> std/core/types/True;
    });
  };
recursive fun any // inline size: 8
  = forall<a,(e :: E)> fn<(e :: E)>(xs: (list :: V -> V)<a>, predicate: (a) -> (e :: E) std/core/types/bool){
    (match (xs) {
      ((std/core/Cons((x: a) : a, (xx: (list :: V -> V)<a>) : (list :: V -> V)<a>) : (list :: V -> V)<a> ) as .pat: ((list :: V -> V)<a>))
         -> val x0.23166 : std/core/types/bool
                  = predicate(x);
        (match ((std/core/hnd/yielding())) {
          ((std/core/types/True() : std/core/types/bool ) as .pat0: std/core/types/bool)
             -> std/core/hnd/yield-extend<std/core/types/bool,std/core/types/bool,(e :: E)>((fn<(e :: E)>(.y.82: std/core/types/bool){
              (std/core/.mlift22873-any<a,(e :: E)>(predicate, xx, .y.82));
            }));
          ((.skip std/core/types/False() : std/core/types/bool ) as .pat00: std/core/types/bool)
             -> (match (x0.23166) {
              ((std/core/types/True() : std/core/types/bool ) as .pat01: std/core/types/bool)
                 -> std/core/types/True;
              ((.skip std/core/types/False() : std/core/types/bool ) as .pat1: std/core/types/bool)
                 -> std/core/any<a,(e :: E)>(xx, predicate);
            });
        });
      ((.skip std/core/Nil() : (list :: V -> V)<a> ) as .pat2: ((list :: V -> V)<a>))
         -> std/core/types/False;
    });
  };
fun throw // inline size: 5
  = forall<a> fn<<(std/core/types/handled :: HX -> X)<(exn :: HX)>>>(message: std/core/types/string, info: (std/core/types/optional :: V -> V)<exception-info>){
    val exn.23170 : exception
      = std/core/Exception(message, (match (info) {
          ((std/core/types/Optional((.info.12803: exception-info) : exception-info) : (std/core/types/optional :: V -> V)<exception-info> ) as .pat4: ((std/core/types/optional :: V -> V)<exception-info>))
             -> .info.12803;
          ((.skip std/core/types/None() : (std/core/types/optional :: V -> V)<exception-info> ) as .pat00: ((std/core/types/optional :: V -> V)<exception-info>))
             -> std/core/ExnError;
        }));
    val ev.23171 : (std/core/hnd/ev :: ((E, V) -> V) -> V)<(.hnd-exn :: (E, V) -> V)>
      = std/core/hnd/.evv-at<(.hnd-exn :: (E, V) -> V)>((std/core/size_t(0)));
    (match (ev.23171) {
      ((.skip std/core/hnd/Ev<(e :: E),b>((.pat0: (std/core/hnd/htag :: ((E, V) -> V) -> V)<(.hnd-exn :: (E, V) -> V)>) : (std/core/hnd/htag :: ((E, V) -> V) -> V)<(.hnd-exn :: (E, V) -> V)>, (m: (std/core/hnd/marker :: (E, V) -> V)<(e :: E),b>) : (std/core/hnd/marker :: (E, V) -> V)<(e :: E),b>, (h: (.hnd-exn :: (E, V) -> V)<(e :: E),b>) : (.hnd-exn :: (E, V) -> V)<(e :: E),b>, (.pat1: std/core/hnd/cfc) : std/core/hnd/cfc, (.pat2: (std/core/hnd/evv :: E -> V)<(e :: E)>) : (std/core/hnd/evv :: E -> V)<(e :: E)>) : (std/core/hnd/ev :: ((E, V) -> V) -> V)<(.hnd-exn :: (E, V) -> V)> ) as .pat: ((std/core/hnd/ev :: ((E, V) -> V) -> V)<(.hnd-exn :: (E, V) -> V)>))
         -> (match ((match (h) {
          ((.skip std/core/.Hnd-exn((except-throw-exn: (forall<c> (std/core/hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<exception,c,(.hnd-exn :: (E, V) -> V),(e :: E),b>)) : (forall<c> (std/core/hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<exception,c,(.hnd-exn :: (E, V) -> V),(e :: E),b>)) : (.hnd-exn :: (E, V) -> V)<(e :: E),b> ) as .pat3: ((.hnd-exn :: (E, V) -> V)<(e :: E),b>))
             -> except-throw-exn<a>;
        })) {
          ((.skip std/core/hnd/Clause1((f: ((std/core/hnd/marker :: (E, V) -> V)<(e :: E),b>, (std/core/hnd/ev :: ((E, V) -> V) -> V)<(.hnd-exn :: (E, V) -> V)>, exception) -> (e :: E) a) : ((std/core/hnd/marker :: (E, V) -> V)<(e :: E),b>, (std/core/hnd/ev :: ((E, V) -> V) -> V)<(.hnd-exn :: (E, V) -> V)>, exception) -> (e :: E) a) : (std/core/hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<exception,a,(.hnd-exn :: (E, V) -> V),(e :: E),b> ) as .pat30: ((std/core/hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<exception,a,(.hnd-exn :: (E, V) -> V),(e :: E),b>))
             -> f(m, ev.23171, exn.23170);
        });
    });
  };
fun throw.1 // inline size: 2
  = forall<a> fn<<(std/core/types/handled :: HX -> X)<(exn :: HX)>>>(err: (error :: V -> V)<a>){
    (match (err) {
      ((std/core/Error(((.skip std/core/Exception((.pat0: std/core/types/string) : std/core/types/string, (.pat1: exception-info) : exception-info) : exception ) as exn: exception) : exception) : (error :: V -> V)<a> ) as .pat: ((error :: V -> V)<a>))
         -> std/core/throw-exn<a>(exn);
      ((.skip std/core/Ok((x: a) : a) : (error :: V -> V)<a> ) as .pat2: ((error :: V -> V)<a>))
         -> x;
    });
  };
fun assert // inline size: 8
  = fn(message: std/core/types/string, condition: std/core/types/bool){
    match ((std/core/types/(!)(condition))) {
      ((std/core/types/True() : std/core/types/bool ) as .pat: std/core/types/bool)
         -> val info.23176 : (std/core/types/optional :: V -> V)<exception-info>
              = std/core/types/Optional<exception-info>(std/core/ExnAssert);
            val exn.23177 : exception
              = std/core/Exception(message, (match (info.23176) {
                  ((std/core/types/Optional((.info.12803: exception-info) : exception-info) : (std/core/types/optional :: V -> V)<exception-info> ) as .pat4: ((std/core/types/optional :: V -> V)<exception-info>))
                     -> .info.12803;
                  ((.skip std/core/types/None() : (std/core/types/optional :: V -> V)<exception-info> ) as .pat01: ((std/core/types/optional :: V -> V)<exception-info>))
                     -> std/core/ExnError;
                }));
            val ev.23178 : (std/core/hnd/ev :: ((E, V) -> V) -> V)<(.hnd-exn :: (E, V) -> V)>
              = std/core/hnd/.evv-at<(.hnd-exn :: (E, V) -> V)>((std/core/size_t(0)));
        (match (ev.23178) {
          ((.skip std/core/hnd/Ev<(e :: E),a>((.pat00: (std/core/hnd/htag :: ((E, V) -> V) -> V)<(.hnd-exn :: (E, V) -> V)>) : (std/core/hnd/htag :: ((E, V) -> V) -> V)<(.hnd-exn :: (E, V) -> V)>, (m: (std/core/hnd/marker :: (E, V) -> V)<(e :: E),a>) : (std/core/hnd/marker :: (E, V) -> V)<(e :: E),a>, (h: (.hnd-exn :: (E, V) -> V)<(e :: E),a>) : (.hnd-exn :: (E, V) -> V)<(e :: E),a>, (.pat1: std/core/hnd/cfc) : std/core/hnd/cfc, (.pat2: (std/core/hnd/evv :: E -> V)<(e :: E)>) : (std/core/hnd/evv :: E -> V)<(e :: E)>) : (std/core/hnd/ev :: ((E, V) -> V) -> V)<(.hnd-exn :: (E, V) -> V)> ) as .pat0: ((std/core/hnd/ev :: ((E, V) -> V) -> V)<(.hnd-exn :: (E, V) -> V)>))
             -> (match ((match (h) {
              ((.skip std/core/.Hnd-exn((except-throw-exn: (forall<b> (std/core/hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<exception,b,(.hnd-exn :: (E, V) -> V),(e :: E),a>)) : (forall<b> (std/core/hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<exception,b,(.hnd-exn :: (E, V) -> V),(e :: E),a>)) : (.hnd-exn :: (E, V) -> V)<(e :: E),a> ) as .pat3: ((.hnd-exn :: (E, V) -> V)<(e :: E),a>))
                 -> except-throw-exn<()>;
            })) {
              ((.skip std/core/hnd/Clause1((f: ((std/core/hnd/marker :: (E, V) -> V)<(e :: E),a>, (std/core/hnd/ev :: ((E, V) -> V) -> V)<(.hnd-exn :: (E, V) -> V)>, exception) -> (e :: E) ()) : ((std/core/hnd/marker :: (E, V) -> V)<(e :: E),a>, (std/core/hnd/ev :: ((E, V) -> V) -> V)<(.hnd-exn :: (E, V) -> V)>, exception) -> (e :: E) ()) : (std/core/hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<exception,(),(.hnd-exn :: (E, V) -> V),(e :: E),a> ) as .pat30: ((std/core/hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<exception,(),(.hnd-exn :: (E, V) -> V),(e :: E),a>))
                 -> f(m, ev.23178, exn.23177);
            });
        });
      ((.skip std/core/types/False() : std/core/types/bool ) as .pat02: std/core/types/bool)
         -> std/core/types/();
    };
  };
fun at // inline size: 6
  = forall<a> fn(v: (std/core/types/vector :: V -> V)<a>, index: std/core/types/int){
    val idx : std/core/types/size_t
          = std/core/size_t(index);
    (match ((std/core/(<=.3)((std/core/lengthz<a>(v)), idx))) {
      ((std/core/types/True() : std/core/types/bool ) as .pat: std/core/types/bool)
         -> std/core/types/Nothing<a>;
      ((.skip std/core/types/False() : std/core/types/bool ) as .pat0: std/core/types/bool)
         -> std/core/types/Just<a>((std/core/unsafe-idx<a>(v, idx)));
    });
  };
fun before // inline size: 2
  = fn(slice: sslice){
    match (slice) {
      ((.skip std/core/Sslice((s: std/core/types/string) : std/core/types/string, (start: std/core/types/size_t) : std/core/types/size_t, (.pat0: std/core/types/size_t) : std/core/types/size_t) : sslice ) as .pat: sslice)
         -> std/core/Sslice(s, (std/core/size_t(0)), start);
    };
  };
fun bool // inline size: 1
  = fn(i: std/core/types/int){
    std/core/(!=.1)(i, 0);
  };
fun bool.1 // inline size: 1
  = forall<a> fn(m: (std/core/types/maybe :: V -> V)<a>){
    (match (m) {
      ((std/core/types/Nothing() : (std/core/types/maybe :: V -> V)<a> ) as .pat: ((std/core/types/maybe :: V -> V)<a>))
         -> std/core/types/False;
      (.pat0: ((std/core/types/maybe :: V -> V)<a>))
         -> std/core/types/True;
    });
  };
fun bool.2 // inline size: 1
  = fn(s: std/core/types/string){
    std/core/(!=.3)(s, "");
  };
fun first // inline size: 7
  = fn(s: std/core/types/string, n: (std/core/types/optional :: V -> V)<std/core/types/int>){
    val slice : sslice
          = std/core/first1(s);
    match ((std/core/(==.1)((match (n) {
        ((std/core/types/Optional((.n.13060: std/core/types/int) : std/core/types/int) : (std/core/types/optional :: V -> V)<std/core/types/int> ) as .pat: ((std/core/types/optional :: V -> V)<std/core/types/int>))
           -> .n.13060;
        ((.skip std/core/types/None() : (std/core/types/optional :: V -> V)<std/core/types/int> ) as .pat0: ((std/core/types/optional :: V -> V)<std/core/types/int>))
           -> 1;
      }), 1))) {
      ((std/core/types/True() : std/core/types/bool ) as .pat1: std/core/types/bool)
         -> slice;
      ((.skip std/core/types/False() : std/core/types/bool ) as .pat2: std/core/types/bool)
         -> std/core/extend(slice, (std/core/(-)((match (n) {
              ((std/core/types/Optional((.n.130600: std/core/types/int) : std/core/types/int) : (std/core/types/optional :: V -> V)<std/core/types/int> ) as .pat3: ((std/core/types/optional :: V -> V)<std/core/types/int>))
                 -> .n.130600;
              ((.skip std/core/types/None() : (std/core/types/optional :: V -> V)<std/core/types/int> ) as .pat00: ((std/core/types/optional :: V -> V)<std/core/types/int>))
                 -> 1;
            }), 1)));
    };
  };
fun try // inline size: 4
  = forall<a,(e :: E)> fn<(e :: E)>(action: () -> <(std/core/types/handled :: HX -> X)<(exn :: HX)>|(e :: E)> a, hndl: (exception) -> (e :: E) a){
    std/core/.handle-exn<a,(e :: E),a>((std/core/int32(0)), (std/core/.Hnd-exn<(e :: E),a>((forall<b> std/core/hnd/clause-never1<exception,b,(e :: E),(.hnd-exn :: (E, V) -> V),a>(hndl)))), (fn<(e :: E)>(.x: a){
        .x;
      }), action);
  };
fun catch // inline size: 1
  = forall<a,(e :: E)> fn<(e :: E)>(action: () -> <(std/core/types/handled :: HX -> X)<(exn :: HX)>|(e :: E)> a, hndl: (exception) -> (e :: E) a){
    std/core/try<a,(e :: E)>(action, hndl);
  };
fun cdivmod-exp10 // inline size: 7
  = fn(i: std/core/types/int, n: std/core/types/int){
    match ((std/core/(<=.1)(n, 0))) {
      ((std/core/types/True() : std/core/types/bool ) as .pat: std/core/types/bool)
         -> std/core/types/(,)<std/core/types/int,std/core/types/int>(i, 0);
      ((.skip std/core/types/False() : std/core/types/bool ) as .pat0: std/core/types/bool)
         -> val cq : std/core/types/int
              = std/core/cdiv-exp10(i, n);
            val cr : std/core/types/int
              = std/core/(-)(i, (std/core/mul-exp10(cq, n)));
        std/core/types/(,)<std/core/types/int,std/core/types/int>(cq, cr);
    };
  };
recursive fun concat-maybe // inline size: 1
  = forall<a> fn(xs: (list :: V -> V)<(std/core/types/maybe :: V -> V)<a>>){
    std/core/.ctail-concat-maybe<a>(xs, (std/core/types/CTailNil<(list :: V -> V)<a>>));
  };
fun for-whilez // inline size: 1
  = forall<a,(e :: E)> fn<(e :: E)>(start: std/core/types/size_t, end: std/core/types/size_t, action: (std/core/types/size_t) -> (e :: E) (std/core/types/maybe :: V -> V)<a>){
    std/core/.lift22736-for-whilez<a,(e :: E)>(action, end, start);
  };
fun slice // inline size: 3
  = fn(s: std/core/types/string){
    std/core/Sslice(s, (std/core/size_t(0)), (std/core/length(s)));
  };
recursive fun foreach-while // inline size: 8
  = forall<a,b,(e :: E)> fn<(e :: E)>(xs: (list :: V -> V)<a>, action: (a) -> (e :: E) (std/core/types/maybe :: V -> V)<b>){
    (match (xs) {
      ((std/core/Nil() : (list :: V -> V)<a> ) as .pat: ((list :: V -> V)<a>))
         -> std/core/types/Nothing<b>;
      ((.skip std/core/Cons((x: a) : a, (xx: (list :: V -> V)<a>) : (list :: V -> V)<a>) : (list :: V -> V)<a> ) as .pat0: ((list :: V -> V)<a>))
         -> val x0.23199 : (std/core/types/maybe :: V -> V)<b>
                  = action(x);
        (match ((std/core/hnd/yielding())) {
          ((std/core/types/True() : std/core/types/bool ) as .pat1: std/core/types/bool)
             -> std/core/hnd/yield-extend<(std/core/types/maybe :: V -> V)<b>,(std/core/types/maybe :: V -> V)<b>,(e :: E)>((fn<(e :: E)>(.y.100: (std/core/types/maybe :: V -> V)<b>){
              (std/core/.mlift22876-foreach-while<a,b,(e :: E)>(action, xx, .y.100));
            }));
          ((.skip std/core/types/False() : std/core/types/bool ) as .pat00: std/core/types/bool)
             -> (match (x0.23199) {
              ((std/core/types/Nothing() : (std/core/types/maybe :: V -> V)<b> ) as .pat10: ((std/core/types/maybe :: V -> V)<b>))
                 -> std/core/foreach-while<a,b,(e :: E)>(xx, action);
              (just: ((std/core/types/maybe :: V -> V)<b>))
                 -> just;
            });
        });
    });
  };
recursive fun foreach-while.1 // inline size: 9
  = forall<a,(e :: E)> fn<(e :: E)>(slice: sslice, action: (c : std/core/types/char) -> (e :: E) (std/core/types/maybe :: V -> V)<a>){
    (match ((std/core/next(slice))) {
      ((std/core/types/Nothing() : (std/core/types/maybe :: V -> V)<(std/core/types/char, sslice)> ) as .pat: ((std/core/types/maybe :: V -> V)<(std/core/types/char, sslice)>))
         -> std/core/types/Nothing<a>;
      ((.skip std/core/types/Just(((.skip std/core/types/(,)((c: std/core/types/char) : std/core/types/char, ((.skip std/core/Sslice((.pat2: std/core/types/string) : std/core/types/string, (.pat3: std/core/types/size_t) : std/core/types/size_t, (.pat4: std/core/types/size_t) : std/core/types/size_t) : sslice ) as rest: sslice) : sslice) : (std/core/types/char, sslice) ) as .pat1: (std/core/types/char, sslice)) : (std/core/types/char, sslice)) : (std/core/types/maybe :: V -> V)<(std/core/types/char, sslice)> ) as .pat0: ((std/core/types/maybe :: V -> V)<(std/core/types/char, sslice)>))
         -> val x.23203 : (std/core/types/maybe :: V -> V)<a>
                  = action(c);
        (match ((std/core/hnd/yielding())) {
          ((std/core/types/True() : std/core/types/bool ) as .pat5: std/core/types/bool)
             -> std/core/hnd/yield-extend<(std/core/types/maybe :: V -> V)<a>,(std/core/types/maybe :: V -> V)<a>,(e :: E)>((fn<(e :: E)>(.y.104: (std/core/types/maybe :: V -> V)<a>){
              (std/core/.mlift22877-foreach-while.1<a,(e :: E)>(action, rest, .y.104));
            }));
          ((.skip std/core/types/False() : std/core/types/bool ) as .pat00: std/core/types/bool)
             -> (match (x.23203) {
              ((std/core/types/Nothing() : (std/core/types/maybe :: V -> V)<a> ) as .pat50: ((std/core/types/maybe :: V -> V)<a>))
                 -> std/core/foreach-while.1<a,(e :: E)>(rest, action);
              (res: ((std/core/types/maybe :: V -> V)<a>))
                 -> res;
            });
        });
    });
  };
fun foreach-while.2 // inline size: 2
  = forall<a,(e :: E)> fn<(e :: E)>(s: std/core/types/string, action: (c : std/core/types/char) -> (e :: E) (std/core/types/maybe :: V -> V)<a>){
    std/core/foreach-while.1<a,(e :: E)>((std/core/slice(s)), action);
  };
fun foreach-while.3 // inline size: 6
  = forall<a,b,(e :: E)> fn<(e :: E)>(v: (std/core/types/vector :: V -> V)<a>, f: (a) -> (e :: E) (std/core/types/maybe :: V -> V)<b>){
    val start.23207 : std/core/types/size_t
      = std/core/size_t(0);
    val end.23208 : std/core/types/size_t
      = std/core/decr.1((std/core/lengthz<a>(v)));
    std/core/.lift22736-for-whilez<b,(e :: E)>((fn<(e :: E)>(i: std/core/types/size_t){
        (f((std/core/unsafe-idx<a>(v, i))));
      }), end.23208, start.23207);
  };
recursive fun foreach // inline size: 7
  = forall<a,(e :: E)> fn<(e :: E)>(xs: (list :: V -> V)<a>, action: (a) -> (e :: E) ()){
    (match (xs) {
      ((std/core/Nil() : (list :: V -> V)<a> ) as .pat: ((list :: V -> V)<a>))
         -> std/core/types/();
      ((.skip std/core/Cons((x: a) : a, (xx: (list :: V -> V)<a>) : (list :: V -> V)<a>) : (list :: V -> V)<a> ) as .pat0: ((list :: V -> V)<a>))
         -> val x0.23210 : ()
                  = action(x);
        (match ((std/core/hnd/yielding())) {
          ((std/core/types/True() : std/core/types/bool ) as .pat1: std/core/types/bool)
             -> std/core/hnd/yield-extend<(),(),(e :: E)>((fn<(e :: E)>(wild_: ()){
              (std/core/.mlift22878-foreach<a,(e :: E)>(action, xx, wild_));
            }));
          ((.skip std/core/types/False() : std/core/types/bool ) as .pat00: std/core/types/bool)
             -> std/core/foreach<a,(e :: E)>(xx, action);
        });
    });
  };
fun foreach.3 // inline size: 6
  = forall<a,(e :: E)> fn<(e :: E)>(v: (std/core/types/vector :: V -> V)<a>, f: (a) -> (e :: E) ()){
    val start.23230 : std/core/types/size_t
      = std/core/size_t(0);
    val end.23231 : std/core/types/size_t
      = std/core/decr.1((std/core/lengthz<a>(v)));
    std/core/.lift22732-forz<(e :: E)>((fn<(e :: E)>(i: std/core/types/size_t){
        val x.23233 : a
              = (std/core/unsafe-idx<a>(v, i));
        (f(x.23233));
      }), end.23231, start.23230);
  };
fun dec // inline size: 1
  = fn(i: std/core/types/int){
    std/core/(-)(i, 1);
  };
fun delay // inline size: 3
  = forall<a,(e :: E)> fn(action: () -> (e :: E) a){
    std/core/Delay<(e :: E),a>((std/core/types/ref<(std/core/types/global :: H),(std/core/types/either :: (V, V) -> V)<() -> (e :: E) a,a>>((std/core/types/Left<() -> (e :: E) a,a>(action)))));
  };
fun exp10 // inline size: 1
  = fn(exp: std/core/types/int){
    std/core/mul-exp10(1, exp);
  };
fun is-neg.2 // inline size: 6
  = fn(i: std/core/types/int){
    val x.23251 : std/core/types/order
          = std/core/sign(i);
    std/core/(==.1)((std/core/int.5(x.23251)), (match (std/core/types/Lt) {
        ((std/core/types/Lt() : std/core/types/order ) as .pat: std/core/types/order)
           -> std/core/(-)(0, 1);
        ((std/core/types/Eq() : std/core/types/order ) as .pat0: std/core/types/order)
           -> 0;
        ((.skip std/core/types/Gt() : std/core/types/order ) as .pat1: std/core/types/order)
           -> 1;
      }));
  };
fun is-neg.3 // inline size: 1
  = fn(d: std/core/types/double){
    std/core/(<.4)(d, 0.0);
  };
fun divmod-exp10 // inline size: 9
  = fn(i: std/core/types/int, n: std/core/types/int){
    match ((std/core/cdivmod-exp10(i, n))) {
      ((.skip std/core/types/(,)((cq: std/core/types/int) : std/core/types/int, (cr: std/core/types/int) : std/core/types/int) : (std/core/types/int, std/core/types/int) ) as .pat: (std/core/types/int, std/core/types/int))
         -> (match ((std/core/types/(!)((std/core/is-neg.2(cr))))) {
          ((std/core/types/True() : std/core/types/bool ) as .pat0: std/core/types/bool)
             -> std/core/types/(,)<std/core/types/int,std/core/types/int>(cq, cr);
          ((.skip std/core/types/False() : std/core/types/bool ) as .pat1: std/core/types/bool)
             -> std/core/types/(,)<std/core/types/int,std/core/types/int>((std/core/dec(cq)), (std/core/(+)(cr, (std/core/exp10(n)))));
        });
    };
  };
recursive fun drop // inline size: 4
  = forall<a> fn(xs: (list :: V -> V)<a>, n: std/core/types/int){
    (match (xs) {
      ((std/core/Cons((.pat0: a) : a, (xx: (list :: V -> V)<a>) : (list :: V -> V)<a>) : (list :: V -> V)<a> ) as .pat: ((list :: V -> V)<a>))
         | std/core/(>.1)(n, 0) -> std/core/drop<a>(xx, (std/core/(-)(n, 1)));
      (.pat1: ((list :: V -> V)<a>))
         -> xs;
    });
  };
recursive fun drop-while // inline size: 8
  = forall<a,(e :: E)> fn<(e :: E)>(xs: (list :: V -> V)<a>, predicate: (a) -> (e :: E) std/core/types/bool){
    (match (xs) {
      ((std/core/Cons((x: a) : a, (xx: (list :: V -> V)<a>) : (list :: V -> V)<a>) : (list :: V -> V)<a> ) as .pat: ((list :: V -> V)<a>))
         -> val x0.23253 : std/core/types/bool
                  = predicate(x);
        (match ((std/core/hnd/yielding())) {
          ((std/core/types/True() : std/core/types/bool ) as .pat0: std/core/types/bool)
             -> std/core/hnd/yield-extend<std/core/types/bool,(list :: V -> V)<a>,(e :: E)>((fn<(e :: E)>(.y.120: std/core/types/bool){
              (std/core/.mlift22881-drop-while<a,(e :: E)>(predicate, xs, xx, .y.120));
            }));
          ((.skip std/core/types/False() : std/core/types/bool ) as .pat00: std/core/types/bool)
             -> (match (x0.23253) {
              ((std/core/types/True() : std/core/types/bool ) as .pat01: std/core/types/bool)
                 -> std/core/drop-while<a,(e :: E)>(xx, predicate);
              ((.skip std/core/types/False() : std/core/types/bool ) as .pat1: std/core/types/bool)
                 -> xs;
            });
        });
      ((.skip std/core/Nil() : (list :: V -> V)<a> ) as .pat2: ((list :: V -> V)<a>))
         -> std/core/Nil<a>;
    });
  };
fun ends-with // inline size: 8
  = fn(s: std/core/types/string, post: std/core/types/string){
    match ((std/core/xends-with(s, post))) {
      ((std/core/types/True() : std/core/types/bool ) as .pat: std/core/types/bool)
         -> std/core/types/Just<sslice>((std/core/Sslice(s, (std/core/size_t(0)), (std/core/(-.2)((std/core/length(s)), (std/core/length(post)))))));
      ((.skip std/core/types/False() : std/core/types/bool ) as .pat0: std/core/types/bool)
         -> std/core/types/Nothing<sslice>;
    };
  };
fun exn // inline size: 1
  = forall<a> fn<<(std/core/types/handled :: HX -> X)<(exn :: HX)>>>(err: (error :: V -> V)<a>){
    std/core/throw.1<a>(err);
  };
fun exp2 // inline size: 1
  = fn(exp: std/core/types/int){
    std/core/pow(2, exp);
  };
recursive fun filter // inline size: 4
  = forall<a,(e :: E)> fn<(e :: E)>(xs: (list :: V -> V)<a>, pred: (a) -> (e :: E) std/core/types/bool){
    (match ((std/core/hnd/.evv-is-affine())) {
      ((std/core/types/True() : std/core/types/bool ) as .pat: std/core/types/bool)
         -> std/core/.ctail-filter<a,(e :: E)>(xs, pred, (std/core/types/CTailNil<(list :: V -> V)<a>>));
      (.pat0: std/core/types/bool)
         -> std/core/.ctailm-filter<a,(e :: E)>(xs, pred, (fn(.ctail.22814: (list :: V -> V)<a>){
            .ctail.22814;
          }));
    });
  };
recursive fun filter-map // inline size: 4
  = forall<a,b,(e :: E)> fn<(e :: E)>(xs: (list :: V -> V)<a>, pred: (a) -> (e :: E) (std/core/types/maybe :: V -> V)<b>){
    (match ((std/core/hnd/.evv-is-affine())) {
      ((std/core/types/True() : std/core/types/bool ) as .pat: std/core/types/bool)
         -> std/core/.ctail-filter-map<a,b,(e :: E)>(xs, pred, (std/core/types/CTailNil<(list :: V -> V)<b>>));
      (.pat0: std/core/types/bool)
         -> std/core/.ctailm-filter-map<a,b,(e :: E)>(xs, pred, (fn(.ctail.22818: (list :: V -> V)<b>){
            .ctail.22818;
          }));
    });
  };
fun is-zero.2 // inline size: 1
  = fn(d: std/core/types/double){
    std/core/(==.2)(d, 0.0);
  };
fun find // inline size: 4
  = forall<a> fn(xs: (list :: V -> V)<a>, pred: (a) -> std/core/types/bool){
    std/core/foreach-while<a,a,(std/core/types/(<>) :: E)>(xs, (fn(x: a){
        (match ((pred(x))) {
          ((std/core/types/True() : std/core/types/bool ) as .pat: std/core/types/bool)
             -> std/core/types/Just<a>(x);
          ((.skip std/core/types/False() : std/core/types/bool ) as .pat0: std/core/types/bool)
             -> std/core/types/Nothing<a>;
        });
      }));
  };
fun find.1 // inline size: 7
  = fn(s: std/core/types/string, sub: std/core/types/string){
    val i : std/core/types/size_t
          = std/core/xindex-of(s, sub);
    match ((std/core/is-zero.1(i))) {
      ((std/core/types/True() : std/core/types/bool ) as .pat: std/core/types/bool)
         -> std/core/types/Nothing<sslice>;
      ((.skip std/core/types/False() : std/core/types/bool ) as .pat0: std/core/types/bool)
         -> std/core/types/Just<sslice>((std/core/Sslice(s, (std/core/decr.1(i)), (std/core/length(sub)))));
    };
  };
fun find-last // inline size: 7
  = fn(s: std/core/types/string, sub: std/core/types/string){
    val i : std/core/types/size_t
          = std/core/xlast-index-of(s, sub);
    match ((std/core/is-zero.1(i))) {
      ((std/core/types/True() : std/core/types/bool ) as .pat: std/core/types/bool)
         -> std/core/types/Nothing<sslice>;
      ((.skip std/core/types/False() : std/core/types/bool ) as .pat0: std/core/types/bool)
         -> std/core/types/Just<sslice>((std/core/Sslice(s, (std/core/decr.1(i)), (std/core/length(sub)))));
    };
  };
fun find-maybe // inline size: 1
  = forall<a,b> fn(xs: (list :: V -> V)<a>, pred: (a) -> (std/core/types/maybe :: V -> V)<b>){
    std/core/foreach-while<a,b,(std/core/types/(<>) :: E)>(xs, pred);
  };
recursive fun flatmap-maybe // inline size: 4
  = forall<a,b,(e :: E)> fn<(e :: E)>(xs: (list :: V -> V)<a>, f: (a) -> (e :: E) (std/core/types/maybe :: V -> V)<b>){
    (match ((std/core/hnd/.evv-is-affine())) {
      ((std/core/types/True() : std/core/types/bool ) as .pat: std/core/types/bool)
         -> std/core/.ctail-flatmap-maybe<a,b,(e :: E)>(xs, f, (std/core/types/CTailNil<(list :: V -> V)<b>>));
      (.pat0: std/core/types/bool)
         -> std/core/.ctailm-flatmap-maybe<a,b,(e :: E)>(xs, f, (fn(.ctail.22822: (list :: V -> V)<b>){
            .ctail.22822;
          }));
    });
  };
fun inc // inline size: 1
  = fn(i: std/core/types/int){
    std/core/(+)(i, 1);
  };
recursive fun fold-int // inline size: 5
  = forall<a> fn(start: std/core/types/int, end: std/core/types/int, init: a, f: (std/core/types/int, a) -> a){
    (match ((std/core/(>=.1)(start, end))) {
      ((std/core/types/True() : std/core/types/bool ) as .pat: std/core/types/bool)
         -> init;
      ((.skip std/core/types/False() : std/core/types/bool ) as .pat0: std/core/types/bool)
         -> val x : a
                  = f(start, init);
        std/core/fold-int<a>((std/core/inc(start)), end, x, f);
    });
  };
recursive fun foldl // inline size: 7
  = forall<a,b,(e :: E)> fn<(e :: E)>(xs: (list :: V -> V)<a>, z: b, f: (b, a) -> (e :: E) b){
    (match (xs) {
      ((std/core/Cons((x: a) : a, (xx: (list :: V -> V)<a>) : (list :: V -> V)<a>) : (list :: V -> V)<a> ) as .pat: ((list :: V -> V)<a>))
         -> val x0.23321 : b
                  = f(z, x);
        (match ((std/core/hnd/yielding())) {
          ((std/core/types/True() : std/core/types/bool ) as .pat0: std/core/types/bool)
             -> std/core/hnd/yield-extend<b,b,(e :: E)>((fn<(e :: E)>(.y.166: b){
              (std/core/.mlift22889-foldl<b,(e :: E),a>(f, xx, .y.166));
            }));
          ((.skip std/core/types/False() : std/core/types/bool ) as .pat00: std/core/types/bool)
             -> std/core/foldl<a,b,(e :: E)>(xx, x0.23321, f);
        });
      ((.skip std/core/Nil() : (list :: V -> V)<a> ) as .pat01: ((list :: V -> V)<a>))
         -> z;
    });
  };
fun reverse // inline size: 1
  = forall<a> fn(xs: (list :: V -> V)<a>){
    std/core/.lift22728-reverse-append<a>((std/core/Nil<a>), xs);
  };
fun foldr // inline size: 3
  = forall<a,b,(e :: E)> fn<(e :: E)>(xs: (list :: V -> V)<a>, z: b, f: (a, b) -> (e :: E) b){
    std/core/foldl<a,b,(e :: E)>((std/core/reverse<a>(xs)), z, (fn<(e :: E)>(x: b, y: a){
        (f(y, x));
      }));
  };
recursive fun .lift22737-for // inline size: 9
  = forall<(e :: E)> fn<(e :: E)>(action: (std/core/types/int) -> (e :: E) (), end: std/core/types/int, i: std/core/types/int){
    (match ((std/core/(<=.1)(i, end))) {
      ((std/core/types/True() : std/core/types/bool ) as .pat: std/core/types/bool)
         -> val x.23337 : ()
                  = action(i);
        (match ((std/core/hnd/yielding())) {
          ((std/core/types/True() : std/core/types/bool ) as .pat0: std/core/types/bool)
             -> std/core/hnd/yield-extend<(),(),(e :: E)>((fn<(e :: E)>(wild_: ()){
              (std/core/.mlift22890-op<(e :: E)>(action, end, i, wild_));
            }));
          ((.skip std/core/types/False() : std/core/types/bool ) as .pat00: std/core/types/bool)
             -> val i0.22766 : std/core/types/int
                      = std/core/inc(i);
            std/core/.lift22737-for<(e :: E)>(action, end, i0.22766);
        });
      ((.skip std/core/types/False() : std/core/types/bool ) as .pat01: std/core/types/bool)
         -> std/core/types/();
    });
  };
fun for // inline size: 1
  = forall<(e :: E)> fn<(e :: E)>(start: std/core/types/int, end: std/core/types/int, action: (std/core/types/int) -> (e :: E) ()){
    std/core/.lift22737-for<(e :: E)>(action, end, start);
  };
fun for-while // inline size: 1
  = forall<a,(e :: E)> fn<(e :: E)>(start: std/core/types/int, end: std/core/types/int, action: (std/core/types/int) -> (e :: E) (std/core/types/maybe :: V -> V)<a>){
    std/core/.lift22738-for-while<a,(e :: E)>(action, end, start);
  };
fun foreach-indexed // inline size: 9
  = forall<a,(e :: E)> fn<(e :: E)>(xs: (list :: V -> V)<a>, action: (std/core/types/int, a) -> (e :: E) ()){
    val loc : (std/core/types/local-var :: (H, V) -> V)<(std/core/types/global :: H),std/core/types/int>
      = std/core/types/local-new<std/core/types/int,<(std/core/types/div :: E)|(e :: E)>,(std/core/types/global :: H)>(0);
    val res : ()
      = std/core/foreach<a,<(std/core/types/local :: H -> X)<(std/core/types/global :: H)>|(e :: E)>>(xs, (fn<<(std/core/types/local :: H -> X)<(std/core/types/global :: H)>|(e :: E)>>(x: a){
          val x0.23354 : std/core/types/int
                = (std/core/types/local-get<std/core/types/int,(e :: E),(std/core/types/global :: H)>(loc));
          (match ((std/core/hnd/yielding())) {
            ((std/core/types/True() : std/core/types/bool ) as .pat: std/core/types/bool)
               -> std/core/hnd/yield-extend<std/core/types/int,(),<(std/core/types/local :: H -> X)<(std/core/types/global :: H)>|(e :: E)>>((fn<<(std/core/types/local :: H -> X)<(std/core/types/global :: H)>|(e :: E)>>(j: std/core/types/int){
                (std/core/.mlift22894-foreach-indexed<(std/core/types/global :: H),a,(e :: E)>(action, loc, x, j));
              }));
            ((.skip std/core/types/False() : std/core/types/bool ) as .pat0: std/core/types/bool)
               -> std/core/.mlift22894-foreach-indexed<(std/core/types/global :: H),a,(e :: E)>(action, loc, x, x0.23354);
          });
        }));
    std/core/hnd/prompt-local-var<std/core/types/int,(),(std/core/types/global :: H)>(loc, res);
  };
fun foreach-indexed.1 // inline size: 7
  = forall<a,(e :: E)> fn<(e :: E)>(v: (std/core/types/vector :: V -> V)<a>, f: (a, std/core/types/int) -> (e :: E) ()){
    val start.23358 : std/core/types/size_t
      = std/core/size_t(0);
    val end.23359 : std/core/types/size_t
      = std/core/decr.1((std/core/lengthz<a>(v)));
    std/core/.lift22732-forz<(e :: E)>((fn<(e :: E)>(i: std/core/types/size_t){
        val x.23361 : a
              = (std/core/unsafe-idx<a>(v, i));
        (f(x.23361, (std/core/int.2(i))));
      }), end.23359, start.23358);
  };
fun print // inline size: 1
  = fn<<(console :: X)>>(s: std/core/types/string){
    std/core/prints(s);
  };
fun print.1 // inline size: 2
  = fn<<(console :: X)>>(i: std/core/types/int){
    std/core/prints((std/core/show(i)));
  };
fun print.2 // inline size: 2
  = fn<<(console :: X)>>(d: std/core/types/double){
    std/core/prints((std/core/show.1(d, (std/core/types/None<std/core/types/int>))));
  };
fun print.3 // inline size: 2
  = fn<<(console :: X)>>(b: std/core/types/bool){
    std/core/prints((std/core/show.4(b)));
  };
fun print.4 // inline size: 2
  = fn<<(console :: X)>>(c: std/core/types/char){
    std/core/prints((std/core/string(c)));
  };
fun print.5 // inline size: 1
  = fn<<(console :: X)>>(u: ()){
    std/core/prints("()");
  };
fun gprint // inline size: 2
  = forall<a> fn<<(console :: X)>>(x: a){
    val s.23364 : std/core/types/string
          = std/core/gshow<a>(x);
    std/core/prints(s.23364);
  };
fun gprintln // inline size: 2
  = forall<a> fn<<(console :: X)>>(x: a){
    val s.23365 : std/core/types/string
          = std/core/gshow<a>(x);
    std/core/printsln(s.23365);
  };
fun head.1 // inline size: 2
  = forall<a> fn(xs: (list :: V -> V)<a>){
    (match (xs) {
      ((std/core/Cons((x: a) : a, (.pat0: (list :: V -> V)<a>) : (list :: V -> V)<a>) : (list :: V -> V)<a> ) as .pat: ((list :: V -> V)<a>))
         -> std/core/types/Just<a>(x);
      ((.skip std/core/Nil() : (list :: V -> V)<a> ) as .pat1: ((list :: V -> V)<a>))
         -> std/core/types/Nothing<a>;
    });
  };
fun head.2 // inline size: 1
  = forall<a> fn(xs: (list :: V -> V)<a>, default: a){
    (match (xs) {
      ((std/core/Cons((x: a) : a, (.pat0: (list :: V -> V)<a>) : (list :: V -> V)<a>) : (list :: V -> V)<a> ) as .pat: ((list :: V -> V)<a>))
         -> x;
      ((.skip std/core/Nil() : (list :: V -> V)<a> ) as .pat1: ((list :: V -> V)<a>))
         -> default;
    });
  };
fun head.3 // inline size: 8
  = fn(s: std/core/types/string){
    std/core/string.3(val slice : sslice
                            = (std/core/first1(s));
    (match ((std/core/(==.1)((match ((std/core/types/None<std/core/types/int>)) {
        ((std/core/types/Optional((.n.13060: std/core/types/int) : std/core/types/int) : (std/core/types/optional :: V -> V)<std/core/types/int> ) as .pat: ((std/core/types/optional :: V -> V)<std/core/types/int>))
           -> .n.13060;
        ((.skip std/core/types/None() : (std/core/types/optional :: V -> V)<std/core/types/int> ) as .pat0: ((std/core/types/optional :: V -> V)<std/core/types/int>))
           -> 1;
      }), 1))) {
      ((std/core/types/True() : std/core/types/bool ) as .pat1: std/core/types/bool)
         -> slice;
      ((.skip std/core/types/False() : std/core/types/bool ) as .pat2: std/core/types/bool)
         -> std/core/extend(slice, (std/core/(-)((match ((std/core/types/None<std/core/types/int>)) {
              ((std/core/types/Optional((.n.130600: std/core/types/int) : std/core/types/int) : (std/core/types/optional :: V -> V)<std/core/types/int> ) as .pat3: ((std/core/types/optional :: V -> V)<std/core/types/int>))
                 -> .n.130600;
              ((.skip std/core/types/None() : (std/core/types/optional :: V -> V)<std/core/types/int> ) as .pat00: ((std/core/types/optional :: V -> V)<std/core/types/int>))
                 -> 1;
            }), 1)));
    }));
  };
fun head-char // inline size: 2
  = fn(s: std/core/types/string){
    std/core/foreach-while.1<std/core/types/char,(std/core/types/(<>) :: E)>((std/core/slice(s)), (std/core/types/Just<std/core/types/char>));
  };
recursive fun index-of-acc // inline size: 6
  = forall<a> fn(xs: (list :: V -> V)<a>, pred: (a) -> std/core/types/bool, idx: std/core/types/int){
    (match (xs) {
      ((std/core/Nil() : (list :: V -> V)<a> ) as .pat: ((list :: V -> V)<a>))
         -> std/core/(-)(0, 1);
      ((.skip std/core/Cons((x: a) : a, (xx: (list :: V -> V)<a>) : (list :: V -> V)<a>) : (list :: V -> V)<a> ) as .pat0: ((list :: V -> V)<a>))
         -> (match ((pred(x))) {
          ((std/core/types/True() : std/core/types/bool ) as .pat1: std/core/types/bool)
             -> idx;
          ((.skip std/core/types/False() : std/core/types/bool ) as .pat2: std/core/types/bool)
             -> std/core/index-of-acc<a>(xx, pred, (std/core/(+)(idx, 1)));
        });
    });
  };
fun index-of // inline size: 1
  = forall<a> fn(xs: (list :: V -> V)<a>, pred: (a) -> std/core/types/bool){
    std/core/index-of-acc<a>(xs, pred, 0);
  };
recursive fun init // inline size: 1
  = forall<a> fn(xs: (list :: V -> V)<a>){
    std/core/.ctail-init<a>(xs, (std/core/types/CTailNil<(list :: V -> V)<a>>));
  };
fun is-lower // inline size: 3
  = fn(c: std/core/types/char){
    match ((std/core/(>=)(c, 'a'))) {
      ((std/core/types/True() : std/core/types/bool ) as .pat: std/core/types/bool)
         -> std/core/(<=)(c, 'z');
      (.pat0: std/core/types/bool)
         -> std/core/types/False;
    };
  };
fun is-upper // inline size: 3
  = fn(c: std/core/types/char){
    match ((std/core/(>=)(c, 'A'))) {
      ((std/core/types/True() : std/core/types/bool ) as .pat: std/core/types/bool)
         -> std/core/(<=)(c, 'Z');
      (.pat0: std/core/types/bool)
         -> std/core/types/False;
    };
  };
fun is-alpha // inline size: 3
  = fn(c: std/core/types/char){
    match ((std/core/is-lower(c))) {
      ((std/core/types/True() : std/core/types/bool ) as .pat: std/core/types/bool)
         -> std/core/types/True;
      (.pat0: std/core/types/bool)
         -> std/core/is-upper(c);
    };
  };
fun is-digit // inline size: 3
  = fn(c: std/core/types/char){
    match ((std/core/(>=)(c, '0'))) {
      ((std/core/types/True() : std/core/types/bool ) as .pat: std/core/types/bool)
         -> std/core/(<=)(c, '9');
      (.pat0: std/core/types/bool)
         -> std/core/types/False;
    };
  };
fun is-alpha-num // inline size: 3
  = fn(c: std/core/types/char){
    match ((std/core/is-alpha(c))) {
      ((std/core/types/True() : std/core/types/bool ) as .pat: std/core/types/bool)
         -> std/core/types/True;
      (.pat0: std/core/types/bool)
         -> std/core/is-digit(c);
    };
  };
fun is-ascii // inline size: 1
  = fn(c: std/core/types/char){
    std/core/(<=)(c, '\x7F');
  };
fun is-control // inline size: 1
  = fn(c: std/core/types/char){
    std/core/(<)(c, ' ');
  };
fun is-hex-digit // inline size: 9
  = fn(c: std/core/types/char){
    match ((std/core/is-digit(c))) {
      ((std/core/types/True() : std/core/types/bool ) as .pat: std/core/types/bool)
         -> std/core/types/True;
      (.pat0: std/core/types/bool)
         -> (match ((match ((std/core/(>=)(c, 'a'))) {
          ((std/core/types/True() : std/core/types/bool ) as .pat1: std/core/types/bool)
             -> std/core/(<=)(c, 'f');
          (.pat2: std/core/types/bool)
             -> std/core/types/False;
        })) {
          ((std/core/types/True() : std/core/types/bool ) as .pat3: std/core/types/bool)
             -> std/core/types/True;
          (.pat4: std/core/types/bool)
             -> (match ((std/core/(>=)(c, 'A'))) {
              ((std/core/types/True() : std/core/types/bool ) as .pat5: std/core/types/bool)
                 -> std/core/(<=)(c, 'F');
              (.pat6: std/core/types/bool)
                 -> std/core/types/False;
            });
        });
    };
  };
fun is-notempty // inline size: 1
  = fn(slice: sslice){
    std/core/is-pos.1((match (slice) {
      ((.skip std/core/Sslice((.pat0: std/core/types/string) : std/core/types/string, (.pat1: std/core/types/size_t) : std/core/types/size_t, (.x: std/core/types/size_t) : std/core/types/size_t) : sslice ) as .pat: sslice)
         -> .x;
    }));
  };
fun is-notempty.1 // inline size: 1
  = fn(s: std/core/types/string){
    std/core/(!=.3)(s, "");
  };
fun is-white // inline size: 7
  = fn(c: std/core/types/char){
    match ((std/core/(==)(c, ' '))) {
      ((std/core/types/True() : std/core/types/bool ) as .pat: std/core/types/bool)
         -> std/core/types/True;
      (.pat0: std/core/types/bool)
         -> (match ((std/core/(==)(c, '\x09'))) {
          ((std/core/types/True() : std/core/types/bool ) as .pat1: std/core/types/bool)
             -> std/core/types/True;
          (.pat2: std/core/types/bool)
             -> (match ((std/core/(==)(c, '\x0A'))) {
              ((std/core/types/True() : std/core/types/bool ) as .pat3: std/core/types/bool)
                 -> std/core/types/True;
              (.pat4: std/core/types/bool)
                 -> std/core/(==)(c, '\x0D');
            });
        });
    };
  };
fun join-end // inline size: 3
  = fn(xs: (list :: V -> V)<std/core/types/string>, end: std/core/types/string){
    match (xs) {
      ((std/core/Nil() : (list :: V -> V)<std/core/types/string> ) as .pat: ((list :: V -> V)<std/core/types/string>))
         -> "";
      (.pat0: ((list :: V -> V)<std/core/types/string>))
         -> std/core/(+.6)((std/core/joinsep(xs, end)), end);
    };
  };
recursive fun last // inline size: 4
  = forall<a> fn(xs: (list :: V -> V)<a>){
    (match (xs) {
      ((std/core/Cons((x: a) : a, ((std/core/Nil() : (list :: V -> V)<a> ) as .pat0: (list :: V -> V)<a>) : (list :: V -> V)<a>) : (list :: V -> V)<a> ) as .pat: ((list :: V -> V)<a>))
         -> std/core/types/Just<a>(x);
      ((std/core/Cons((.pat2: a) : a, (xx: (list :: V -> V)<a>) : (list :: V -> V)<a>) : (list :: V -> V)<a> ) as .pat1: ((list :: V -> V)<a>))
         -> std/core/last<a>(xx);
      ((.skip std/core/Nil() : (list :: V -> V)<a> ) as .pat3: ((list :: V -> V)<a>))
         -> std/core/types/Nothing<a>;
    });
  };
recursive fun last.1 // inline size: 3
  = forall<a> fn(xs: (list :: V -> V)<a>, default: a){
    (match (xs) {
      ((std/core/Cons((x: a) : a, ((std/core/Nil() : (list :: V -> V)<a> ) as .pat0: (list :: V -> V)<a>) : (list :: V -> V)<a>) : (list :: V -> V)<a> ) as .pat: ((list :: V -> V)<a>))
         -> x;
      ((std/core/Cons((.pat2: a) : a, (xx: (list :: V -> V)<a>) : (list :: V -> V)<a>) : (list :: V -> V)<a> ) as .pat1: ((list :: V -> V)<a>))
         -> std/core/last.1<a>(xx, default);
      ((.skip std/core/Nil() : (list :: V -> V)<a> ) as .pat3: ((list :: V -> V)<a>))
         -> default;
    });
  };
fun last.2 // inline size: 10
  = fn(s: std/core/types/string, n: (std/core/types/optional :: V -> V)<std/core/types/int>){
    val slice : sslice
          = std/core/last1(s);
    match ((std/core/(==.1)((match (n) {
        ((std/core/types/Optional((.n.17702: std/core/types/int) : std/core/types/int) : (std/core/types/optional :: V -> V)<std/core/types/int> ) as .pat: ((std/core/types/optional :: V -> V)<std/core/types/int>))
           -> .n.17702;
        ((.skip std/core/types/None() : (std/core/types/optional :: V -> V)<std/core/types/int> ) as .pat0: ((std/core/types/optional :: V -> V)<std/core/types/int>))
           -> 1;
      }), 1))) {
      ((std/core/types/True() : std/core/types/bool ) as .pat1: std/core/types/bool)
         -> slice;
      ((.skip std/core/types/False() : std/core/types/bool ) as .pat2: std/core/types/bool)
         -> std/core/extend((std/core/advance(slice, (std/core/(-)(1, (match (n) {
                ((std/core/types/Optional((.n.177020: std/core/types/int) : std/core/types/int) : (std/core/types/optional :: V -> V)<std/core/types/int> ) as .pat3: ((std/core/types/optional :: V -> V)<std/core/types/int>))
                   -> .n.177020;
                ((.skip std/core/types/None() : (std/core/types/optional :: V -> V)<std/core/types/int> ) as .pat00: ((std/core/types/optional :: V -> V)<std/core/types/int>))
                   -> 1;
              }))))), (std/core/(-)((match (n) {
              ((std/core/types/Optional((.n.177021: std/core/types/int) : std/core/types/int) : (std/core/types/optional :: V -> V)<std/core/types/int> ) as .pat4: ((std/core/types/optional :: V -> V)<std/core/types/int>))
                 -> .n.177021;
              ((.skip std/core/types/None() : (std/core/types/optional :: V -> V)<std/core/types/int> ) as .pat01: ((std/core/types/optional :: V -> V)<std/core/types/int>))
                 -> 1;
            }), 1)));
    };
  };
recursive fun take // inline size: 1
  = forall<a> fn(xs: (list :: V -> V)<a>, n: std/core/types/int){
    std/core/.ctail-take<a>(xs, n, (std/core/types/CTailNil<(list :: V -> V)<a>>));
  };
fun split // inline size: 3
  = forall<a> fn(xs: (list :: V -> V)<a>, n: std/core/types/int){
    std/core/types/(,)<(list :: V -> V)<a>,(list :: V -> V)<a>>((std/core/take<a>(xs, n)), (std/core/drop<a>(xs, n)));
  };
fun split.1 // inline size: 2
  = fn(s: std/core/types/string, sep: std/core/types/string){
    val v.23381 : (std/core/types/vector :: V -> V)<std/core/types/string>
          = std/core/splitv(s, sep);
    std/core/vlist<std/core/types/string>(v.23381, (std/core/types/None<(list :: V -> V)<std/core/types/string>>));
  };
fun split.2 // inline size: 3
  = fn(s: std/core/types/string, sep: std/core/types/string, n: std/core/types/int){
    val v.23382 : (std/core/types/vector :: V -> V)<std/core/types/string>
          = std/core/splitv.1(s, sep, (std/core/size_t(n)));
    std/core/vlist<std/core/types/string>(v.23382, (std/core/types/None<(list :: V -> V)<std/core/types/string>>));
  };
fun lines // inline size: 2
  = fn(s: std/core/types/string){
    val v.23385 : (std/core/types/vector :: V -> V)<std/core/types/string>
          = std/core/splitv(s, "\x0A");
    std/core/vlist<std/core/types/string>(v.23385, (std/core/types/None<(list :: V -> V)<std/core/types/string>>));
  };
fun lookup // inline size: 4
  = forall<a,b> fn(xs: (list :: V -> V)<(a, b)>, pred: (a) -> std/core/types/bool){
    std/core/foreach-while<(a, b),b,(std/core/types/(<>) :: E)>(xs, (fn(kv: (a, b)){
        (match ((pred((match (kv) {
          ((.skip std/core/types/(,)((.x: a) : a, (.pat0: b) : b) : (a, b) ) as .pat: (a, b))
             -> .x;
        })))) {
          ((std/core/types/True() : std/core/types/bool ) as .pat1: std/core/types/bool)
             -> std/core/types/Just<b>((match (kv) {
              ((.skip std/core/types/(,)((.pat00: a) : a, (.x0: b) : b) : (a, b) ) as .pat2: (a, b))
                 -> .x0;
            }));
          ((.skip std/core/types/False() : std/core/types/bool ) as .pat01: std/core/types/bool)
             -> std/core/types/Nothing<b>;
        });
      }));
  };
fun map-indexed // inline size: 1
  = forall<a,b,(e :: E)> fn<(e :: E)>(xs: (list :: V -> V)<a>, f: (idx : std/core/types/int, value : a) -> (e :: E) b){
    std/core/.lift22739-map-indexed<a,b,(e :: E)>(f, xs, 0);
  };
fun map-indexed-peek // inline size: 1
  = forall<a,b,(e :: E)> fn<(e :: E)>(xs: (list :: V -> V)<a>, f: (idx : std/core/types/int, value : a, rest : (list :: V -> V)<a>) -> (e :: E) b){
    std/core/.lift22740-map-indexed-peek<a,b,(e :: E)>(f, xs, 0);
  };
recursive fun map-while // inline size: 4
  = forall<a,b,(e :: E)> fn<(e :: E)>(xs: (list :: V -> V)<a>, action: (a) -> (e :: E) (std/core/types/maybe :: V -> V)<b>){
    (match ((std/core/hnd/.evv-is-affine())) {
      ((std/core/types/True() : std/core/types/bool ) as .pat: std/core/types/bool)
         -> std/core/.ctail-map-while<a,b,(e :: E)>(xs, action, (std/core/types/CTailNil<(list :: V -> V)<b>>));
      (.pat0: std/core/types/bool)
         -> std/core/.ctailm-map-while<a,b,(e :: E)>(xs, action, (fn(.ctail.22830: (list :: V -> V)<b>){
            .ctail.22830;
          }));
    });
  };
fun max // inline size: 2
  = fn(i: std/core/types/int, j: std/core/types/int){
    match ((std/core/(>=.1)(i, j))) {
      ((std/core/types/True() : std/core/types/bool ) as .pat: std/core/types/bool)
         -> i;
      ((.skip std/core/types/False() : std/core/types/bool ) as .pat0: std/core/types/bool)
         -> j;
    };
  };
fun max.1 // inline size: 2
  = fn(x: std/core/types/double, y: std/core/types/double){
    match ((std/core/(>=.2)(x, y))) {
      ((std/core/types/True() : std/core/types/bool ) as .pat: std/core/types/bool)
         -> x;
      ((.skip std/core/types/False() : std/core/types/bool ) as .pat0: std/core/types/bool)
         -> y;
    };
  };
fun maximum // inline size: 3
  = fn(xs: (list :: V -> V)<std/core/types/int>, default: (std/core/types/optional :: V -> V)<std/core/types/int>){
    match (xs) {
      ((std/core/Nil() : (list :: V -> V)<std/core/types/int> ) as .pat1: ((list :: V -> V)<std/core/types/int>))
         -> (match (default) {
          ((std/core/types/Optional((.default.18561: std/core/types/int) : std/core/types/int) : (std/core/types/optional :: V -> V)<std/core/types/int> ) as .pat: ((std/core/types/optional :: V -> V)<std/core/types/int>))
             -> .default.18561;
          ((.skip std/core/types/None() : (std/core/types/optional :: V -> V)<std/core/types/int> ) as .pat0: ((std/core/types/optional :: V -> V)<std/core/types/int>))
             -> 0;
        });
      ((.skip std/core/Cons((x: std/core/types/int) : std/core/types/int, (xx: (list :: V -> V)<std/core/types/int>) : (list :: V -> V)<std/core/types/int>) : (list :: V -> V)<std/core/types/int> ) as .pat2: ((list :: V -> V)<std/core/types/int>))
         -> std/core/foldl<std/core/types/int,std/core/types/int,(std/core/types/(<>) :: E)>(xx, x, std/core/max);
    };
  };
fun maximum.1 // inline size: 2
  = fn(xs: (list :: V -> V)<std/core/types/double>){
    match (xs) {
      ((std/core/Nil() : (list :: V -> V)<std/core/types/double> ) as .pat: ((list :: V -> V)<std/core/types/double>))
         -> 0.0;
      ((.skip std/core/Cons((x: std/core/types/double) : std/core/types/double, (xx: (list :: V -> V)<std/core/types/double>) : (list :: V -> V)<std/core/types/double>) : (list :: V -> V)<std/core/types/double> ) as .pat0: ((list :: V -> V)<std/core/types/double>))
         -> std/core/foldl<std/core/types/double,std/core/types/double,(std/core/types/(<>) :: E)>(xx, x, std/core/max.1);
    };
  };
fun maybe // inline size: 2
  = forall<a,b,(e :: E)> fn<(e :: E)>(m: (std/core/types/maybe :: V -> V)<a>, onNothing: b, onJust: (a) -> (e :: E) b){
    (match (m) {
      ((std/core/types/Nothing() : (std/core/types/maybe :: V -> V)<a> ) as .pat: ((std/core/types/maybe :: V -> V)<a>))
         -> onNothing;
      ((.skip std/core/types/Just((x: a) : a) : (std/core/types/maybe :: V -> V)<a> ) as .pat0: ((std/core/types/maybe :: V -> V)<a>))
         -> onJust(x);
    });
  };
fun maybe.1 // inline size: 1
  = forall<a> fn(m: (std/core/types/maybe :: V -> V)<a>, nothing: a){
    std/core/default<a>(m, nothing);
  };
fun maybe.2 // inline size: 2
  = forall<a,b> fn(e: (std/core/types/either :: (V, V) -> V)<a,b>){
    (match (e) {
      ((std/core/types/Left((.pat0: a) : a) : (std/core/types/either :: (V, V) -> V)<a,b> ) as .pat: ((std/core/types/either :: (V, V) -> V)<a,b>))
         -> std/core/types/Nothing<b>;
      ((.skip std/core/types/Right((x: b) : b) : (std/core/types/either :: (V, V) -> V)<a,b> ) as .pat1: ((std/core/types/either :: (V, V) -> V)<a,b>))
         -> std/core/types/Just<b>(x);
    });
  };
fun maybe.3 // inline size: 2
  = forall<a> fn(xs: (list :: V -> V)<a>){
    (match (xs) {
      ((std/core/Nil() : (list :: V -> V)<a> ) as .pat: ((list :: V -> V)<a>))
         -> std/core/types/Nothing<a>;
      ((.skip std/core/Cons((x: a) : a, (.pat1: (list :: V -> V)<a>) : (list :: V -> V)<a>) : (list :: V -> V)<a> ) as .pat0: ((list :: V -> V)<a>))
         -> std/core/types/Just<a>(x);
    });
  };
fun maybe.4 // inline size: 2
  = fn(b: std/core/types/bool){
    match (b) {
      ((std/core/types/True() : std/core/types/bool ) as .pat: std/core/types/bool)
         -> std/core/types/Just<()>(std/core/types/());
      ((.skip std/core/types/False() : std/core/types/bool ) as .pat0: std/core/types/bool)
         -> std/core/types/Nothing<()>;
    };
  };
fun maybe.5 // inline size: 3
  = fn(i: std/core/types/int){
    match ((std/core/(==.1)(i, 0))) {
      ((std/core/types/True() : std/core/types/bool ) as .pat: std/core/types/bool)
         -> std/core/types/Nothing<std/core/types/int>;
      ((.skip std/core/types/False() : std/core/types/bool ) as .pat0: std/core/types/bool)
         -> std/core/types/Just<std/core/types/int>(i);
    };
  };
fun maybe.6 // inline size: 3
  = fn(s: std/core/types/string){
    match ((std/core/is-empty.2(s))) {
      ((std/core/types/True() : std/core/types/bool ) as .pat: std/core/types/bool)
         -> std/core/types/Nothing<std/core/types/string>;
      ((.skip std/core/types/False() : std/core/types/bool ) as .pat0: std/core/types/bool)
         -> std/core/types/Just<std/core/types/string>(s);
    };
  };
fun maybe.7 // inline size: 2
  = forall<a> fn(t: (error :: V -> V)<a>){
    (match (t) {
      ((std/core/Error(((.skip std/core/Exception((.pat1: std/core/types/string) : std/core/types/string, (.pat2: exception-info) : exception-info) : exception ) as .pat0: exception) : exception) : (error :: V -> V)<a> ) as .pat: ((error :: V -> V)<a>))
         -> std/core/types/Nothing<a>;
      ((.skip std/core/Ok((x: a) : a) : (error :: V -> V)<a> ) as .pat3: ((error :: V -> V)<a>))
         -> std/core/types/Just<a>(x);
    });
  };
fun min // inline size: 2
  = fn(i: std/core/types/int, j: std/core/types/int){
    match ((std/core/(<=.1)(i, j))) {
      ((std/core/types/True() : std/core/types/bool ) as .pat: std/core/types/bool)
         -> i;
      ((.skip std/core/types/False() : std/core/types/bool ) as .pat0: std/core/types/bool)
         -> j;
    };
  };
fun min.1 // inline size: 2
  = fn(x: std/core/types/double, y: std/core/types/double){
    match ((std/core/(<=.4)(x, y))) {
      ((std/core/types/True() : std/core/types/bool ) as .pat: std/core/types/bool)
         -> x;
      ((.skip std/core/types/False() : std/core/types/bool ) as .pat0: std/core/types/bool)
         -> y;
    };
  };
fun minimum // inline size: 3
  = fn(xs: (list :: V -> V)<std/core/types/int>, default: (std/core/types/optional :: V -> V)<std/core/types/int>){
    match (xs) {
      ((std/core/Nil() : (list :: V -> V)<std/core/types/int> ) as .pat1: ((list :: V -> V)<std/core/types/int>))
         -> (match (default) {
          ((std/core/types/Optional((.default.19162: std/core/types/int) : std/core/types/int) : (std/core/types/optional :: V -> V)<std/core/types/int> ) as .pat: ((std/core/types/optional :: V -> V)<std/core/types/int>))
             -> .default.19162;
          ((.skip std/core/types/None() : (std/core/types/optional :: V -> V)<std/core/types/int> ) as .pat0: ((std/core/types/optional :: V -> V)<std/core/types/int>))
             -> 0;
        });
      ((.skip std/core/Cons((x: std/core/types/int) : std/core/types/int, (xx: (list :: V -> V)<std/core/types/int>) : (list :: V -> V)<std/core/types/int>) : (list :: V -> V)<std/core/types/int> ) as .pat2: ((list :: V -> V)<std/core/types/int>))
         -> std/core/foldl<std/core/types/int,std/core/types/int,(std/core/types/(<>) :: E)>(xx, x, std/core/min);
    };
  };
fun minimum.1 // inline size: 2
  = fn(xs: (list :: V -> V)<std/core/types/double>){
    match (xs) {
      ((std/core/Nil() : (list :: V -> V)<std/core/types/double> ) as .pat: ((list :: V -> V)<std/core/types/double>))
         -> 0.0;
      ((.skip std/core/Cons((x: std/core/types/double) : std/core/types/double, (xx: (list :: V -> V)<std/core/types/double>) : (list :: V -> V)<std/core/types/double>) : (list :: V -> V)<std/core/types/double> ) as .pat0: ((list :: V -> V)<std/core/types/double>))
         -> std/core/foldl<std/core/types/double,std/core/types/double,(std/core/types/(<>) :: E)>(xx, x, std/core/min.1);
    };
  };
fun null.1 // inline size: 2
  = fn(i: std/core/types/int){
    std/core/null<std/core/types/int>((std/core/maybe.5(i)));
  };
fun null.2 // inline size: 2
  = fn(s: std/core/types/string){
    std/core/null<std/core/types/string>((std/core/maybe.6(s)));
  };
fun null.3 // inline size: 2
  = fn(b: std/core/types/bool){
    std/core/null<()>((std/core/maybe.4(b)));
  };
inline val null-const // inline size: 0
  = forall<a> std/core/null<a>((std/core/types/Nothing<a>));
fun pad-right // inline size: 9
  = fn(s: std/core/types/string, width: std/core/types/int, fill: (std/core/types/optional :: V -> V)<std/core/types/char>){
    val w : std/core/types/size_t
      = std/core/size_t(width);
    val n : std/core/types/size_t
      = std/core/length(s);
    match ((std/core/(<=.3)(w, n))) {
      ((std/core/types/True() : std/core/types/bool ) as .pat1: std/core/types/bool)
         -> s;
      ((.skip std/core/types/False() : std/core/types/bool ) as .pat2: std/core/types/bool)
         -> std/core/(+.6)(s, (std/core/repeatz((std/core/string((match (fill) {
              ((std/core/types/Optional((.fill.19741: std/core/types/char) : std/core/types/char) : (std/core/types/optional :: V -> V)<std/core/types/char> ) as .pat: ((std/core/types/optional :: V -> V)<std/core/types/char>))
                 -> .fill.19741;
              ((.skip std/core/types/None() : (std/core/types/optional :: V -> V)<std/core/types/char> ) as .pat0: ((std/core/types/optional :: V -> V)<std/core/types/char>))
                 -> ' ';
            }))), (std/core/(-.2)(w, n)))));
    };
  };
fun starts-with // inline size: 8
  = fn(s: std/core/types/string, pre: std/core/types/string){
    match ((std/core/xstarts-with(s, pre))) {
      ((std/core/types/True() : std/core/types/bool ) as .pat: std/core/types/bool)
         -> std/core/types/Just<sslice>((std/core/Sslice(s, (std/core/length(pre)), (std/core/(-.2)((std/core/length(s)), (std/core/length(pre)))))));
      ((.skip std/core/types/False() : std/core/types/bool ) as .pat0: std/core/types/bool)
         -> std/core/types/Nothing<sslice>;
    };
  };
recursive fun trim-left.1 // inline size: 6
  = fn(s: std/core/types/string, sub: std/core/types/string){
    match ((std/core/is-empty.2(sub))) {
      ((std/core/types/True() : std/core/types/bool ) as .pat: std/core/types/bool)
         -> s;
      ((.skip std/core/types/False() : std/core/types/bool ) as .pat0: std/core/types/bool)
         -> (match ((std/core/starts-with(s, sub))) {
          ((std/core/types/Just(((.skip std/core/Sslice((.pat2: std/core/types/string) : std/core/types/string, (.pat3: std/core/types/size_t) : std/core/types/size_t, (.pat4: std/core/types/size_t) : std/core/types/size_t) : sslice ) as slice: sslice) : sslice) : (std/core/types/maybe :: V -> V)<sslice> ) as .pat1: ((std/core/types/maybe :: V -> V)<sslice>))
             -> std/core/trim-left.1((std/core/string.3(slice)), sub);
          ((.skip std/core/types/Nothing() : (std/core/types/maybe :: V -> V)<sslice> ) as .pat5: ((std/core/types/maybe :: V -> V)<sslice>))
             -> s;
        });
    };
  };
recursive fun trim-right.1 // inline size: 6
  = fn(s: std/core/types/string, sub: std/core/types/string){
    match ((std/core/is-empty.2(sub))) {
      ((std/core/types/True() : std/core/types/bool ) as .pat: std/core/types/bool)
         -> s;
      ((.skip std/core/types/False() : std/core/types/bool ) as .pat0: std/core/types/bool)
         -> (match ((std/core/ends-with(s, sub))) {
          ((std/core/types/Just(((.skip std/core/Sslice((.pat2: std/core/types/string) : std/core/types/string, (.pat3: std/core/types/size_t) : std/core/types/size_t, (.pat4: std/core/types/size_t) : std/core/types/size_t) : sslice ) as slice: sslice) : sslice) : (std/core/types/maybe :: V -> V)<sslice> ) as .pat1: ((std/core/types/maybe :: V -> V)<sslice>))
             -> std/core/trim-right.1((std/core/string.3(slice)), sub);
          ((.skip std/core/types/Nothing() : (std/core/types/maybe :: V -> V)<sslice> ) as .pat5: ((std/core/types/maybe :: V -> V)<sslice>))
             -> s;
        });
    };
  };
fun trim // inline size: 2
  = fn(s: std/core/types/string){
    std/core/trim-right((std/core/trim-left(s)));
  };
fun parse-int // inline size: 3
  = fn(s: std/core/types/string, hex: (std/core/types/optional :: V -> V)<std/core/types/bool>){
    std/core/xparse-int((std/core/trim(s)), (match (hex) {
        ((std/core/types/Optional((.hex.20154: std/core/types/bool) : std/core/types/bool) : (std/core/types/optional :: V -> V)<std/core/types/bool> ) as .pat: ((std/core/types/optional :: V -> V)<std/core/types/bool>))
           -> .hex.20154;
        ((.skip std/core/types/None() : (std/core/types/optional :: V -> V)<std/core/types/bool> ) as .pat0: ((std/core/types/optional :: V -> V)<std/core/types/bool>))
           -> std/core/types/False;
      }));
  };
fun parse-int-default // inline size: 10
  = fn(s: std/core/types/string, default: (std/core/types/optional :: V -> V)<std/core/types/int>, hex: (std/core/types/optional :: V -> V)<std/core/types/bool>){
    match ((std/core/is-empty.2(s))) {
      ((std/core/types/True() : std/core/types/bool ) as .pat3: std/core/types/bool)
         -> (match (default) {
          ((std/core/types/Optional((.default.20166: std/core/types/int) : std/core/types/int) : (std/core/types/optional :: V -> V)<std/core/types/int> ) as .pat: ((std/core/types/optional :: V -> V)<std/core/types/int>))
             -> .default.20166;
          ((.skip std/core/types/None() : (std/core/types/optional :: V -> V)<std/core/types/int> ) as .pat0: ((std/core/types/optional :: V -> V)<std/core/types/int>))
             -> 0;
        });
      ((.skip std/core/types/False() : std/core/types/bool ) as .pat4: std/core/types/bool)
         -> val m.23428 : (std/core/types/maybe :: V -> V)<std/core/types/int>
                  = val hex0.23431 : (std/core/types/optional :: V -> V)<std/core/types/bool>
                          = std/core/types/Optional<std/core/types/bool>((match (hex) {
                            ((std/core/types/Optional((.hex.20170: std/core/types/bool) : std/core/types/bool) : (std/core/types/optional :: V -> V)<std/core/types/bool> ) as .pat10: ((std/core/types/optional :: V -> V)<std/core/types/bool>))
                               -> .hex.20170;
                            ((.skip std/core/types/None() : (std/core/types/optional :: V -> V)<std/core/types/bool> ) as .pat2: ((std/core/types/optional :: V -> V)<std/core/types/bool>))
                               -> std/core/types/False;
                          }));
                  std/core/xparse-int((std/core/trim(s)), (match (hex0.23431) {
                      ((std/core/types/Optional((.hex.20154: std/core/types/bool) : std/core/types/bool) : (std/core/types/optional :: V -> V)<std/core/types/bool> ) as .pat1: ((std/core/types/optional :: V -> V)<std/core/types/bool>))
                         -> .hex.20154;
                      ((.skip std/core/types/None() : (std/core/types/optional :: V -> V)<std/core/types/bool> ) as .pat00: ((std/core/types/optional :: V -> V)<std/core/types/bool>))
                         -> std/core/types/False;
                    }));
        (match (m.23428) {
          ((std/core/types/Nothing() : (std/core/types/maybe :: V -> V)<std/core/types/int> ) as .pat5: ((std/core/types/maybe :: V -> V)<std/core/types/int>))
             -> (match (default) {
              ((std/core/types/Optional((.default.201660: std/core/types/int) : std/core/types/int) : (std/core/types/optional :: V -> V)<std/core/types/int> ) as .pat50: ((std/core/types/optional :: V -> V)<std/core/types/int>))
                 -> .default.201660;
              ((.skip std/core/types/None() : (std/core/types/optional :: V -> V)<std/core/types/int> ) as .pat010: ((std/core/types/optional :: V -> V)<std/core/types/int>))
                 -> 0;
            });
          ((.skip std/core/types/Just((x: std/core/types/int) : std/core/types/int) : (std/core/types/maybe :: V -> V)<std/core/types/int> ) as .pat01: ((std/core/types/maybe :: V -> V)<std/core/types/int>))
             -> x;
        });
    };
  };
fun partition // inline size: 1
  = forall<a,(e :: E)> fn<(e :: E)>(xs: (list :: V -> V)<a>, pred: (a) -> (e :: E) std/core/types/bool){
    std/core/partition-acc<a,(e :: E)>(xs, pred, (std/core/Nil<a>), (std/core/Nil<a>));
  };
fun remove // inline size: 3
  = forall<a> fn(xs: (list :: V -> V)<a>, pred: (a) -> std/core/types/bool){
    std/core/filter<a,(std/core/types/(<>) :: E)>(xs, (fn(x: a){
        (std/core/types/(!)((pred(x))));
      }));
  };
fun repeat // inline size: 2
  = fn(s: std/core/types/string, n: std/core/types/int){
    std/core/repeatz(s, (std/core/size_t(n)));
  };
fun repeat.1 // inline size: 2
  = forall<(e :: E)> fn<(e :: E)>(n: std/core/types/int, action: () -> (e :: E) ()){
    std/core/.lift22737-for<(e :: E)>((fn<(e :: E)>(i: std/core/types/int){
        (action());
      }), n, 1);
  };
recursive fun replicate // inline size: 1
  = forall<a> fn(x: a, n: std/core/types/int){
    std/core/.ctail-replicate<a>(x, n, (std/core/types/CTailNil<(list :: V -> V)<a>>));
  };
fun show-tuple // inline size: 6
  = forall<a,b> fn(x: (a, b), showfst: (a) -> std/core/types/string, showsnd: (b) -> std/core/types/string){
    std/core/(+.6)((std/core/(+.6)((std/core/(+.6)((std/core/(+.6)("(", (showfst((match (x) {
              ((.skip std/core/types/(,)((.x: a) : a, (.pat0: b) : b) : (a, b) ) as .pat: (a, b))
                 -> .x;
            }))))), ",")), (showsnd((match (x) {
          ((.skip std/core/types/(,)((.pat00: a) : a, (.x0: b) : b) : (a, b) ) as .pat1: (a, b))
             -> .x0;
        }))))), ")");
  };
fun span // inline size: 1
  = forall<a,(e :: E)> fn<(e :: E)>(xs: (list :: V -> V)<a>, predicate: (a) -> (e :: E) std/core/types/bool){
    std/core/.lift22741-span<a,(e :: E)>(predicate, xs, (std/core/Nil<a>));
  };
fun sum // inline size: 2
  = fn(xs: (list :: V -> V)<std/core/types/int>){
    std/core/foldl<std/core/types/int,std/core/types/int,(std/core/types/(<>) :: E)>(xs, 0, (fn(x: std/core/types/int, y: std/core/types/int){
        (std/core/(+)(x, y));
      }));
  };
fun tail.1 // inline size: 1
  = forall<a> fn(xs: (list :: V -> V)<a>){
    (match (xs) {
      ((std/core/Cons((.pat0: a) : a, (xx: (list :: V -> V)<a>) : (list :: V -> V)<a>) : (list :: V -> V)<a> ) as .pat: ((list :: V -> V)<a>))
         -> xx;
      ((.skip std/core/Nil() : (list :: V -> V)<a> ) as .pat1: ((list :: V -> V)<a>))
         -> std/core/Nil<a>;
    });
  };
recursive fun take-while // inline size: 4
  = forall<a,(e :: E)> fn<(e :: E)>(xs: (list :: V -> V)<a>, predicate: (a) -> (e :: E) std/core/types/bool){
    (match ((std/core/hnd/.evv-is-affine())) {
      ((std/core/types/True() : std/core/types/bool ) as .pat: std/core/types/bool)
         -> std/core/.ctail-take-while<a,(e :: E)>(xs, predicate, (std/core/types/CTailNil<(list :: V -> V)<a>>));
      (.pat0: std/core/types/bool)
         -> std/core/.ctailm-take-while<a,(e :: E)>(xs, predicate, (fn(.ctail.22836: (list :: V -> V)<a>){
            .ctail.22836;
          }));
    });
  };
fun todo // inline size: 6
  = fn(message: std/core/types/string){
    val info.23475 : (std/core/types/optional :: V -> V)<exception-info>
      = std/core/types/Optional<exception-info>(std/core/ExnTodo);
    val exn.23476 : exception
      = std/core/Exception(message, (match (info.23475) {
          ((std/core/types/Optional((.info.12803: exception-info) : exception-info) : (std/core/types/optional :: V -> V)<exception-info> ) as .pat4: ((std/core/types/optional :: V -> V)<exception-info>))
             -> .info.12803;
          ((.skip std/core/types/None() : (std/core/types/optional :: V -> V)<exception-info> ) as .pat00: ((std/core/types/optional :: V -> V)<exception-info>))
             -> std/core/ExnError;
        }));
    val ev.23477 : (std/core/hnd/ev :: ((E, V) -> V) -> V)<(.hnd-exn :: (E, V) -> V)>
      = std/core/hnd/.evv-at<(.hnd-exn :: (E, V) -> V)>((std/core/size_t(0)));
    match (ev.23477) {
      ((.skip std/core/hnd/Ev<(e :: E),a>((.pat0: (std/core/hnd/htag :: ((E, V) -> V) -> V)<(.hnd-exn :: (E, V) -> V)>) : (std/core/hnd/htag :: ((E, V) -> V) -> V)<(.hnd-exn :: (E, V) -> V)>, (m: (std/core/hnd/marker :: (E, V) -> V)<(e :: E),a>) : (std/core/hnd/marker :: (E, V) -> V)<(e :: E),a>, (h: (.hnd-exn :: (E, V) -> V)<(e :: E),a>) : (.hnd-exn :: (E, V) -> V)<(e :: E),a>, (.pat1: std/core/hnd/cfc) : std/core/hnd/cfc, (.pat2: (std/core/hnd/evv :: E -> V)<(e :: E)>) : (std/core/hnd/evv :: E -> V)<(e :: E)>) : (std/core/hnd/ev :: ((E, V) -> V) -> V)<(.hnd-exn :: (E, V) -> V)> ) as .pat: ((std/core/hnd/ev :: ((E, V) -> V) -> V)<(.hnd-exn :: (E, V) -> V)>))
         -> (match ((match (h) {
          ((.skip std/core/.Hnd-exn((except-throw-exn: (forall<b> (std/core/hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<exception,b,(.hnd-exn :: (E, V) -> V),(e :: E),a>)) : (forall<b> (std/core/hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<exception,b,(.hnd-exn :: (E, V) -> V),(e :: E),a>)) : (.hnd-exn :: (E, V) -> V)<(e :: E),a> ) as .pat3: ((.hnd-exn :: (E, V) -> V)<(e :: E),a>))
             -> except-throw-exn<()>;
        })) {
          ((.skip std/core/hnd/Clause1((f: ((std/core/hnd/marker :: (E, V) -> V)<(e :: E),a>, (std/core/hnd/ev :: ((E, V) -> V) -> V)<(.hnd-exn :: (E, V) -> V)>, exception) -> (e :: E) ()) : ((std/core/hnd/marker :: (E, V) -> V)<(e :: E),a>, (std/core/hnd/ev :: ((E, V) -> V) -> V)<(.hnd-exn :: (E, V) -> V)>, exception) -> (e :: E) ()) : (std/core/hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<exception,(),(.hnd-exn :: (E, V) -> V),(e :: E),a> ) as .pat30: ((std/core/hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<exception,(),(.hnd-exn :: (E, V) -> V),(e :: E),a>))
             -> f(m, ev.23477, exn.23476);
        });
    };
  };
fun trace // inline size: 4
  = fn(message: std/core/types/string){
    match ((std/core/types/(!.1)<(std/core/types/global :: H),std/core/types/bool,(_e :: E)>((std/core/types/ref<(std/core/types/global :: H),std/core/types/bool>(std/core/types/True))))) {
      ((std/core/types/True() : std/core/types/bool ) as .pat: std/core/types/bool)
         -> std/core/xtrace(message);
      ((.skip std/core/types/False() : std/core/types/bool ) as .pat0: std/core/types/bool)
         -> std/core/types/();
    };
  };
fun trace-any // inline size: 4
  = forall<a> fn(message: std/core/types/string, x: a){
    (match ((std/core/types/(!.1)<(std/core/types/global :: H),std/core/types/bool,(_e :: E)>((std/core/types/ref<(std/core/types/global :: H),std/core/types/bool>(std/core/types/True))))) {
      ((std/core/types/True() : std/core/types/bool ) as .pat: std/core/types/bool)
         -> std/core/xtrace-any<a>(message, x);
      ((.skip std/core/types/False() : std/core/types/bool ) as .pat0: std/core/types/bool)
         -> std/core/types/();
    });
  };
fun truncate // inline size: 10
  = fn(s: std/core/types/string, count: std/core/types/int){
    std/core/string.3((std/core/extend(val slice : sslice
                                             = (std/core/first1(s));
      (match ((std/core/(==.1)((match ((std/core/types/None<std/core/types/int>)) {
          ((std/core/types/Optional((.n.13060: std/core/types/int) : std/core/types/int) : (std/core/types/optional :: V -> V)<std/core/types/int> ) as .pat: ((std/core/types/optional :: V -> V)<std/core/types/int>))
             -> .n.13060;
          ((.skip std/core/types/None() : (std/core/types/optional :: V -> V)<std/core/types/int> ) as .pat0: ((std/core/types/optional :: V -> V)<std/core/types/int>))
             -> 1;
        }), 1))) {
        ((std/core/types/True() : std/core/types/bool ) as .pat1: std/core/types/bool)
           -> slice;
        ((.skip std/core/types/False() : std/core/types/bool ) as .pat2: std/core/types/bool)
           -> std/core/extend(slice, (std/core/(-)((match ((std/core/types/None<std/core/types/int>)) {
                ((std/core/types/Optional((.n.130600: std/core/types/int) : std/core/types/int) : (std/core/types/optional :: V -> V)<std/core/types/int> ) as .pat3: ((std/core/types/optional :: V -> V)<std/core/types/int>))
                   -> .n.130600;
                ((.skip std/core/types/None() : (std/core/types/optional :: V -> V)<std/core/types/int> ) as .pat00: ((std/core/types/optional :: V -> V)<std/core/types/int>))
                   -> 1;
              }), 1)));
      }), (std/core/(-)(count, 1)))));
  };
fun try-default // inline size: 5
  = forall<a,(e :: E)> fn<(e :: E)>(value: a, action: () -> <(std/core/types/handled :: HX -> X)<(exn :: HX)>|(e :: E)> a){
    std/core/.handle-exn<a,(e :: E),a>((std/core/int32(0)), (std/core/.Hnd-exn<(e :: E),a>((forall<b> std/core/hnd/Clause1<exception,b,(.hnd-exn :: (E, V) -> V),(e :: E),a>((fn<(e :: E)>(m: (std/core/hnd/marker :: (E, V) -> V)<(e :: E),a>, _ev: (std/core/hnd/ev :: ((E, V) -> V) -> V)<(.hnd-exn :: (E, V) -> V)>, x: exception){
        (std/core/hnd/yield-to-final<b,(e :: E),(e :: E),a>(m, (fn<(e :: E)>(_k: (() -> b) -> (e :: E) a){
            value;
          })));
      }))))), (fn<(e :: E)>(.x: a){
        .x;
      }), action);
  };
fun unique // inline size: 3
  = fn<<(std/core/types/ndet :: X)>>(){
    val u : std/core/types/int
      = std/core/types/(!.1)<(std/core/types/global :: H),std/core/types/int,<(std/core/types/write :: H -> X)<(std/core/types/global :: H)>|(_e :: E)>>(std/core/unique-count);
    val _ : ()
      = std/core/types/set<(std/core/types/global :: H),std/core/types/int>(std/core/unique-count, (std/core/(+)(u, 1)));
    u;
  };
fun unjust // inline size: 6
  = forall<a> fn<<(std/core/types/handled :: HX -> X)<(exn :: HX)>>>(m: (std/core/types/maybe :: V -> V)<a>){
    (match (m) {
      ((std/core/types/Just((x: a) : a) : (std/core/types/maybe :: V -> V)<a> ) as .pat: ((std/core/types/maybe :: V -> V)<a>))
         -> x;
      ((.skip std/core/types/Nothing() : (std/core/types/maybe :: V -> V)<a> ) as .pat0: ((std/core/types/maybe :: V -> V)<a>))
         -> val exn.23489 : exception
              = std/core/Exception("unexpected Nothing in std/core/unjust", (match ((std/core/types/None<exception-info>)) {
                  ((std/core/types/Optional((.info.12803: exception-info) : exception-info) : (std/core/types/optional :: V -> V)<exception-info> ) as .pat4: ((std/core/types/optional :: V -> V)<exception-info>))
                     -> .info.12803;
                  ((.skip std/core/types/None() : (std/core/types/optional :: V -> V)<exception-info> ) as .pat01: ((std/core/types/optional :: V -> V)<exception-info>))
                     -> std/core/ExnError;
                }));
            val ev.23490 : (std/core/hnd/ev :: ((E, V) -> V) -> V)<(.hnd-exn :: (E, V) -> V)>
              = std/core/hnd/.evv-at<(.hnd-exn :: (E, V) -> V)>((std/core/size_t(0)));
        (match (ev.23490) {
          ((.skip std/core/hnd/Ev<(e :: E),b>((.pat00: (std/core/hnd/htag :: ((E, V) -> V) -> V)<(.hnd-exn :: (E, V) -> V)>) : (std/core/hnd/htag :: ((E, V) -> V) -> V)<(.hnd-exn :: (E, V) -> V)>, (m0: (std/core/hnd/marker :: (E, V) -> V)<(e :: E),b>) : (std/core/hnd/marker :: (E, V) -> V)<(e :: E),b>, (h: (.hnd-exn :: (E, V) -> V)<(e :: E),b>) : (.hnd-exn :: (E, V) -> V)<(e :: E),b>, (.pat10: std/core/hnd/cfc) : std/core/hnd/cfc, (.pat2: (std/core/hnd/evv :: E -> V)<(e :: E)>) : (std/core/hnd/evv :: E -> V)<(e :: E)>) : (std/core/hnd/ev :: ((E, V) -> V) -> V)<(.hnd-exn :: (E, V) -> V)> ) as .pat1: ((std/core/hnd/ev :: ((E, V) -> V) -> V)<(.hnd-exn :: (E, V) -> V)>))
             -> (match ((match (h) {
              ((.skip std/core/.Hnd-exn((except-throw-exn: (forall<c> (std/core/hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<exception,c,(.hnd-exn :: (E, V) -> V),(e :: E),b>)) : (forall<c> (std/core/hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<exception,c,(.hnd-exn :: (E, V) -> V),(e :: E),b>)) : (.hnd-exn :: (E, V) -> V)<(e :: E),b> ) as .pat3: ((.hnd-exn :: (E, V) -> V)<(e :: E),b>))
                 -> except-throw-exn<a>;
            })) {
              ((.skip std/core/hnd/Clause1((f: ((std/core/hnd/marker :: (E, V) -> V)<(e :: E),b>, (std/core/hnd/ev :: ((E, V) -> V) -> V)<(.hnd-exn :: (E, V) -> V)>, exception) -> (e :: E) a) : ((std/core/hnd/marker :: (E, V) -> V)<(e :: E),b>, (std/core/hnd/ev :: ((E, V) -> V) -> V)<(.hnd-exn :: (E, V) -> V)>, exception) -> (e :: E) a) : (std/core/hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<exception,a,(.hnd-exn :: (E, V) -> V),(e :: E),b> ) as .pat30: ((std/core/hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<exception,a,(.hnd-exn :: (E, V) -> V),(e :: E),b>))
                 -> f(m0, ev.23490, exn.23489);
            });
        });
    });
  };
fun unlines // inline size: 2
  = fn(xs: (list :: V -> V)<std/core/types/string>){
    match (xs) {
      ((std/core/Nil() : (list :: V -> V)<std/core/types/string> ) as .pat: ((list :: V -> V)<std/core/types/string>))
         -> "";
      ((.skip std/core/Cons((x: std/core/types/string) : std/core/types/string, (xx: (list :: V -> V)<std/core/types/string>) : (list :: V -> V)<std/core/types/string>) : (list :: V -> V)<std/core/types/string> ) as .pat0: ((list :: V -> V)<std/core/types/string>))
         -> std/core/.lift22731-joinsep("\x0A", xx, x);
    };
  };
recursive fun .lift22742-unzip // inline size: 7
  = forall<a,b> fn(ys: (list :: V -> V)<(a, b)>, acc1: (list :: V -> V)<a>, acc2: (list :: V -> V)<b>){
    (match (ys) {
      ((std/core/Cons(((.skip std/core/types/(,)((x: a) : a, (y: b) : b) : (a, b) ) as .pat0: (a, b)) : (a, b), (xx: (list :: V -> V)<(a, b)>) : (list :: V -> V)<(a, b)>) : (list :: V -> V)<(a, b)> ) as .pat: ((list :: V -> V)<(a, b)>))
         -> std/core/.lift22742-unzip<a,b>(xx, (std/core/Cons<a>(x, acc1)), (std/core/Cons<b>(y, acc2)));
      ((.skip std/core/Nil() : (list :: V -> V)<(a, b)> ) as .pat1: ((list :: V -> V)<(a, b)>))
         -> std/core/types/(,)<(list :: V -> V)<a>,(list :: V -> V)<b>>((std/core/reverse<a>(acc1)), (std/core/reverse<b>(acc2)));
    });
  };
fun unzip // inline size: 1
  = forall<a,b> fn(xs: (list :: V -> V)<(a, b)>){
    std/core/.lift22742-unzip<a,b>(xs, (std/core/Nil<a>), (std/core/Nil<b>));
  };
fun vector.2 // inline size: 2
  = forall<a> fn(n: std/core/types/int, default: a){
    std/core/vector-initz<a>((std/core/size_t(n)), (fn(_i: std/core/types/size_t){
        default;
      }));
  };
fun vector.3 // inline size: 1
  = forall<a> fn(xs: (list :: V -> V)<a>){
    std/core/unvlist<a>(xs);
  };
fun vector-init // inline size: 4
  = forall<a> fn(n: std/core/types/int, f: (std/core/types/int) -> a){
    std/core/vector-initz<a>((std/core/size_t(n)), (fn(i: std/core/types/size_t){
        (f((std/core/int.2(i))));
      }));
  };
recursive fun zip // inline size: 1
  = forall<a,b> fn(xs: (list :: V -> V)<a>, ys: (list :: V -> V)<b>){
    std/core/.ctail-zip<a,b>(xs, ys, (std/core/types/CTailNil<(list :: V -> V)<(a, b)>>));
  };
recursive fun zipwith // inline size: 4
  = forall<a,b,c,(e :: E)> fn<(e :: E)>(xs: (list :: V -> V)<a>, ys: (list :: V -> V)<b>, f: (a, b) -> (e :: E) c){
    (match ((std/core/hnd/.evv-is-affine())) {
      ((std/core/types/True() : std/core/types/bool ) as .pat: std/core/types/bool)
         -> std/core/.ctail-zipwith<a,b,c,(e :: E)>(xs, ys, f, (std/core/types/CTailNil<(list :: V -> V)<c>>));
      (.pat0: std/core/types/bool)
         -> std/core/.ctailm-zipwith<a,b,c,(e :: E)>(xs, ys, f, (fn(.ctail.22844: (list :: V -> V)<c>){
            .ctail.22844;
          }));
    });
  };
fun zipwith-indexed // inline size: 1
  = forall<a,b,c,(e :: E)> fn<(e :: E)>(xs0: (list :: V -> V)<a>, ys0: (list :: V -> V)<b>, f: (std/core/types/int, a, b) -> (e :: E) c){
    std/core/.lift22743-zipwith-indexed<a,b,c,(e :: E)>(f, 0, xs0, ys0);
  };