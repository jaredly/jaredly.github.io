{
  "_id": null,
  "_rev": null,
  "children": [
    {
      "_id": null,
      "_rev": null,
      "children": [
        {
          "_id": null,
          "_rev": null,
          "children": [],
          "completed": null,
          "content": "/* @embed base.css */\n/* reset */\nbody, div {\n    display: flex;\n    flex-direction: column;\n    box-sizing: border-box;\n    flex-shrink: 0;\n}\n\nbody {\n  font: 14px \"Century Gothic\", Futura, sans-serif;\n}\n\n#root {\n  align-items: center;\n  justify-content: center;\n  position: absolute;\n  top: 0;\n  left: 0;\n  bottom: 0;\n  right: 0;\n}\n\n.app {\n  width: 280px;\n  max-height: 600px;\n  flex: 1;\n  box-shadow: 0 2px 15px #ccc;\n  margin: 10px;\n  align-items: stretch;\n}\n\n.title {\n  font-size: 20px;\n  align-items: center;\n  padding: 20px;\n}\n\n.items {\n  margin: 10px 0;\n  text-align: center;\n  flex: 1;\n  overflow: auto;\n}\n\n.footer {\n  align-items: flex-start;\n  padding: 5px 10px;\n}\n\n.item {\n  display: flex;\n  padding: 10px 20px;\n  align-items: center;\n  flex-direction: row;\n}\n\n.checkbox {\n  margin-right: 20px;\n}\n\ninput[type=\"checkbox\"] {\n  margin-right: 10px;\n}\n\ninput[type=\"text\"] {\n  align-self: stretch;\n  padding: 3px 5px;\n  margin-top: 20px;\n}",
          "created": 1499171833299,
          "modified": 1499187963156,
          "parent": null,
          "plugins": {},
          "trashed": null,
          "type": "code",
          "types": {
            "code": {
              "kernelId": null,
              "language": "javascript",
              "lastRun": null
            }
          },
          "views": {}
        }
      ],
      "completed": null,
      "content": "An in-depth introduction to Reason/OCaml and the official React.js bindings, aimed at JavaScript developers.",
      "created": 1498968439935,
      "modified": 1499208824524,
      "parent": null,
      "plugins": {},
      "trashed": null,
      "type": "note",
      "types": {},
      "views": {}
    },
    {
      "_id": null,
      "_rev": null,
      "children": [],
      "completed": null,
      "content": "Are you a big fan of React, and want to know more about Reason/OCaml? I made this for you!",
      "created": 1498947175066,
      "modified": 1499207674563,
      "parent": null,
      "plugins": {},
      "trashed": null,
      "type": "normal",
      "types": {},
      "views": {}
    },
    {
      "_id": null,
      "_rev": null,
      "children": [],
      "completed": null,
      "content": "[Reason](http://facebook.github.io/reason/) is a project that adds a JavaScript-style syntax and a bunch of conventions and tooling to OCaml. The goal is to make this awesome language, with its powerful type system and robust multi-platform compiler, accessible to a broader audience. It's backed by the good folks at Facebook who invented and built React, and so naturally having best-in-class React interop has been a high priority.",
      "created": 1498947215380,
      "modified": 1499209541111,
      "parent": null,
      "plugins": {},
      "trashed": null,
      "type": "normal",
      "types": {},
      "views": {}
    },
    {
      "_id": null,
      "_rev": null,
      "children": [],
      "completed": null,
      "content": "This tutorial aims to give you a nice introduction to the syntax and type system of Reason, through the [ReasonReact library](https://reasonml.github.io/reason-react/). We'll be building a simple Todo list application.",
      "created": 1498947361654,
      "modified": 1499286697385,
      "parent": null,
      "plugins": {},
      "trashed": null,
      "type": "normal",
      "types": {},
      "views": {}
    },
    {
      "_id": null,
      "_rev": null,
      "children": [],
      "completed": null,
      "content": "// more",
      "created": 1498947445487,
      "modified": 1498947447158,
      "parent": null,
      "plugins": {},
      "trashed": null,
      "type": "normal",
      "types": {},
      "views": {}
    },
    {
      "_id": null,
      "_rev": null,
      "children": [
        {
          "_id": null,
          "_rev": null,
          "children": [],
          "completed": null,
          "content": "We'll build a fairly simple Todo-list application, and work through [component state](#11-step-1-adding-some-state), [mutable variables](#18-tracking-ids-w-a-mutable-ref-), and reponding to [click](#14-reacting-to-events-and-changing-state) and [keyboard](#21-text-input) events.",
          "created": 1499209675725,
          "modified": 1499209970576,
          "parent": null,
          "plugins": {},
          "trashed": null,
          "type": "normal",
          "types": {
            "code": {
              "kernelId": null,
              "language": "reason",
              "lastRun": null
            }
          },
          "views": {}
        },
        {
          "_id": null,
          "_rev": null,
          "children": [],
          "completed": null,
          "content": "/* @render */\nReactDOMRe.renderToElementWithId <TodoApp_final /> \"root\"",
          "created": 1499097391598,
          "modified": 1499209099336,
          "parent": null,
          "plugins": {},
          "trashed": null,
          "type": "code",
          "types": {
            "code": {
              "kernelId": null,
              "language": "reason",
              "lastRun": null
            }
          },
          "views": {}
        }
      ],
      "completed": null,
      "content": "What are we building?",
      "created": 1498052530433,
      "modified": 1499209675725,
      "parent": null,
      "plugins": {},
      "trashed": null,
      "type": "header",
      "types": {},
      "views": {}
    },
    {
      "_id": null,
      "_rev": null,
      "children": [
        {
          "_id": null,
          "_rev": null,
          "children": [],
          "completed": null,
          "content": "There are a couple of boilerplate-generator type things that you can take advantage of if you want. [reason-scripts](https://github.com/rrdelaney/reason-scripts), [create-react-reason-app](https://github.com/knowbody/crra), or [bsb -init](https://facebook.github.io/reason/gettingStarted.html#getting-started-project-setup) will get you started. I show the details here so that you know how it works under the hood.",
          "created": 1499274546714,
          "modified": 1499274735394,
          "parent": null,
          "plugins": {},
          "trashed": null,
          "type": "note",
          "types": {},
          "views": {}
        },
        {
          "_id": null,
          "_rev": null,
          "children": [],
          "completed": null,
          "content": "Clone [this starter repo](https://github.com/jaredly/a-reason-react-tutorial) that has all of the config files ready for you. Here's what it contains out of the box:",
          "created": 1498052520413,
          "modified": 1499267761550,
          "parent": null,
          "plugins": {},
          "trashed": null,
          "type": "normal",
          "types": {},
          "views": {}
        },
        {
          "_id": null,
          "_rev": null,
          "children": [],
          "completed": null,
          "content": "~$ tree\n.\n├── bsconfig.json\n├── package.json\n├── webpack.config.js\n├── public\n│   ├── index.html\n│   └── styles.css\n└── src\n    ├── Main.re\n    └── TodoList.re",
          "created": 1498052577612,
          "modified": 1498951288387,
          "parent": null,
          "plugins": {},
          "trashed": null,
          "type": "code",
          "types": {
            "code": {
              "kernelId": null,
              "language": "bash",
              "lastRun": null
            }
          },
          "views": {}
        },
        {
          "_id": null,
          "_rev": null,
          "children": [
            {
              "_id": null,
              "_rev": null,
              "children": [],
              "completed": null,
              "content": "This tells `bucklescript` how to compile your code. In it, we specify libraries we depend on (reason-react), that we want to use the new react-jsx transform, and that our files are in `src`.",
              "created": 1498052578732,
              "modified": 1499113964948,
              "parent": null,
              "plugins": {},
              "trashed": null,
              "type": "normal",
              "types": {},
              "views": {}
            },
            {
              "_id": null,
              "_rev": null,
              "children": [],
              "completed": null,
              "content": "{\n  \"name\" : \"tic-tac-toe\",\n  \"reason\" : {\"react-jsx\" : 2},\n  \"bs-dependencies\": [\"reason-react\"],\n  \"sources\": \"src\"\n}",
              "created": 1498056820709,
              "modified": 1498951306234,
              "parent": null,
              "plugins": {},
              "trashed": null,
              "type": "code",
              "types": {
                "code": {
                  "kernelId": null,
                  "language": "json",
                  "lastRun": null
                }
              },
              "views": {}
            },
            {
              "_id": null,
              "_rev": null,
              "children": [],
              "completed": null,
              "content": "Here's some documentation on the [schema of bsconfig.json](http://bucklescript.github.io/bucklescript/docson/#build-schema.json). Note that source directories are **not** walked recursively. Subfolders have to be listed out.",
              "created": 1498056850300,
              "modified": 1498096343683,
              "parent": null,
              "plugins": {},
              "trashed": null,
              "type": "note",
              "types": {
                "code": {
                  "kernelId": null,
                  "language": "javascript",
                  "lastRun": null
                }
              },
              "views": {}
            }
          ],
          "completed": null,
          "content": "bsconfig.json",
          "created": 1498056956961,
          "modified": 1499114095564,
          "parent": null,
          "plugins": {},
          "trashed": null,
          "type": "header",
          "types": {},
          "views": {}
        },
        {
          "_id": null,
          "_rev": null,
          "children": [
            {
              "_id": null,
              "_rev": null,
              "children": [],
              "completed": null,
              "content": "For our development dependencies we have `bs-platform` (which contains the bucklescript compiler) and `webpack` (for bundling the compiled js files together).",
              "created": 1498057141052,
              "modified": 1498096343683,
              "parent": null,
              "plugins": {},
              "trashed": null,
              "type": "normal",
              "types": {
                "code": {
                  "kernelId": null,
                  "language": "javascript",
                  "lastRun": null
                }
              },
              "views": {}
            },
            {
              "_id": null,
              "_rev": null,
              "children": [],
              "completed": null,
              "content": "Our runtime dependencies include both `reason-react` *and* the npm libraries that `reason-react` code depends on, `react`, and `react-dom`.",
              "created": 1498057190780,
              "modified": 1498096343683,
              "parent": null,
              "plugins": {},
              "trashed": null,
              "type": "normal",
              "types": {},
              "views": {}
            },
            {
              "_id": null,
              "_rev": null,
              "children": [],
              "completed": null,
              "content": "{\n  \"name\": \"reason-to-do\",\n  \"scripts\": {\n    \"start\": \"bsb -make-world -w\",\n    \"build\": \"webpack -w\",\n    \"clean\": \"bsb -clean-world\"\n  },\n  \"dependencies\": {\n    \"react\": \"^15.4.2\",\n    \"react-dom\": \"^15.4.2\",\n    \"reason-react\": \"0.2.1\"\n  },\n  \"devDependencies\": {\n    \"bs-platform\": \"^1.7.5\",\n    \"webpack\": \"^3.0.0\"\n  }\n}",
              "created": 1498057117610,
              "modified": 1499306760414,
              "parent": null,
              "plugins": {},
              "trashed": null,
              "type": "code",
              "types": {
                "code": {
                  "kernelId": null,
                  "language": "json",
                  "lastRun": null
                }
              },
              "views": {}
            },
            {
              "_id": null,
              "_rev": null,
              "children": [],
              "completed": null,
              "content": "`npm start` will start the bucklescript compiler in watch mode, and `npm run build` will start our webpack bundler in watch mode. While developing, we'll have both these processes running.",
              "created": 1498057295549,
              "modified": 1498096343683,
              "parent": null,
              "plugins": {},
              "trashed": null,
              "type": "normal",
              "types": {},
              "views": {}
            }
          ],
          "completed": null,
          "content": "package.json",
          "created": 1498056915850,
          "modified": 1499228721489,
          "parent": null,
          "plugins": {},
          "trashed": null,
          "type": "header",
          "types": {},
          "views": {}
        },
        {
          "_id": null,
          "_rev": null,
          "children": [
            {
              "_id": null,
              "_rev": null,
              "children": [],
              "completed": null,
              "content": "Webpack also needs [some configuration](https://webpack.js.org/concepts/), so it knows what to compile and where to put it. Notice that bucklescript puts our compiled javascript into `./lib/js/`, with parallel file structure to our `./src` directory.",
              "created": 1498057344747,
              "modified": 1499209465583,
              "parent": null,
              "plugins": {},
              "trashed": null,
              "type": "normal",
              "types": {
                "code": {
                  "kernelId": null,
                  "language": "javascript",
                  "lastRun": null
                }
              },
              "views": {}
            },
            {
              "_id": null,
              "_rev": null,
              "children": [],
              "completed": null,
              "content": "module.exports = {\n  entry: './lib/js/src/main.js',\n  output: {\n    path: __dirname + '/public',\n    filename: 'bundle.js',\n  },\n};",
              "created": 1498057332493,
              "modified": 1498096343683,
              "parent": null,
              "plugins": {},
              "trashed": null,
              "type": "code",
              "types": {
                "code": {
                  "kernelId": null,
                  "language": "javascript",
                  "lastRun": null
                }
              },
              "views": {}
            }
          ],
          "completed": null,
          "content": "webpack.config.js",
          "created": 1498057329644,
          "modified": 1498096343683,
          "parent": null,
          "plugins": {},
          "trashed": null,
          "type": "header",
          "types": {},
          "views": {}
        }
      ],
      "completed": null,
      "content": "Setup",
      "created": 1498052457068,
      "modified": 1499274546717,
      "parent": null,
      "plugins": {},
      "trashed": null,
      "type": "header",
      "types": {},
      "views": {}
    },
    {
      "_id": null,
      "_rev": null,
      "children": [
        {
          "_id": null,
          "_rev": null,
          "children": [],
          "completed": null,
          "content": "Open two terminals, and `npm install && npm start` in one, `npm run build` in the other. The one with `npm start` is bucklescript, which you'll want to keep an eye on -- that's the one that's going to show you error messages if you e.g. have a type error in your code. The webpack one you can pretty much ignore.",
          "created": 1498057672539,
          "modified": 1499312065839,
          "parent": null,
          "plugins": {},
          "trashed": null,
          "type": "normal",
          "types": {},
          "views": {}
        },
        {
          "_id": null,
          "_rev": null,
          "children": [],
          "completed": null,
          "content": "Now open `public/index.html` in your favorite browser, and you should see this!",
          "created": 1498057752086,
          "modified": 1498096343683,
          "parent": null,
          "plugins": {},
          "trashed": null,
          "type": "normal",
          "types": {},
          "views": {}
        },
        {
          "_id": null,
          "_rev": null,
          "children": [],
          "completed": null,
          "content": "/* @render */\nReactDOMRe.renderToElementWithId <TodoApp /> \"root\";",
          "created": 1498057774340,
          "modified": 1499096175775,
          "parent": null,
          "plugins": {},
          "trashed": null,
          "type": "code",
          "types": {
            "code": {
              "kernelId": null,
              "language": "reason",
              "lastRun": null
            }
          },
          "views": {}
        }
      ],
      "completed": null,
      "content": "Building",
      "created": 1498057670874,
      "modified": 1498096349762,
      "parent": null,
      "plugins": {},
      "trashed": null,
      "type": "header",
      "types": {},
      "views": {}
    },
    {
      "_id": null,
      "_rev": null,
      "children": [
        {
          "_id": null,
          "_rev": null,
          "children": [],
          "completed": null,
          "content": "We've got two reason source files at the moment: `Main.re` and `TodoApp.re`.",
          "created": 1498057807020,
          "modified": 1498096343683,
          "parent": null,
          "plugins": {},
          "trashed": null,
          "type": "normal",
          "types": {},
          "views": {}
        },
        {
          "_id": null,
          "_rev": null,
          "children": [],
          "completed": null,
          "content": "/* Main.re */\nReactDOMRe.renderToElementWithId <TodoApp /> \"root\";",
          "created": 1498057867709,
          "modified": 1499094329494,
          "parent": null,
          "plugins": {},
          "trashed": null,
          "type": "code",
          "types": {
            "code": {
              "kernelId": null,
              "language": "reason",
              "lastRun": null
            }
          },
          "views": {}
        },
        {
          "_id": null,
          "_rev": null,
          "children": [],
          "completed": null,
          "content": "Here we have a single function call, which translates (roughly) to `ReactDOM.render(<TodoApp />, document.getElementById(\"root\"))`.",
          "created": 1499089811989,
          "modified": 1499228897833,
          "parent": null,
          "plugins": {},
          "trashed": null,
          "type": "normal",
          "types": {},
          "views": {}
        },
        {
          "_id": null,
          "_rev": null,
          "children": [
            {
              "_id": null,
              "_rev": null,
              "children": [],
              "completed": null,
              "content": "One thing you'll notice is that there's no `require()` or `import` statement indicating where `TodoApp` came from. In OCaml, inter-file (and indeed inter-package) dependencies are all *inferred* from your code. Basically, the compiler sees `TodoApp` isn't defined anywhere in this file, so there must be a file `TodoApp.re` (or `.ml`) somewhere that this depends on.",
              "created": 1498057937596,
              "modified": 1499228806577,
              "parent": null,
              "plugins": {},
              "trashed": null,
              "type": "normal",
              "types": {},
              "views": {}
            },
            {
              "_id": null,
              "_rev": null,
              "children": [],
              "completed": null,
              "content": "Currently, there is no distinction made between files in your own project and files in libraries you depend on -- meaning that if `ReasonReact` had a file called `Utils.re` inside of it, you wouldn't be able to have a file named `Utils.re` in your project. As you might imagine, this is something of a mess, and is being [actively worked on](https://github.com/BuckleScript/bucklescript/issues/1584).",
              "created": 1498058321087,
              "modified": 1498096343683,
              "parent": null,
              "plugins": {},
              "trashed": null,
              "type": "note",
              "types": {},
              "views": {}
            }
          ],
          "completed": null,
          "content": "Inter-file dependencies",
          "created": 1498057923580,
          "modified": 1498096343683,
          "parent": null,
          "plugins": {},
          "trashed": null,
          "type": "header",
          "types": {
            "code": {
              "kernelId": null,
              "language": "javascript",
              "lastRun": null
            }
          },
          "views": {}
        },
        {
          "_id": null,
          "_rev": null,
          "children": [
            {
              "_id": null,
              "_rev": null,
              "children": [],
              "completed": null,
              "content": "Let's look at what `<TodoApp />` desugars to in ReasonReact:",
              "created": 1498059254579,
              "modified": 1498096343683,
              "parent": null,
              "plugins": {},
              "trashed": null,
              "type": "normal",
              "types": {},
              "views": {}
            },
            {
              "_id": null,
              "_rev": null,
              "children": [],
              "completed": null,
              "content": "TodoApp.make [||];",
              "created": 1498059280696,
              "modified": 1498971218460,
              "parent": null,
              "plugins": {},
              "trashed": null,
              "type": "code",
              "types": {
                "code": {
                  "kernelId": null,
                  "language": "reason",
                  "lastRun": null
                }
              },
              "views": {}
            },
            {
              "_id": null,
              "_rev": null,
              "children": [],
              "completed": null,
              "content": "This means \"call the `make` function in the `TodoApp` module with a single argument, an empty array\".",
              "created": 1498095463983,
              "modified": 1498096343683,
              "parent": null,
              "plugins": {},
              "trashed": null,
              "type": "normal",
              "types": {},
              "views": {}
            },
            {
              "_id": null,
              "_rev": null,
              "children": [],
              "completed": null,
              "content": "If there had been some props and some children, it would desugar like this:",
              "created": 1498059314955,
              "modified": 1499228922960,
              "parent": null,
              "plugins": {},
              "trashed": null,
              "type": "normal",
              "types": {
                "code": {
                  "kernelId": null,
                  "language": "javascript",
                  "lastRun": null
                }
              },
              "views": {}
            },
            {
              "_id": null,
              "_rev": null,
              "children": [],
              "completed": null,
              "content": "<TodoApp some=\"thing\" other=12>child1 child2</TodoApp>\n/* becomes */\nTodoApp.make some::\"thing\" other::12 [|child1, child2|];",
              "created": 1498059337890,
              "modified": 1498971226819,
              "parent": null,
              "plugins": {},
              "trashed": null,
              "type": "code",
              "types": {
                "code": {
                  "kernelId": null,
                  "language": "reason",
                  "lastRun": null
                }
              },
              "views": {}
            },
            {
              "_id": null,
              "_rev": null,
              "children": [
                {
                  "_id": null,
                  "_rev": null,
                  "children": [],
                  "completed": null,
                  "content": "Calling a function in Reason, like OCaml and Haskell, doesn't involve parenthesis or commas. `a b c` is akin to JavaScript's `a(b, c)`. There's an [open pull request](https://github.com/facebook/reason/pull/1299) to move to more js-like syntax.",
                  "created": 1498064996794,
                  "modified": 1498096343683,
                  "parent": null,
                  "plugins": {},
                  "trashed": null,
                  "type": "normal",
                  "types": {},
                  "views": {}
                },
                {
                  "_id": null,
                  "_rev": null,
                  "children": [],
                  "completed": null,
                  "content": "`[| val, val |]` is array literal syntax. An array is fixed-length & mutable, with O(1) random access, in comparison to a List, which is singly linked & immutable, with O(n) random access.",
                  "created": 1498059425087,
                  "modified": 1498096343683,
                  "parent": null,
                  "plugins": {},
                  "trashed": null,
                  "type": "normal",
                  "types": {},
                  "views": {}
                },
                {
                  "_id": null,
                  "_rev": null,
                  "children": [],
                  "completed": null,
                  "content": "prop values don't have the `{}` curly wrappers what we know from JSX, they are parsed as expressions. So `a=some_vbl_name` is perfectly fine.",
                  "created": 1498059575475,
                  "modified": 1499228960919,
                  "parent": null,
                  "plugins": {},
                  "trashed": null,
                  "type": "normal",
                  "types": {},
                  "views": {}
                },
                {
                  "_id": null,
                  "_rev": null,
                  "children": [],
                  "completed": null,
                  "content": "Children are also expressions -- in contrast to JSX, where they are strings by default.",
                  "created": 1498059649948,
                  "modified": 1499228969550,
                  "parent": null,
                  "plugins": {},
                  "trashed": null,
                  "type": "normal",
                  "types": {},
                  "views": {}
                }
              ],
              "completed": null,
              "content": "Some key points here",
              "created": 1498059421230,
              "modified": 1498096343683,
              "parent": null,
              "plugins": {},
              "trashed": null,
              "type": "list",
              "types": {
                "code": {
                  "kernelId": null,
                  "language": "javascript",
                  "lastRun": null
                }
              },
              "views": {}
            }
          ],
          "completed": null,
          "content": "ReasonReact's JSX",
          "created": 1498059077208,
          "modified": 1499228883897,
          "parent": null,
          "plugins": {},
          "trashed": null,
          "type": "header",
          "types": {},
          "views": {}
        },
        {
          "_id": null,
          "_rev": null,
          "children": [],
          "completed": null,
          "content": "So we know that `TodoApp` needs to have a `make` function that takes an array of children. Let's take a look at it.",
          "created": 1498061432879,
          "modified": 1498096343683,
          "parent": null,
          "plugins": {},
          "trashed": null,
          "type": "normal",
          "types": {
            "code": {
              "kernelId": null,
              "language": "javascript",
              "lastRun": null
            }
          },
          "views": {}
        },
        {
          "_id": null,
          "_rev": null,
          "children": [
            {
              "_id": null,
              "_rev": null,
              "children": [],
              "completed": null,
              "content": "Mouse over any identifier or expression to see the type that OCaml has inferred for it. The `/* ... */` lines are collapsed - click to expand/collapse them.",
              "created": 1499229852422,
              "modified": 1499229923828,
              "parent": null,
              "plugins": {},
              "trashed": null,
              "type": "note",
              "types": {
                "code": {
                  "kernelId": null,
                  "language": "reason",
                  "lastRun": null
                }
              },
              "views": {}
            },
            {
              "_id": null,
              "_rev": null,
              "children": [
                {
                  "_id": null,
                  "_rev": null,
                  "children": [],
                  "completed": null,
                  "content": "/* @render */\nReactDOMRe.renderToElementWithId <TodoApp /> \"root\";",
                  "created": 1499089766012,
                  "modified": 1499142344215,
                  "parent": null,
                  "plugins": {},
                  "trashed": null,
                  "type": "code",
                  "types": {
                    "code": {
                      "kernelId": null,
                      "language": "reason",
                      "lastRun": null
                    }
                  },
                  "views": {}
                }
              ],
              "completed": null,
              "content": "/* TodoApp.re */\nlet component = ReasonReact.statelessComponent \"TodoApp\";\n\nlet make children => {\n  ...component,\n  render: fun self => {\n    <div className=\"app\">\n      <div className=\"title\">\n        (ReasonReact.stringToElement \"What to do\")\n      </div>\n      <div className=\"items\">\n        (ReasonReact.stringToElement \"Nothing\")\n      </div>\n    </div>\n  }\n};",
              "created": 1498061341613,
              "modified": 1499263805413,
              "parent": null,
              "plugins": {},
              "trashed": null,
              "type": "code",
              "types": {
                "code": {
                  "kernelId": null,
                  "language": "reason",
                  "lastRun": null
                }
              },
              "views": {}
            },
            {
              "_id": null,
              "_rev": null,
              "children": [],
              "completed": null,
              "content": "In the `make` function, we're taking a `children` argument (but ignoring it), and returning a component definition. `ReasonReact.statelessComponent` returns a default component definition (as a [record](http://facebook.github.io/reason/#built-in-data-types-record)), with various lifecycle methods & other properties that you can override with the `...record spread` syntax, which is similar to es6 object spread. In this case, we only want to override the `render` function.",
              "created": 1498061901850,
              "modified": 1499229031192,
              "parent": null,
              "plugins": {},
              "trashed": null,
              "type": "normal",
              "types": {
                "code": {
                  "kernelId": null,
                  "language": "javascript",
                  "lastRun": null
                }
              },
              "views": {}
            },
            {
              "_id": null,
              "_rev": null,
              "children": [],
              "completed": null,
              "content": "In Reason, like OCaml, Haskell, and Lisps in general, there is no explicit `return` statement for designating the result of a function. The value of any block is equal to the value of the last expression in it. In fact, a block is nothing more than a sequence of expressions where we ignore all but the last value. ",
              "created": 1498095620007,
              "modified": 1498699192934,
              "parent": null,
              "plugins": {},
              "trashed": null,
              "type": "note",
              "types": {},
              "views": {}
            },
            {
              "_id": null,
              "_rev": null,
              "children": [],
              "completed": null,
              "content": "Our render function takes a single argument, `self` (here's [the type definition](https://github.com/reasonml/reason-react/blob/master/src/reasonReact.rei#L78)). For stateful components, you can access the state via `self.state` and updated it via `self.update`. As we're currently stateless, we don't use it at all.",
              "created": 1498062712535,
              "modified": 1499263926061,
              "parent": null,
              "plugins": {},
              "trashed": null,
              "type": "normal",
              "types": {},
              "views": {}
            },
            {
              "_id": null,
              "_rev": null,
              "children": [],
              "completed": null,
              "content": "We return some virtual dom elements! Tags that start with lower-case letters (like `div`) are intepreted as DOM elements, and become straight `React.createElement` calls in the compiled JS.",
              "created": 1498063096624,
              "modified": 1499229143438,
              "parent": null,
              "plugins": {},
              "trashed": null,
              "type": "normal",
              "types": {},
              "views": {}
            },
            {
              "_id": null,
              "_rev": null,
              "children": [],
              "completed": null,
              "content": "`ReasonReact.stringToElement` is required to satisfy the type system -- we can't drop in React elements and strings into the same array, we have to wrap the strings with this function first. In my code I often have an alias at the top of the file `let se = ReasonReact.stringToElement;` to make it less cumbersome.",
              "created": 1498063255193,
              "modified": 1499229163748,
              "parent": null,
              "plugins": {},
              "trashed": null,
              "type": "normal",
              "types": {},
              "views": {}
            }
          ],
          "completed": null,
          "content": "Defining a component",
          "created": 1498065505087,
          "modified": 1499229852422,
          "parent": null,
          "plugins": {},
          "trashed": null,
          "type": "header",
          "types": {},
          "views": {}
        }
      ],
      "completed": null,
      "content": "Step 0: The included code",
      "created": 1498057798811,
      "modified": 1499209236135,
      "parent": null,
      "plugins": {},
      "trashed": null,
      "type": "header",
      "types": {},
      "views": {}
    },
    {
      "_id": null,
      "_rev": null,
      "children": [
        {
          "_id": null,
          "_rev": null,
          "children": [
            {
              "_id": null,
              "_rev": null,
              "children": [],
              "completed": null,
              "content": "Our state will be just a list of Todo items.",
              "created": 1498096446243,
              "modified": 1498098611895,
              "parent": null,
              "plugins": {},
              "trashed": null,
              "type": "normal",
              "types": {},
              "views": {}
            },
            {
              "_id": null,
              "_rev": null,
              "children": [],
              "completed": null,
              "content": "/* TodoApp_1_1.re :12 */\ntype item = {\n  title: string,\n  completed: bool,\n};\ntype state = {\n  /* this is a type w/ a type argument,\n   * similar to List<Item> in TypeScript,\n   * Flow, or Java */\n  items: list item,\n};\n\nlet component = ReasonReact.statefulComponent \"TodoApp\";\n\n/* I've gone ahead and made a shortened name for converting strings to elements */\nlet se = ReasonReact.stringToElement;\nlet make children => {\n  ...component,\n  initialState: fun () => {\n    items: [{\n      title: \"Write some things to do\",\n      completed: false,\n    }]\n  },\n  render: fun {state: {items}} => {\n    let numItems = List.length items;\n    <div className=\"app\">\n      <div className=\"title\">\n        (se \"What to do\")\n      </div>\n      <div className=\"items\">\n        (se \"Nothing\")\n      </div>\n      <div className=\"footer\">\n        (se ((string_of_int numItems) ^ \" items\"))\n      </div>\n    </div>\n  }\n};",
              "created": 1498097104985,
              "modified": 1499263740737,
              "parent": null,
              "plugins": {},
              "trashed": null,
              "type": "code",
              "types": {
                "code": {
                  "kernelId": null,
                  "language": "reason",
                  "lastRun": null
                }
              },
              "views": {}
            },
            {
              "_id": null,
              "_rev": null,
              "children": [],
              "completed": null,
              "content": "If you're familiar with [flow](https://flow.org/) or [typescript](https://www.typescriptlang.org/) this syntax shouldn't look too foreign to you.",
              "created": 1498097109361,
              "modified": 1499209302367,
              "parent": null,
              "plugins": {},
              "trashed": null,
              "type": "normal",
              "types": {
                "code": {
                  "kernelId": null,
                  "language": "javascript",
                  "lastRun": null
                }
              },
              "views": {}
            },
            {
              "_id": null,
              "_rev": null,
              "children": [],
              "completed": null,
              "content": "One important difference is that you can't nest type declarations like you can in flow or typescript. For example, this is illegal:",
              "created": 1498097179176,
              "modified": 1498098622002,
              "parent": null,
              "plugins": {},
              "trashed": null,
              "type": "normal",
              "types": {},
              "views": {}
            },
            {
              "_id": null,
              "_rev": null,
              "children": [],
              "completed": null,
              "content": "type state = {\n  /* won't compile! */\n  items: list {\n    title: string,\n    completed: bool,\n  }\n}",
              "created": 1498097205159,
              "modified": 1499090197813,
              "parent": null,
              "plugins": {},
              "trashed": null,
              "type": "code",
              "types": {
                "code": {
                  "kernelId": null,
                  "language": "reason",
                  "lastRun": null
                }
              },
              "views": {}
            },
            {
              "_id": null,
              "_rev": null,
              "children": [],
              "completed": null,
              "content": "Another important thing to note is that type names (and indeed variable names) *must* start with a lower-case letter. Variant (enum) cases and Module names must start with an upper-case letter.",
              "created": 1498097243281,
              "modified": 1498098584725,
              "parent": null,
              "plugins": {},
              "trashed": null,
              "type": "normal",
              "types": {
                "code": {
                  "kernelId": null,
                  "language": "javascript",
                  "lastRun": null
                }
              },
              "views": {}
            }
          ],
          "completed": null,
          "content": "Declaring types",
          "created": 1498097651475,
          "modified": 1498097796007,
          "parent": null,
          "plugins": {},
          "trashed": null,
          "type": "header",
          "types": {},
          "views": {}
        },
        {
          "_id": null,
          "_rev": null,
          "children": [
            {
              "_id": null,
              "_rev": null,
              "children": [],
              "completed": null,
              "content": "We'll start out by changing `ReasonReact.statelessComponent` to `ReasonReact.statefulComponent`. Then our `make` function gets a little more interesting.",
              "created": 1498097817653,
              "modified": 1498098672805,
              "parent": null,
              "plugins": {},
              "trashed": null,
              "type": "normal",
              "types": {},
              "views": {}
            },
            {
              "_id": null,
              "_rev": null,
              "children": [
                {
                  "_id": null,
                  "_rev": null,
                  "children": [],
                  "completed": null,
                  "content": "/* @render */\nReactDOMRe.renderToElementWithId <TodoApp_1_1 /> \"root\";",
                  "created": 1499089873530,
                  "modified": 1499142371461,
                  "parent": null,
                  "plugins": {},
                  "trashed": null,
                  "type": "code",
                  "types": {
                    "code": {
                      "kernelId": null,
                      "language": "reason",
                      "lastRun": null
                    }
                  },
                  "views": {}
                }
              ],
              "completed": null,
              "content": "/* @show TodoApp_1_1.re 13: */",
              "created": 1499094703465,
              "modified": 1499096059024,
              "parent": null,
              "plugins": {},
              "trashed": null,
              "type": "code",
              "types": {
                "code": {
                  "kernelId": null,
                  "language": "reason",
                  "lastRun": null
                }
              },
              "views": {}
            },
            {
              "_id": null,
              "_rev": null,
              "children": [],
              "completed": null,
              "content": "`initialState` is what you'd expect, and now the first argument to our `render` function gets useful. The argument destructuring syntax is just like in JavaScript, where we get the `state.items` right out of the self argument.",
              "created": 1498098778775,
              "modified": 1499263774866,
              "parent": null,
              "plugins": {},
              "trashed": null,
              "type": "normal",
              "types": {
                "code": {
                  "kernelId": null,
                  "language": "javascript",
                  "lastRun": null
                }
              },
              "views": {}
            },
            {
              "_id": null,
              "_rev": null,
              "children": [],
              "completed": null,
              "content": "I'll leave it as an exercise for the reader to fix it so that it says \"1 item\" instead of \"1 items\".",
              "created": 1499209162527,
              "modified": 1499229449719,
              "parent": null,
              "plugins": {},
              "trashed": null,
              "type": "note",
              "types": {},
              "views": {}
            }
          ],
          "completed": null,
          "content": "Making a stateful component",
          "created": 1498097797880,
          "modified": 1499229449719,
          "parent": null,
          "plugins": {},
          "trashed": null,
          "type": "header",
          "types": {},
          "views": {}
        },
        {
          "_id": null,
          "_rev": null,
          "children": [
            {
              "_id": null,
              "_rev": null,
              "children": [],
              "completed": null,
              "content": "Let's make a button that adds an item to the list.",
              "created": 1498099270142,
              "modified": 1498101663752,
              "parent": null,
              "plugins": {},
              "trashed": null,
              "type": "normal",
              "types": {},
              "views": {}
            },
            {
              "_id": null,
              "_rev": null,
              "children": [
                {
                  "_id": null,
                  "_rev": null,
                  "children": [],
                  "completed": null,
                  "content": "/* @render */\nReactDOMRe.renderToElementWithId <TodoApp_1_2 /> \"root\";",
                  "created": 1499089873530,
                  "modified": 1499142418884,
                  "parent": null,
                  "plugins": {},
                  "trashed": null,
                  "type": "code",
                  "types": {
                    "code": {
                      "kernelId": null,
                      "language": "reason",
                      "lastRun": null
                    }
                  },
                  "views": {}
                }
              ],
              "completed": null,
              "content": "/* TodoApp_1_2.re 12:12 23:33 40: */\ntype item = {\n  title: string,\n  completed: bool,\n};\ntype state = {\n  items: list item,\n};\n\nlet component = ReasonReact.statefulComponent \"TodoApp\";\n\nlet newItem () => {title: \"Click a button\", completed: true};\n\nlet se = ReasonReact.stringToElement;\nlet make children => {\n  ...component,\n  initialState: fun () => {\n    items: [{\n      title: \"Write some things to do\",\n      completed: false,\n    }]\n  },\n  render: fun {state: {items}} => {\n    let numItems = List.length items;\n    <div className=\"app\">\n      <div className=\"title\">\n        (se \"What to do\")\n        <button\n          onClick=(fun evt => Js.log \"didn't add something\")\n        >\n          (se \"Add something\")\n        </button>\n      </div>\n      <div className=\"items\">\n        (se \"Nothing\")\n      </div>\n      <div className=\"footer\">\n        (se ((string_of_int numItems) ^ \" items\"))\n      </div>\n    </div>\n  }\n};",
              "created": 1498099292375,
              "modified": 1499263965716,
              "parent": null,
              "plugins": {},
              "trashed": null,
              "type": "code",
              "types": {
                "code": {
                  "kernelId": null,
                  "language": "reason",
                  "lastRun": null
                }
              },
              "views": {}
            },
            {
              "_id": null,
              "_rev": null,
              "children": [],
              "completed": null,
              "content": "If this were JavaScript & React, this is where we'd call `this.setState`. In ReasonReact, we make an updater function that takes the current state and returns a new one. `update`'s type looks like `('payload => self => update) => ('payload => unit)`, meaning accepts an updaters function of two arguments, some `payload` (in our case a click event) and the `self`, and returns a simple callback that `onClick` is expecting.",
              "created": 1498099723593,
              "modified": 1499264172870,
              "parent": null,
              "plugins": {},
              "trashed": null,
              "type": "normal",
              "types": {
                "code": {
                  "kernelId": null,
                  "language": "javascript",
                  "lastRun": null
                }
              },
              "views": {}
            },
            {
              "_id": null,
              "_rev": null,
              "children": [
                {
                  "_id": null,
                  "_rev": null,
                  "children": [],
                  "completed": null,
                  "content": "/* @render */\nReactDOMRe.renderToElementWithId <TodoApp_1_3 /> \"root\";",
                  "created": 1499089873530,
                  "modified": 1499142375604,
                  "parent": null,
                  "plugins": {},
                  "trashed": null,
                  "type": "code",
                  "types": {
                    "code": {
                      "kernelId": null,
                      "language": "reason",
                      "lastRun": null
                    }
                  },
                  "views": {}
                }
              ],
              "completed": null,
              "content": "/* TodoApp_1_3.re 29:38 */\ntype item = {\n  title: string,\n  completed: bool,\n};\ntype state = {\n  items: list item,\n};\n\nlet component = ReasonReact.statefulComponent \"TodoApp\";\n\nlet newItem () => {title: \"Click a button\", completed: true};\n\nlet se = ReasonReact.stringToElement;\n\nlet make children => {\n  ...component,\n  initialState: fun () => {\n    items: [{\n      title: \"Write some things to do\",\n      completed: false,\n    }]\n  },\n  render: fun {state: {items}, update} => {\n    let numItems = List.length items;\n    <div className=\"app\">\n      <div className=\"title\">\n        (se \"What to do\")\n        <button\n          onClick=(update (fun evt {state} => {\n            ReasonReact.Update {\n              ...state,\n              items: [newItem(), ...state.items]\n            }\n          }))\n        >\n          (se \"Add something\")\n        </button>\n      </div>\n      <div className=\"items\">\n        (se \"Nothing\")\n      </div>\n      <div className=\"footer\">\n        (se ((string_of_int numItems) ^ \" items\"))\n      </div>\n    </div>\n  }\n};",
              "created": 1498969978306,
              "modified": 1499263992288,
              "parent": null,
              "plugins": {},
              "trashed": null,
              "type": "code",
              "types": {
                "code": {
                  "kernelId": null,
                  "language": "reason",
                  "lastRun": null
                }
              },
              "views": {}
            },
            {
              "_id": null,
              "_rev": null,
              "children": [],
              "completed": null,
              "content": "If we determined that we didn't want to update the state (and avoid a re-render), we could return `ReasonReact.NoUpdate`.",
              "created": 1498099483148,
              "modified": 1498100925834,
              "parent": null,
              "plugins": {},
              "trashed": null,
              "type": "normal",
              "types": {
                "code": {
                  "kernelId": null,
                  "language": "javascript",
                  "lastRun": null
                }
              },
              "views": {}
            },
            {
              "_id": null,
              "_rev": null,
              "children": [],
              "completed": null,
              "content": "`Update` and `NoUpdate` are examples of variant values in Reason (kinda like enums but much better), which you will be familiar if you've used Swift or Haskell. In [TypeScript](https://blog.mariusschulz.com/2016/11/03/typescript-2-0-tagged-union-types) and [Flow](https://flow.org/blog/2015/07/03/Disjoint-Unions/), we approximate these with tagged unions.",
              "created": 1498100925834,
              "modified": 1499229402191,
              "parent": null,
              "plugins": {},
              "trashed": null,
              "type": "note",
              "types": {},
              "views": {}
            },
            {
              "_id": null,
              "_rev": null,
              "children": [],
              "completed": null,
              "content": "Now when we click the button, the count at the bottom goes up!",
              "created": 1498101911713,
              "modified": 1498101925569,
              "parent": null,
              "plugins": {},
              "trashed": null,
              "type": "normal",
              "types": {},
              "views": {}
            }
          ],
          "completed": null,
          "content": "Reacting to events and changing state",
          "created": 1498099267197,
          "modified": 1499229449719,
          "parent": null,
          "plugins": {},
          "trashed": null,
          "type": "header",
          "types": {},
          "views": {}
        }
      ],
      "completed": null,
      "content": "Step 1: Adding some state",
      "created": 1498096432656,
      "modified": 1498099267197,
      "parent": null,
      "plugins": {},
      "trashed": null,
      "type": "header",
      "types": {},
      "views": {}
    },
    {
      "_id": null,
      "_rev": null,
      "children": [
        {
          "_id": null,
          "_rev": null,
          "children": [
            {
              "_id": null,
              "_rev": null,
              "children": [],
              "completed": null,
              "content": "We're going to want to have a component for rendering the items, so let's make one. Since it's small, we won't have it be its own file -- we'll use a nested module.",
              "created": 1498101790432,
              "modified": 1499229817525,
              "parent": null,
              "plugins": {},
              "trashed": null,
              "type": "normal",
              "types": {},
              "views": {}
            },
            {
              "_id": null,
              "_rev": null,
              "children": [
                {
                  "_id": null,
                  "_rev": null,
                  "children": [],
                  "completed": null,
                  "content": "/* @render 350x100 */\nlet module TodoItem = TodoApp_2_1.TodoItem;\nReactDOMRe.renderToElementWithId <TodoItem item={TodoApp_2_1.title: \"Hello world\", completed: false} /> \"root\";",
                  "created": 1499089873530,
                  "modified": 1499174372324,
                  "parent": null,
                  "plugins": {},
                  "trashed": null,
                  "type": "code",
                  "types": {
                    "code": {
                      "kernelId": null,
                      "language": "reason",
                      "lastRun": null
                    }
                  },
                  "views": {}
                }
              ],
              "completed": null,
              "content": "/* TodoApp_2_1.re :23 */\ntype item = {\n  title: string,\n  completed: bool,\n};\n\nlet se = ReasonReact.stringToElement;\n\nlet module TodoItem = {\n  let component = ReasonReact.statelessComponent \"TodoItem\";\n  let make ::item children => {\n    ...component,\n    render: fun self =>\n      <div className=\"item\">\n        <input\n          _type=\"checkbox\"\n          checked=(Js.Boolean.to_js_boolean item.completed)\n          /* TODO make interactive */\n        />\n        (se item.title)\n      </div>\n  };\n};\n\ntype state = {\n  items: list item,\n};\n\nlet component = ReasonReact.statefulComponent \"TodoApp\";\n\nlet newItem () => {title: \"Click a button\", completed: true};\n\nlet make children => {\n  ...component,\n  initialState: fun () => {\n    items: [{\n      title: \"Write some things to do\",\n      completed: false,\n    }]\n  },\n  render: fun {state: {items}, update} => {\n    let numItems = List.length items;\n    <div className=\"app\">\n      <div className=\"title\">\n        (se \"What to do\")\n        <button\n          onClick=(update (fun evt {state} => {\n            ReasonReact.Update {\n              ...state,\n              items: [newItem(), ...state.items]\n            }\n          }))\n        >\n          (se \"Add something\")\n        </button>\n      </div>\n      <div className=\"items\">\n        (ReasonReact.arrayToElement\n          (Array.of_list\n            (List.map (fun item => <TodoItem item />) items)\n          )\n        )\n      </div>\n      <div className=\"footer\">\n        (se ((string_of_int numItems) ^ \" items\"))\n      </div>\n    </div>\n  }\n};",
              "created": 1498102282814,
              "modified": 1499264546996,
              "parent": null,
              "plugins": {},
              "trashed": null,
              "type": "code",
              "types": {
                "code": {
                  "kernelId": null,
                  "language": "reason",
                  "lastRun": null
                }
              },
              "views": {}
            },
            {
              "_id": null,
              "_rev": null,
              "children": [],
              "completed": null,
              "content": "So this is another stateless component, except this one accepts a property: `item`. The `::argname` syntax means \"this function takes a labeled argument which is known as `item` both externally and internally\". Swift and Objective C also allow you have labeled arguments, with an external name that is optionally different from the internal one. If you wanted them to be different, you would write e.g. `fun externalFacingName::internalFacingName => `. `children` is an unnamed argument.",
              "created": 1498091603700,
              "modified": 1499306652779,
              "parent": null,
              "plugins": {},
              "trashed": null,
              "type": "normal",
              "types": {
                "code": {
                  "kernelId": null,
                  "language": "javascript",
                  "lastRun": null
                }
              },
              "views": {}
            },
            {
              "_id": null,
              "_rev": null,
              "children": [],
              "completed": null,
              "content": "In OCaml, named arguments can be given in any order, but unnamed arguments cannot. So if you had a function `let myfn = fun ::a ::b c d => {}` where `c` was an `int` and `d` was a `string`, you could call it `myfn b::2 a::1 3 \"hi\"` or `myfn a::3 3 \"hi\" b::1` but not `myfn a::2 b::3 \"hi\" 4`.",
              "created": 1498091740087,
              "modified": 1498701240137,
              "parent": null,
              "plugins": {},
              "trashed": null,
              "type": "note",
              "types": {},
              "views": {}
            }
          ],
          "completed": null,
          "content": "The TodoItem component",
          "created": 1498701231745,
          "modified": 1499089919681,
          "parent": null,
          "plugins": {},
          "trashed": null,
          "type": "header",
          "types": {},
          "views": {}
        },
        {
          "_id": null,
          "_rev": null,
          "children": [
            {
              "_id": null,
              "_rev": null,
              "children": [],
              "completed": null,
              "content": "Now that we've got a `TodoItem` component, let's use it! We'll replace the section that's currently just `(se \"Nothing\")` with this:",
              "created": 1498701262859,
              "modified": 1498704894077,
              "parent": null,
              "plugins": {},
              "trashed": null,
              "type": "normal",
              "types": {},
              "views": {}
            },
            {
              "_id": null,
              "_rev": null,
              "children": [
                {
                  "_id": null,
                  "_rev": null,
                  "children": [],
                  "completed": null,
                  "content": "/* @render */\nReactDOMRe.renderToElementWithId <TodoApp_2_1 /> \"root\";",
                  "created": 1499089873530,
                  "modified": 1499096476612,
                  "parent": null,
                  "plugins": {},
                  "trashed": null,
                  "type": "code",
                  "types": {
                    "code": {
                      "kernelId": null,
                      "language": "reason",
                      "lastRun": null
                    }
                  },
                  "views": {}
                }
              ],
              "completed": null,
              "content": "/* @show TodoApp_2_1.re 57:63 */",
              "created": 1499096432393,
              "modified": 1499174878531,
              "parent": null,
              "plugins": {},
              "trashed": null,
              "type": "code",
              "types": {
                "code": {
                  "kernelId": null,
                  "language": "reason",
                  "lastRun": null
                }
              },
              "views": {}
            },
            {
              "_id": null,
              "_rev": null,
              "children": [],
              "completed": null,
              "content": "In the center of all this you can see the function that takes our data and renders a react element.",
              "created": 1498704997442,
              "modified": 1498705091578,
              "parent": null,
              "plugins": {},
              "trashed": null,
              "type": "normal",
              "types": {
                "code": {
                  "kernelId": null,
                  "language": "javascript",
                  "lastRun": null
                }
              },
              "views": {}
            },
            {
              "_id": null,
              "_rev": null,
              "children": [],
              "completed": null,
              "content": "fun item => <TodoItem item />",
              "created": 1498705023112,
              "modified": 1498951379820,
              "parent": null,
              "plugins": {},
              "trashed": null,
              "type": "code",
              "types": {
                "code": {
                  "kernelId": null,
                  "language": "reason",
                  "lastRun": null
                }
              },
              "views": {}
            },
            {
              "_id": null,
              "_rev": null,
              "children": [],
              "completed": null,
              "content": "Another difference from JSX is that an attribute without a value is \"punned\", meaning that `<TodoItem item />` is the same as `<TodoItem item=item />`. In JSX, lone attributes are interpreted as `<TodoItem item={true} />`.",
              "created": 1498704997442,
              "modified": 1498705167466,
              "parent": null,
              "plugins": {},
              "trashed": null,
              "type": "normal",
              "types": {
                "code": {
                  "kernelId": null,
                  "language": "javascript",
                  "lastRun": null
                }
              },
              "views": {}
            },
            {
              "_id": null,
              "_rev": null,
              "children": [],
              "completed": null,
              "content": "React.arrayToElement (Array.of_list (List.map /*...*/ items))",
              "created": 1498705039024,
              "modified": 1498951381749,
              "parent": null,
              "plugins": {},
              "trashed": null,
              "type": "code",
              "types": {
                "code": {
                  "kernelId": null,
                  "language": "reason",
                  "lastRun": null
                }
              },
              "views": {}
            },
            {
              "_id": null,
              "_rev": null,
              "children": [],
              "completed": null,
              "content": "And now we've got the nuts and bolts of calling that function for each item and appeasing the type system. Another way to write the above is",
              "created": 1498705189773,
              "modified": 1498705252837,
              "parent": null,
              "plugins": {},
              "trashed": null,
              "type": "normal",
              "types": {
                "code": {
                  "kernelId": null,
                  "language": "javascript",
                  "lastRun": null
                }
              },
              "views": {}
            },
            {
              "_id": null,
              "_rev": null,
              "children": [],
              "completed": null,
              "content": "List.map /*...*/ items |> Array.of_list |> React.arrayToElement",
              "created": 1498705039024,
              "modified": 1498951383397,
              "parent": null,
              "plugins": {},
              "trashed": null,
              "type": "code",
              "types": {
                "code": {
                  "kernelId": null,
                  "language": "reason",
                  "lastRun": null
                }
              },
              "views": {}
            },
            {
              "_id": null,
              "_rev": null,
              "children": [],
              "completed": null,
              "content": "The pipe `|>` is a left-associative binary operator that's defined as `a |> b == b a`. It can be quite nice when you've got some data and you just need to pipe it through a list of conversions.",
              "created": 1498705272051,
              "modified": 1498705351817,
              "parent": null,
              "plugins": {},
              "trashed": null,
              "type": "normal",
              "types": {
                "code": {
                  "kernelId": null,
                  "language": "javascript",
                  "lastRun": null
                }
              },
              "views": {}
            }
          ],
          "completed": null,
          "content": "Rendering a list",
          "created": 1498701245225,
          "modified": 1499096468799,
          "parent": null,
          "plugins": {},
          "trashed": null,
          "type": "header",
          "types": {},
          "views": {}
        },
        {
          "_id": null,
          "_rev": null,
          "children": [
            {
              "_id": null,
              "_rev": null,
              "children": [],
              "completed": null,
              "content": "If you're familiar with React, you'll know that we really ought to be using a [`key`](https://facebook.github.io/react/docs/lists-and-keys.html) to uniquely identify each rendered `TodoItem`, and in fact we'll want unique keys once we get around to modifying the items as well.",
              "created": 1498705517101,
              "modified": 1499209341397,
              "parent": null,
              "plugins": {},
              "trashed": null,
              "type": "normal",
              "types": {},
              "views": {}
            },
            {
              "_id": null,
              "_rev": null,
              "children": [],
              "completed": null,
              "content": "Let's add an `id` property to our `item` type, and add an `id` of `0` to our initialState item.",
              "created": 1498705570349,
              "modified": 1498705610042,
              "parent": null,
              "plugins": {},
              "trashed": null,
              "type": "normal",
              "types": {},
              "views": {}
            },
            {
              "_id": null,
              "_rev": null,
              "children": [],
              "completed": null,
              "content": "/* TodoApp_2_2.re :6 40:46 */\ntype item = {\n  id: int,\n  title: string,\n  completed: bool,\n};\n\nlet se = ReasonReact.stringToElement;\n\nlet module TodoItem = {\n  let component = ReasonReact.statelessComponent \"TodoItem\";\n  let make ::item children => {\n    ...component,\n    render: fun _ =>\n      <div className=\"item\">\n        <input\n          _type=\"checkbox\"\n          checked=(Js.Boolean.to_js_boolean item.completed)\n          /* TODO make interactive */\n        />\n        (se item.title)\n      </div>\n  };\n};\n\ntype state = {\n  items: list item,\n};\n\nlet component = ReasonReact.statefulComponent \"TodoApp\";\n\nlet lastId = 0;\nlet newItem () => {\n  let lastId = lastId + 1;\n  {id: lastId, title: \"Click a button\", completed: true};\n};\n\nlet make children => {\n  ...component,\n  initialState: fun () => {\n    items: [{\n      id: 0,\n      title: \"Write some things to do\",\n      completed: false,\n    }]\n  },\n  render: fun {state: {items}, update} => {\n    let numItems = List.length items;\n    <div className=\"app\">\n      <div className=\"title\">\n        (se \"What to do\")\n        <button\n          onClick=(update (fun evt {state} => {\n            ReasonReact.Update {\n              ...state,\n              items: [newItem(), ...state.items]\n            }\n          }))\n        >\n          (se \"Add something\")\n        </button>\n      </div>\n      <div className=\"items\">\n        (ReasonReact.arrayToElement\n          (Array.of_list\n            (List.map (fun item => <TodoItem item />) items)\n          )\n        )\n      </div>\n      <div className=\"footer\">\n        (se ((string_of_int numItems) ^ \" items\"))\n      </div>\n    </div>\n  }\n};",
              "created": 1498970195982,
              "modified": 1499264236051,
              "parent": null,
              "plugins": {},
              "trashed": null,
              "type": "code",
              "types": {
                "code": {
                  "kernelId": null,
                  "language": "reason",
                  "lastRun": null
                }
              },
              "views": {}
            },
            {
              "_id": null,
              "_rev": null,
              "children": [],
              "completed": null,
              "content": "But then, what do we do for the `newItem` function? We want to make sure that each item created has a unique id, and one way to do this is just have a variable that we increment by one each time we create a new item.",
              "created": 1498705610913,
              "modified": 1498705715122,
              "parent": null,
              "plugins": {},
              "trashed": null,
              "type": "normal",
              "types": {},
              "views": {}
            },
            {
              "_id": null,
              "_rev": null,
              "children": [],
              "completed": null,
              "content": "/* @show TodoApp_2_2.re 32:36 */",
              "created": 1499096753144,
              "modified": 1499174943066,
              "parent": null,
              "plugins": {},
              "trashed": null,
              "type": "code",
              "types": {
                "code": {
                  "kernelId": null,
                  "language": "reason",
                  "lastRun": null
                }
              },
              "views": {}
            },
            {
              "_id": null,
              "_rev": null,
              "children": [],
              "completed": null,
              "content": "Of course this won't work -- we're just defining a new variable that's only scoped to the `newItem` function. At the top level, `lastId` remains `0`. In order to simulate a *mutable* `let` binding, we'll use a `ref`.",
              "created": 1498705735775,
              "modified": 1499231756370,
              "parent": null,
              "plugins": {},
              "trashed": null,
              "type": "normal",
              "types": {
                "code": {
                  "kernelId": null,
                  "language": "javascript",
                  "lastRun": null
                }
              },
              "views": {}
            },
            {
              "_id": null,
              "_rev": null,
              "children": [],
              "completed": null,
              "content": "/* TodoApp_2_3.re 32:36 */\ntype item = {\n  id: int,\n  title: string,\n  completed: bool,\n};\n\nlet se = ReasonReact.stringToElement;\n\nlet module TodoItem = {\n  let component = ReasonReact.statelessComponent \"TodoItem\";\n  let make ::item children => {\n    ...component,\n    render: fun _ =>\n      <div className=\"item\">\n        <input\n          _type=\"checkbox\"\n          checked=(Js.Boolean.to_js_boolean item.completed)\n          /* TODO make interactive */\n        />\n        (se item.title)\n      </div>\n  };\n};\n\ntype state = {\n  items: list item,\n};\n\nlet component = ReasonReact.statefulComponent \"TodoApp\";\n\nlet lastId = ref 0;\nlet newItem () => {\n  lastId := !lastId + 1;\n  {id: !lastId, title: \"Click a button\", completed: true};\n};\n\nlet make children => {\n  ...component,\n  initialState: fun () => {\n    items: [{\n      id: 0,\n      title: \"Write some things to do\",\n      completed: false,\n    }]\n  },\n  render: fun {state: {items}, update} => {\n    let numItems = List.length items;\n    <div className=\"app\">\n      <div className=\"title\">\n        (se \"What to do\")\n        <button\n          onClick=(update (fun evt {state} => {\n            ReasonReact.Update {\n              ...state,\n              items: [newItem(), ...state.items]\n            }\n          }))\n        >\n          (se \"Add something\")\n        </button>\n      </div>\n      <div className=\"items\">\n        (ReasonReact.arrayToElement\n          (Array.of_list\n            (List.map (fun item => <TodoItem\n              key=(string_of_int item.id)\n              item\n            />) items)\n          )\n        )\n      </div>\n      <div className=\"footer\">\n        (se ((string_of_int numItems) ^ \" items\"))\n      </div>\n    </div>\n  }\n};",
              "created": 1498970195982,
              "modified": 1499264385427,
              "parent": null,
              "plugins": {},
              "trashed": null,
              "type": "code",
              "types": {
                "code": {
                  "kernelId": null,
                  "language": "reason",
                  "lastRun": null
                }
              },
              "views": {}
            },
            {
              "_id": null,
              "_rev": null,
              "children": [],
              "completed": null,
              "content": "You update a `ref` with `:=`, and to access the value you dereference it with `!`. Now we can add our `key` property to the `<TodoItem>` components.",
              "created": 1499096855175,
              "modified": 1499096928222,
              "parent": null,
              "plugins": {},
              "trashed": null,
              "type": "normal",
              "types": {
                "code": {
                  "kernelId": null,
                  "language": "reason",
                  "lastRun": null
                }
              },
              "views": {}
            },
            {
              "_id": null,
              "_rev": null,
              "children": [
                {
                  "_id": null,
                  "_rev": null,
                  "children": [],
                  "completed": null,
                  "content": "/* @render */\nReactDOMRe.renderToElementWithId <TodoApp_2_3 /> \"root\";",
                  "created": 1499089873530,
                  "modified": 1499142397011,
                  "parent": null,
                  "plugins": {},
                  "trashed": null,
                  "type": "code",
                  "types": {
                    "code": {
                      "kernelId": null,
                      "language": "reason",
                      "lastRun": null
                    }
                  },
                  "views": {}
                }
              ],
              "completed": null,
              "content": "/* @show TodoApp_2_3.re 66:69 */",
              "created": 1499096609017,
              "modified": 1499174999480,
              "parent": null,
              "plugins": {},
              "trashed": null,
              "type": "code",
              "types": {
                "code": {
                  "kernelId": null,
                  "language": "reason",
                  "lastRun": null
                }
              },
              "views": {}
            }
          ],
          "completed": null,
          "content": "Tracking ids w/ a mutable `ref`",
          "created": 1498704653981,
          "modified": 1499096923550,
          "parent": null,
          "plugins": {},
          "trashed": null,
          "type": "header",
          "types": {},
          "views": {}
        }
      ],
      "completed": null,
      "content": "Step 2: Rendering items",
      "created": 1498101687627,
      "modified": 1498704653981,
      "parent": null,
      "plugins": {},
      "trashed": null,
      "type": "header",
      "types": {},
      "views": {}
    },
    {
      "_id": null,
      "_rev": null,
      "children": [
        {
          "_id": null,
          "_rev": null,
          "children": [
            {
              "_id": null,
              "_rev": null,
              "children": [],
              "completed": null,
              "content": "Now that our items are uniquely identified, we can enable toggling. We'll start by adding an `onToggle` prop to the `TodoItem` component, and calling it when the `div` gets clicked.",
              "created": 1499177934650,
              "modified": 1499231847209,
              "parent": null,
              "plugins": {},
              "trashed": null,
              "type": "normal",
              "types": {},
              "views": {}
            },
            {
              "_id": null,
              "_rev": null,
              "children": [],
              "completed": null,
              "content": "/* TodoApp_3_1.re 10:15 */\ntype item = {\n  id: int,\n  title: string,\n  completed: bool,\n};\n\nlet se = ReasonReact.stringToElement;\n\nlet module TodoItem = {\n  let component = ReasonReact.statelessComponent \"TodoItem\";\n  let make ::item ::onToggle children => {\n    ...component,\n    render: fun _ =>\n      <div className=\"item\" onClick=(fun evt => onToggle())>\n        <input\n          _type=\"checkbox\"\n          checked=(Js.Boolean.to_js_boolean item.completed)\n        />\n        (se item.title)\n      </div>\n  };\n};\n\ntype state = {\n  items: list item,\n};\n\nlet component = ReasonReact.statefulComponent \"TodoApp\";\n\nlet lastId = ref 0;\nlet newItem () => {\n  lastId := !lastId + 1;\n  {id: !lastId, title: \"Click a button\", completed: true};\n};\n\nlet toggleItem items id => {\n  List.map\n  (fun item => item.id === id\n    ? {...item, completed: not item.completed}\n    : item)\n  items;\n};\n\nlet make children => {\n  ...component,\n  initialState: fun () => {\n    items: [{\n      id: 0,\n      title: \"Write some things to do\",\n      completed: false,\n    }]\n  },\n  render: fun {state: {items}, update} => {\n    let numItems = List.length items;\n\n    <div className=\"app\">\n      <div className=\"title\">\n        (se \"What to do\")\n        <button\n          onClick=(update (fun evt {state} => {\n            ReasonReact.Update {\n              ...state,\n              items: [newItem(), ...state.items]\n            }\n          }))\n        >\n          (se \"Add something\")\n        </button>\n      </div>\n      <div className=\"items\">\n        (ReasonReact.arrayToElement\n          (Array.of_list\n            (List.map (fun item => <TodoItem\n              key=(string_of_int item.id)\n              onToggle=(update (fun _ {state} =>\n                ReasonReact.Update {\n                  ...state,\n                  items: toggleItem items item.id\n                }\n              ))\n              item\n            />) items)\n          )\n        )\n      </div>\n      <div className=\"footer\">\n        (se ((string_of_int numItems) ^ \" items\"))\n      </div>\n    </div>\n  }\n};\n",
              "created": 1499178994324,
              "modified": 1499264747594,
              "parent": null,
              "plugins": {},
              "trashed": null,
              "type": "code",
              "types": {
                "code": {
                  "kernelId": null,
                  "language": "reason",
                  "lastRun": null
                }
              },
              "views": {}
            },
            {
              "_id": null,
              "_rev": null,
              "children": [],
              "completed": null,
              "content": "So `onToggle` has the type `unit => unit`. `self.update` is the way to make a callback function that can update our component's state. We'll take the state object (destructured from `self`), and return an updated state object with a new items list.",
              "created": 1499180084684,
              "modified": 1499264695228,
              "parent": null,
              "plugins": {},
              "trashed": null,
              "type": "normal",
              "types": {
                "code": {
                  "kernelId": null,
                  "language": "reason",
                  "lastRun": null
                }
              },
              "views": {}
            },
            {
              "_id": null,
              "_rev": null,
              "children": [],
              "completed": null,
              "content": "/* @show TodoApp_3_1.re 74:83 */",
              "created": 1499180101144,
              "modified": 1499180140588,
              "parent": null,
              "plugins": {},
              "trashed": null,
              "type": "code",
              "types": {
                "code": {
                  "kernelId": null,
                  "language": "reason",
                  "lastRun": null
                }
              },
              "views": {}
            },
            {
              "_id": null,
              "_rev": null,
              "children": [],
              "completed": null,
              "content": "And here's what `toggleItems` looks like:",
              "created": 1499180084684,
              "modified": 1499185532330,
              "parent": null,
              "plugins": {},
              "trashed": null,
              "type": "normal",
              "types": {
                "code": {
                  "kernelId": null,
                  "language": "reason",
                  "lastRun": null
                }
              },
              "views": {}
            },
            {
              "_id": null,
              "_rev": null,
              "children": [
                {
                  "_id": null,
                  "_rev": null,
                  "children": [],
                  "completed": null,
                  "content": "/* @render */\nReactDOMRe.renderToElementWithId <TodoApp_3_1 /> \"root\";",
                  "created": 1499089873530,
                  "modified": 1499188843848,
                  "parent": null,
                  "plugins": {},
                  "trashed": null,
                  "type": "code",
                  "types": {
                    "code": {
                      "kernelId": null,
                      "language": "reason",
                      "lastRun": null
                    }
                  },
                  "views": {}
                }
              ],
              "completed": null,
              "content": "/* @show TodoApp_3_1.re 37:43 */",
              "created": 1499180101144,
              "modified": 1499188840038,
              "parent": null,
              "plugins": {},
              "trashed": null,
              "type": "code",
              "types": {
                "code": {
                  "kernelId": null,
                  "language": "reason",
                  "lastRun": null
                }
              },
              "views": {}
            },
            {
              "_id": null,
              "_rev": null,
              "children": [],
              "completed": null,
              "content": "We take a list of items and the id to toggle, and when we find the item to toggle we flip the `completed` boolean.",
              "created": 1499185625481,
              "modified": 1499185654960,
              "parent": null,
              "plugins": {},
              "trashed": null,
              "type": "normal",
              "types": {
                "code": {
                  "kernelId": null,
                  "language": "reason",
                  "lastRun": null
                }
              },
              "views": {}
            }
          ],
          "completed": null,
          "content": "Checking off items",
          "created": 1498704745245,
          "modified": 1499231842738,
          "parent": null,
          "plugins": {},
          "trashed": null,
          "type": "header",
          "types": {},
          "views": {}
        },
        {
          "_id": null,
          "_rev": null,
          "children": [
            {
              "_id": null,
              "_rev": null,
              "children": [],
              "completed": null,
              "content": "Having a button that always adds the same item isn't the most useful -- let's replace it with a text input. For this, we'll make a stateful component.",
              "created": 1499186152837,
              "modified": 1499231976842,
              "parent": null,
              "plugins": {},
              "trashed": null,
              "type": "normal",
              "types": {},
              "views": {}
            },
            {
              "_id": null,
              "_rev": null,
              "children": [],
              "completed": null,
              "content": "/* TodoApp_final.re 31:55 */\ntype item = {\n  id: int,\n  title: string,\n  completed: bool,\n};\n\nlet se = ReasonReact.stringToElement;\n\nlet module TodoItem = {\n  let component = ReasonReact.statelessComponent \"TodoItem\";\n  let make ::item ::onToggle children => {\n    ...component,\n    render: fun _ =>\n      <div className=\"item\" onClick=(fun evt => onToggle())>\n        <input\n          _type=\"checkbox\"\n          checked=(Js.Boolean.to_js_boolean item.completed)\n        />\n        (se item.title)\n      </div>\n  };\n};\n\nlet valueFromEvent evt: string =>\n  (evt\n    |> ReactEventRe.Form.target\n    |> ReactDOMRe.domElementToObj\n  )##value;\n\nlet module Input = {\n  type state = string;\n  let component = ReasonReact.statefulComponent \"Input\";\n  let make ::onSubmit _ => {\n    ...component,\n    initialState: fun () => \"\",\n    render: fun {state: text, update} =>\n      <input\n        value=text\n        _type=\"text\"\n        placeholder=\"Write something to do\"\n        onChange=(update (fun evt _ =>\n          ReasonReact.Update (valueFromEvent evt)\n        ))\n        onKeyDown=(update (fun evt {state: text} =>\n          if (ReactEventRe.Keyboard.key evt == \"Enter\") {\n            onSubmit text;\n            ReasonReact.Update \"\";\n          } else {\n            ReasonReact.NoUpdate\n          }\n        ))\n      />\n  };\n};\n\ntype state = {\n  items: list item,\n};\n\nlet component = ReasonReact.statefulComponent \"TodoApp\";\n\nlet lastId = ref 0;\nlet newItem text => {\n  lastId := !lastId + 1;\n  {id: !lastId, title: text, completed: false};\n};\n\nlet toggleItem items id => {\n  List.map\n  (fun item => item.id === id ? {...item, completed: not item.completed} : item)\n  items;\n};\n\nlet make children => {\n  ...component,\n  initialState: fun () => {\n    items: [{\n      id: 0,\n      title: \"Write some things to do\",\n      completed: false,\n    }]\n  },\n  render: fun {state: {items}, update} => {\n    let numItems = List.length items;\n\n    <div className=\"app\">\n      <div className=\"title\">\n        (se \"What to do\")\n        <Input\n          onSubmit=(update (fun text {state} => {\n            ReasonReact.Update {\n              ...state,\n              items: [newItem text, ...state.items]\n            }\n          }))\n        />\n      </div>\n      <div className=\"items\">\n        (ReasonReact.arrayToElement\n          (Array.of_list\n            (List.map (fun item => <TodoItem\n              key=(string_of_int item.id)\n              onToggle=(update (fun () {state} =>\n                ReasonReact.Update {\n                  ...state,\n                  items: toggleItem items item.id\n                }\n              ))\n              item\n            />) items)\n          )\n        )\n      </div>\n      <div className=\"footer\">\n        (se ((string_of_int numItems) ^ \" items\"))\n      </div>\n    </div>\n  }\n};",
              "created": 1499187365533,
              "modified": 1499264334765,
              "parent": null,
              "plugins": {},
              "trashed": null,
              "type": "code",
              "types": {
                "code": {
                  "kernelId": null,
                  "language": "reason",
                  "lastRun": null
                }
              },
              "views": {}
            },
            {
              "_id": null,
              "_rev": null,
              "children": [],
              "completed": null,
              "content": "For this component, our `state` type is just `string`, because that's all we need to keep track of. In fact, for the `TodoApp` component we could have just had the `list item` be the state, but it was useful to show an example of a `record`.",
              "created": 1499189409065,
              "modified": 1499189850839,
              "parent": null,
              "plugins": {},
              "trashed": null,
              "type": "note",
              "types": {},
              "views": {}
            },
            {
              "_id": null,
              "_rev": null,
              "children": [],
              "completed": null,
              "content": "Most of this we've seen before, but the `onChange` and `onKeyDown` handlers are new.",
              "created": 1499188473487,
              "modified": 1499189362296,
              "parent": null,
              "plugins": {},
              "trashed": null,
              "type": "normal",
              "types": {},
              "views": {}
            },
            {
              "_id": null,
              "_rev": null,
              "children": [],
              "completed": null,
              "content": "/* @show TodoApp_final.re 42:44 */",
              "created": 1499188507160,
              "modified": 1499209070661,
              "parent": null,
              "plugins": {},
              "trashed": null,
              "type": "code",
              "types": {
                "code": {
                  "kernelId": null,
                  "language": "reason",
                  "lastRun": null
                }
              },
              "views": {}
            },
            {
              "_id": null,
              "_rev": null,
              "children": [],
              "completed": null,
              "content": "The input's `onChange` prop is called with a `Form` event, from which we get the text value and use that as the new state.",
              "created": 1499188473487,
              "modified": 1499206615378,
              "parent": null,
              "plugins": {},
              "trashed": null,
              "type": "normal",
              "types": {},
              "views": {}
            },
            {
              "_id": null,
              "_rev": null,
              "children": [],
              "completed": null,
              "content": "/* @show TodoApp_final.re 25:29 */",
              "created": 1499188507160,
              "modified": 1499209075210,
              "parent": null,
              "plugins": {},
              "trashed": null,
              "type": "code",
              "types": {
                "code": {
                  "kernelId": null,
                  "language": "reason",
                  "lastRun": null
                }
              },
              "views": {}
            },
            {
              "_id": null,
              "_rev": null,
              "children": [],
              "completed": null,
              "content": "In JavaScript, we'd do `evt.target.value` to get the current text of the input, and this is the ReasonReact equivalent. ReasonReact's bindings don't yet have a well-typed way to get the `value` of an input element, so we convert the `Dom.element` that we got from `ReactEventRe.Form.target`, convert it into a \"catch-all javascript object\", and get out the value with the \"magic accessor syntax\" `##value`.",
              "created": 1499188473487,
              "modified": 1499232030601,
              "parent": null,
              "plugins": {},
              "trashed": null,
              "type": "normal",
              "types": {},
              "views": {}
            },
            {
              "_id": null,
              "_rev": null,
              "children": [],
              "completed": null,
              "content": "**This is sacrificing some type safety**, and it would be best for ReasonReact to just provide a safe way to get the input text directly, but this is what we have for now. Notice that we've annotated the return value of `valueFromEvent` to be `string`. Without this, OCaml would make the return value `'a` (because we used the catch-all JavaScript object) meaning it could unify with anything, similar to the `any` type in Flow.",
              "created": 1499206911039,
              "modified": 1499207040427,
              "parent": null,
              "plugins": {},
              "trashed": null,
              "type": "normal",
              "types": {},
              "views": {}
            },
            {
              "_id": null,
              "_rev": null,
              "children": [],
              "completed": null,
              "content": "/* @show TodoApp_final.re 45:52 */",
              "created": 1499188507160,
              "modified": 1499209079731,
              "parent": null,
              "plugins": {},
              "trashed": null,
              "type": "code",
              "types": {
                "code": {
                  "kernelId": null,
                  "language": "reason",
                  "lastRun": null
                }
              },
              "views": {}
            },
            {
              "_id": null,
              "_rev": null,
              "children": [],
              "completed": null,
              "content": "ReasonReact *does* provide a nice function for getting the `key` off of a keyboard event. So here we check if they pressed `Enter`, and if they did we call the `onSubmit` handler with the current text and return `ReasonReact.Update \"\"` to clear out the input. Otherwise we have nothing to update.",
              "created": 1499188473487,
              "modified": 1499207149704,
              "parent": null,
              "plugins": {},
              "trashed": null,
              "type": "normal",
              "types": {},
              "views": {}
            },
            {
              "_id": null,
              "_rev": null,
              "children": [],
              "completed": null,
              "content": "And now we can replace that filler \"Add something\" button with this text input.",
              "created": 1499186152837,
              "modified": 1499207056799,
              "parent": null,
              "plugins": {},
              "trashed": null,
              "type": "normal",
              "types": {},
              "views": {}
            },
            {
              "_id": null,
              "_rev": null,
              "children": [
                {
                  "_id": null,
                  "_rev": null,
                  "children": [],
                  "completed": null,
                  "content": "/* @render */\nReactDOMRe.renderToElementWithId <TodoApp_final /> \"root\";",
                  "created": 1499089873530,
                  "modified": 1499209088409,
                  "parent": null,
                  "plugins": {},
                  "trashed": null,
                  "type": "code",
                  "types": {
                    "code": {
                      "kernelId": null,
                      "language": "reason",
                      "lastRun": null
                    }
                  },
                  "views": {}
                }
              ],
              "completed": null,
              "content": "/* @show TodoApp_final.re 64:67 88:98 */",
              "created": 1499187696938,
              "modified": 1499209083908,
              "parent": null,
              "plugins": {},
              "trashed": null,
              "type": "code",
              "types": {
                "code": {
                  "kernelId": null,
                  "language": "reason",
                  "lastRun": null
                }
              },
              "views": {}
            }
          ],
          "completed": null,
          "content": "Text input",
          "created": 1498704780325,
          "modified": 1499206911040,
          "parent": null,
          "plugins": {},
          "trashed": null,
          "type": "header",
          "types": {},
          "views": {}
        }
      ],
      "completed": null,
      "content": "Step 3: Full interactivity",
      "created": 1498704729942,
      "modified": 1499189301783,
      "parent": null,
      "plugins": {},
      "trashed": null,
      "type": "header",
      "types": {},
      "views": {}
    },
    {
      "_id": null,
      "_rev": null,
      "children": [
        {
          "_id": null,
          "_rev": null,
          "children": [],
          "completed": null,
          "content": "😓 thanks for sticking through, I hope this was helpful! There's definitely more we could do to this Todo list, but hopefully this gave you a good primer on how to navigate Reason and ReasonReact.",
          "created": 1499207222965,
          "modified": 1499209024922,
          "parent": null,
          "plugins": {},
          "trashed": null,
          "type": "normal",
          "types": {},
          "views": {}
        },
        {
          "_id": null,
          "_rev": null,
          "children": [],
          "completed": null,
          "content": "If there was anything confusing, let me know [on twitter](https://twitter.com/jaredforsyth). If you want to know more, come join our [reasonml channel on Discord](https://discord.gg/reasonml) or the [OCaml Discourse forum](https://discuss.ocaml.org/).",
          "created": 1499209013254,
          "modified": 1499209013254,
          "parent": null,
          "plugins": {},
          "trashed": null,
          "type": "normal",
          "types": {},
          "views": {}
        },
        {
          "_id": null,
          "_rev": null,
          "children": [],
          "completed": null,
          "content": "As you might be able to tell, there's lots of work to do on this language, but I think it's really promising! Contributions are quite welcome.",
          "created": 1499207339112,
          "modified": 1499207541740,
          "parent": null,
          "plugins": {},
          "trashed": null,
          "type": "normal",
          "types": {},
          "views": {}
        },
        {
          "_id": null,
          "_rev": null,
          "children": [
            {
              "_id": null,
              "_rev": null,
              "children": [],
              "completed": null,
              "content": "[Getting started with Reason and BuckleScript](https://jaredforsyth.com/2017/06/03/getting-started-with-reason-and-bucklescript/)",
              "created": 1499207509205,
              "modified": 1499207517308,
              "parent": null,
              "plugins": {},
              "trashed": null,
              "type": "normal",
              "types": {},
              "views": {}
            },
            {
              "_id": null,
              "_rev": null,
              "children": [],
              "completed": null,
              "content": "[JavaScript interop with Reason and BuckleScript](https://jaredforsyth.com/2017/06/03/javascript-interop-with-reason-and-bucklescript/)",
              "created": 1499207496389,
              "modified": 1499207506349,
              "parent": null,
              "plugins": {},
              "trashed": null,
              "type": "normal",
              "types": {},
              "views": {}
            },
            {
              "_id": null,
              "_rev": null,
              "children": [],
              "completed": null,
              "content": "[Your first native Reason/OCaml project](https://jaredforsyth.com/2017/06/17/your-first-native-reason-ocaml-project/)",
              "created": 1499207453823,
              "modified": 1499207493525,
              "parent": null,
              "plugins": {},
              "trashed": null,
              "type": "normal",
              "types": {},
              "views": {}
            },
            {
              "_id": null,
              "_rev": null,
              "children": [],
              "completed": null,
              "content": "[When will Reason be ready for general use?](https://jaredforsyth.com/2017/06/23/when-will-reasonml-be-ready/)",
              "created": 1499207385740,
              "modified": 1499207477095,
              "parent": null,
              "plugins": {},
              "trashed": null,
              "type": "normal",
              "types": {},
              "views": {}
            }
          ],
          "completed": null,
          "content": "Other posts I've written about Reason:",
          "created": 1499207445863,
          "modified": 1499232632037,
          "parent": null,
          "plugins": {},
          "trashed": null,
          "type": "list",
          "types": {},
          "views": {}
        }
      ],
      "completed": null,
      "content": "And that's it!",
      "created": 1499207210470,
      "modified": 1499209013254,
      "parent": null,
      "plugins": {},
      "trashed": null,
      "type": "header",
      "types": {},
      "views": {}
    },
    {
      "_id": null,
      "_rev": null,
      "children": [
        {
          "_id": null,
          "_rev": null,
          "children": [
            {
              "_id": null,
              "_rev": null,
              "children": [],
              "completed": null,
              "content": "If you want to see the code for this section, `git checkout step-1`.",
              "created": 1498092179190,
              "modified": 1498096343683,
              "parent": null,
              "plugins": {},
              "trashed": null,
              "type": "note",
              "types": {},
              "views": {}
            },
            {
              "_id": null,
              "_rev": null,
              "children": [],
              "completed": null,
              "content": "We want to render a bunch of tiles, not just one, so let's make a `Board` component.",
              "created": 1498091949483,
              "modified": 1498096343683,
              "parent": null,
              "plugins": {},
              "trashed": null,
              "type": "normal",
              "types": {},
              "views": {}
            },
            {
              "_id": null,
              "_rev": null,
              "children": [],
              "completed": null,
              "content": "let module Board = {\n  let component = ReasonReact.statelessComponent \"Board\";\n\n  let make children => {\n    ...component,\n    render: fun () self => {\n      let renderTile number =>\n        <Tile text=(string_of_int number) />;\n\n      <div className=\"board\">\n        <div className=\"row\">\n          (renderTile 0)\n          (renderTile 1)\n          (renderTile 2)\n        </div>\n        <div className=\"row\">\n          (renderTile 3)\n          (renderTile 4)\n          (renderTile 5)\n        </div>\n        <div className=\"row\">\n          (renderTile 6)\n          (renderTile 7)\n          (renderTile 8)\n        </div>\n      </div>\n    },\n  };\n};",
              "created": 1498092216787,
              "modified": 1498096343683,
              "parent": null,
              "plugins": {},
              "trashed": null,
              "type": "code",
              "types": {
                "code": {
                  "kernelId": null,
                  "language": "javascript",
                  "lastRun": null
                }
              },
              "views": {}
            },
            {
              "_id": null,
              "_rev": null,
              "children": [],
              "completed": null,
              "content": "Here we're created a helper function in our render function that will get more complicated in a bit, but which currently just renders the tile with a number.",
              "created": 1498092339912,
              "modified": 1498096343683,
              "parent": null,
              "plugins": {},
              "trashed": null,
              "type": "normal",
              "types": {
                "code": {
                  "kernelId": null,
                  "language": "javascript",
                  "lastRun": null
                }
              },
              "views": {}
            }
          ],
          "completed": null,
          "content": "Step 1: creating our board",
          "created": 1498091900398,
          "modified": 1498951402780,
          "parent": null,
          "plugins": {},
          "trashed": null,
          "type": "header",
          "types": {},
          "views": {}
        },
        {
          "_id": null,
          "_rev": null,
          "children": [
            {
              "_id": null,
              "_rev": null,
              "children": [],
              "completed": null,
              "content": "What good is a board if you can't interact with it? Let's make the `Tile` clickable.",
              "created": 1498092686641,
              "modified": 1498096343683,
              "parent": null,
              "plugins": {},
              "trashed": null,
              "type": "normal",
              "types": {},
              "views": {}
            },
            {
              "_id": null,
              "_rev": null,
              "children": [],
              "completed": null,
              "content": "",
              "created": 1498094791979,
              "modified": 1498096343683,
              "parent": null,
              "plugins": {},
              "trashed": null,
              "type": "normal",
              "types": {},
              "views": {}
            }
          ],
          "completed": null,
          "content": "Step 2: Interactivity",
          "created": 1498092560773,
          "modified": 1498951403516,
          "parent": null,
          "plugins": {},
          "trashed": null,
          "type": "header",
          "types": {},
          "views": {}
        },
        {
          "_id": null,
          "_rev": null,
          "children": [],
          "completed": null,
          "content": "Notice that in ReasonReact, property names without values are \"punned\" (similar to object literal syntax in javascript, with `{name}` meaning `{name: name}`). This is in contrast to React.js JSX, where a lone property `name` means `name={true}`",
          "created": 1498092420317,
          "modified": 1498951403972,
          "parent": null,
          "plugins": {},
          "trashed": null,
          "type": "normal",
          "types": {},
          "views": {}
        },
        {
          "_id": null,
          "_rev": null,
          "children": [
            {
              "_id": null,
              "_rev": null,
              "children": [],
              "completed": null,
              "content": "Now we go up top to look at `Tile`. This is a nested module -- conceptually the same as our whole `TicTacToe.re` file.",
              "created": 1498065534845,
              "modified": 1498096343683,
              "parent": null,
              "plugins": {},
              "trashed": null,
              "type": "normal",
              "types": {},
              "views": {}
            },
            {
              "_id": null,
              "_rev": null,
              "children": [],
              "completed": null,
              "content": "let module Tile = {\n  let component = ReasonReact.statelessComponent \"Tile\";\n\n  let make ::text children => {\n    ...component,\n    render: fun () self => {\n      <div className=\"tile\">\n        (ReasonReact.stringToElement text)\n      </div>\n    }\n  };\n};",
              "created": 1498091595381,
              "modified": 1498096343683,
              "parent": null,
              "plugins": {},
              "trashed": null,
              "type": "code",
              "types": {
                "code": {
                  "kernelId": null,
                  "language": "javascript",
                  "lastRun": null
                }
              },
              "views": {}
            },
            {
              "_id": null,
              "_rev": null,
              "children": [],
              "completed": null,
              "content": "Here we make another stateless component, except this one accepts a property: `text`. The `::argname` syntax means \"this function takes a named argument which is known as `text` both externally and internally\". Swift and Objective C also allow you have named arguments, with an external name that is optionally different from the internal one. If you wanted them to be different, you would write e.g. `fun externalFacingName::internalFacingName => `. `children` is an unnamed argument.",
              "created": 1498091603700,
              "modified": 1498096343683,
              "parent": null,
              "plugins": {},
              "trashed": null,
              "type": "normal",
              "types": {
                "code": {
                  "kernelId": null,
                  "language": "javascript",
                  "lastRun": null
                }
              },
              "views": {}
            },
            {
              "_id": null,
              "_rev": null,
              "children": [],
              "completed": null,
              "content": "In OCaml, named arguments can be given in any order, but unnamed arguments cannot. So if you had a function `let myfn = fun ::a ::b c d => {}` where `c` was an `int` and `d` was a `string`, you could call it `myfn b::2 a::1 3 \"hi\"` or `myfn a::3 3 \"hi\" b::1` but not `myfn a::2 b::3 \"hi\" 4`.",
              "created": 1498091740087,
              "modified": 1498701029023,
              "parent": null,
              "plugins": {},
              "trashed": null,
              "type": "note",
              "types": {},
              "views": {}
            },
            {
              "_id": null,
              "_rev": null,
              "children": [],
              "completed": null,
              "content": "In our render function we again have the `stringToElement`.",
              "created": 1498091864543,
              "modified": 1498096343683,
              "parent": null,
              "plugins": {},
              "trashed": null,
              "type": "normal",
              "types": {},
              "views": {}
            }
          ],
          "completed": null,
          "content": "Nested modules & passing props",
          "created": 1498065519014,
          "modified": 1498951404811,
          "parent": null,
          "plugins": {},
          "trashed": null,
          "type": "header",
          "types": {},
          "views": {}
        }
      ],
      "completed": 1498951400100,
      "content": "Old",
      "created": 1498951397733,
      "modified": 1498951404811,
      "parent": null,
      "plugins": {},
      "trashed": null,
      "type": "normal",
      "types": {
        "todo": {
          "dueDate": null
        }
      },
      "views": {}
    }
  ],
  "completed": null,
  "content": "A ReasonReact Tutorial",
  "created": 1498096341723,
  "modified": 1499306688483,
  "parent": null,
  "plugins": {},
  "trashed": null,
  "type": "header",
  "types": {},
  "views": {}
}