<rss
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:content="http://purl.org/rss/1.0/modules/content/"
    xmlns:atom="http://www.w3.org/2005/Atom"
    version="2.0"><channel>
<title>
 
<![CDATA[All posts | JaredForsyth.com]]>
 
</title>
<item>
<title>
 
<![CDATA[Type inference that sticks]]>
 
</title>
<description>
 
<![CDATA[<p><em>What if type inference felt like a real-time conversation, instead of emailing code back and forth?</em></p>
<p>With type inference, compilers are faced with a difficult task: intuiting what types a user <em>had in mind</em> (but didn’t write down) while writing some code. It all falls apart when the types that the algorithm assigns are different from those the user expected, and especially so when the type error reported is far away from the site of mental mismatch.</p>
 8 minute read]]>
 
</description>
<summary>
 
<![CDATA[<p><em>What if type inference felt like a real-time conversation, instead of emailing code back and forth?</em></p>
<p>With type inference, compilers are faced with a difficult task: intuiting what types a user <em>had in mind</em> (but didn’t write down) while writing some code. It all falls apart when the types that the algorithm assigns are different from those the user expected, and especially so when the type error reported is far away from the site of mental mismatch.</p>
 8 minute read]]>
 
</summary>
<author> "Jared Forsyth" </author>
<link>
 
https://jaredforsyth.com/posts/type-inference-that-sticks/
 
</link>
<guid>
 
https://jaredforsyth.com/posts/type-inference-that-sticks/
 
</guid>

<pubDate>Sat, 04 Feb 2023 06:00:00 GMT</pubDate>
</item>

<item>
<title>
 
<![CDATA[What's cool about Unison?]]>
 
</title>
<description>
 
<![CDATA[<p><a href="https://unisonweb.org">Unison</a> is doing a lot of interesting things, and as I recently implemented an <a href="https://github.com/jaredly/unison.rs">alternative runtime in rust</a>, I have some insight into what’s going on under the hood 😉. Here’s my attempt to sum things up.</p>
 7 minute read]]>
 
</description>
<summary>
 
<![CDATA[<p><a href="https://unisonweb.org">Unison</a> is doing a lot of interesting things, and as I recently implemented an <a href="https://github.com/jaredly/unison.rs">alternative runtime in rust</a>, I have some insight into what’s going on under the hood 😉. Here’s my attempt to sum things up.</p>
 7 minute read]]>
 
</summary>
<author> "Jared Forsyth" </author>
<link>
 
https://jaredforsyth.com/posts/whats-cool-about-unison/
 
</link>
<guid>
 
https://jaredforsyth.com/posts/whats-cool-about-unison/
 
</guid>

<pubDate>Tue, 02 Mar 2021 06:00:00 GMT</pubDate>
</item>

<item>
<title>
 
<![CDATA[Local-first database: Hypermerge]]>
 
</title>
<description>
 
<![CDATA[<p>I’m excited to review <a href="https://github.com/automerge/hypermerge">Hypermerge</a>, as it was developed by the folks from <a href="https://www.inkandswitch.com">Ink &amp; Switch</a> who wrote the <a href="https://www.inkandswitch.com/local-first.html">Local-First Software</a> article. It is designed as a fully peer-to-peer data storage system, and is electron/nodejs-only (no browser support).</p>

<p>The underlying data structure implementation, <a href="https://github.com/automerge/automerge">Automerge</a>, is based the academic research paper <a href="https://arxiv.org/abs/1608.03960">A Conflict-Free Replicated JSON Datatype</a>, and can be used independently – in fact there are a couple of different “networking” layers available – but Hypermerge is by far the most well-developed and “production ready”.</p>
 6 minute read]]>
 
</description>
<summary>
 
<![CDATA[<p>I’m excited to review <a href="https://github.com/automerge/hypermerge">Hypermerge</a>, as it was developed by the folks from <a href="https://www.inkandswitch.com">Ink &amp; Switch</a> who wrote the <a href="https://www.inkandswitch.com/local-first.html">Local-First Software</a> article. It is designed as a fully peer-to-peer data storage system, and is electron/nodejs-only (no browser support).</p>

<p>The underlying data structure implementation, <a href="https://github.com/automerge/automerge">Automerge</a>, is based the academic research paper <a href="https://arxiv.org/abs/1608.03960">A Conflict-Free Replicated JSON Datatype</a>, and can be used independently – in fact there are a couple of different “networking” layers available – but Hypermerge is by far the most well-developed and “production ready”.</p>
 6 minute read]]>
 
</summary>
<author> "Jared Forsyth" </author>
<link>
 
https://jaredforsyth.com/posts/local-first-database-hypermerge/
 
</link>
<guid>
 
https://jaredforsyth.com/posts/local-first-database-hypermerge/
 
</guid>

<pubDate>Wed, 30 Sep 2020 05:00:00 GMT</pubDate>
</item>

<item>
<title>
 
<![CDATA[Local-first database: RxDB + PouchDB]]>
 
</title>
<description>
 
<![CDATA[8 minute read]]>
 
</description>
<summary>
 
<![CDATA[8 minute read]]>
 
</summary>
<author> "Jared Forsyth" </author>
<link>
 
https://jaredforsyth.com/posts/local-first-database-rxdb-pouchdb/
 
</link>
<guid>
 
https://jaredforsyth.com/posts/local-first-database-rxdb-pouchdb/
 
</guid>

<pubDate>Tue, 12 May 2020 05:00:00 GMT</pubDate>
</item>

<item>
<title>
 
<![CDATA[Local-first database: remoteStorage.js]]>
 
</title>
<description>
 
<![CDATA[<p><a href="https://remotestorage.io/">remoteStorage.js</a> is a an offline-first solution that’s been around for quite some time, and stands out for having a <a href="https://datatracker.ietf.org/doc/draft-dejong-remotestorage/">formal protocol spec</a>, first drafted in 2012. It would be really cool if it took off, but unfortunately there are only <a href="https://wiki.remotestorage.io/Servers">one or two commercial providers</a>, and the <a href="https://github.com/fkooman/php-remote-storage">only stable open-source server implementation</a> is in PHP. There’s <a href="https://github.com/untitaker/mysteryshack">one written in rust</a> that has been <a href="https://github.com/untitaker/mysteryshack">unmaintained</a> since early 2018, and a <a href="https://github.com/remotestorage/armadietto">nodejs one</a> that has a big warning up top about being experimental &amp; alpha-stage. Still, I figured it would be interesting to see how it stacks up according to my <a href="/in-search-of-a-local-first-database/">local-first database criteria</a>. You can also look at the evaluation of <a href="/local-first-database-gun-js/">gun-js</a> to see how it compares.</p>

<div class='note'><p>Technically, “remoteStorage” is the protocol, and “remoteStorage.js” is the “reference client imeplementation”. My goal with this series is to look at solutions that are immediately ready to be used to build apps, so my evaluation is of the javascript client (and a corresponding community-built javascript server). While many of the features of the client &amp; server are inherent to the protocol, there are also many things that are more due to implementation details than the underlying spec. 🤷</p>
</div> 9 minute read]]>
 
</description>
<summary>
 
<![CDATA[<p><a href="https://remotestorage.io/">remoteStorage.js</a> is a an offline-first solution that’s been around for quite some time, and stands out for having a <a href="https://datatracker.ietf.org/doc/draft-dejong-remotestorage/">formal protocol spec</a>, first drafted in 2012. It would be really cool if it took off, but unfortunately there are only <a href="https://wiki.remotestorage.io/Servers">one or two commercial providers</a>, and the <a href="https://github.com/fkooman/php-remote-storage">only stable open-source server implementation</a> is in PHP. There’s <a href="https://github.com/untitaker/mysteryshack">one written in rust</a> that has been <a href="https://github.com/untitaker/mysteryshack">unmaintained</a> since early 2018, and a <a href="https://github.com/remotestorage/armadietto">nodejs one</a> that has a big warning up top about being experimental &amp; alpha-stage. Still, I figured it would be interesting to see how it stacks up according to my <a href="/in-search-of-a-local-first-database/">local-first database criteria</a>. You can also look at the evaluation of <a href="/local-first-database-gun-js/">gun-js</a> to see how it compares.</p>

<div class='note'><p>Technically, “remoteStorage” is the protocol, and “remoteStorage.js” is the “reference client imeplementation”. My goal with this series is to look at solutions that are immediately ready to be used to build apps, so my evaluation is of the javascript client (and a corresponding community-built javascript server). While many of the features of the client &amp; server are inherent to the protocol, there are also many things that are more due to implementation details than the underlying spec. 🤷</p>
</div> 9 minute read]]>
 
</summary>
<author> "Jared Forsyth" </author>
<link>
 
https://jaredforsyth.com/posts/local-first-database-remotestorage/
 
</link>
<guid>
 
https://jaredforsyth.com/posts/local-first-database-remotestorage/
 
</guid>

<pubDate>Wed, 06 May 2020 05:00:00 GMT</pubDate>
</item>

<item>
<title>
 
<![CDATA[Local-first database: gun.js]]>
 
</title>
<description>
 
<![CDATA[<p><a href="https://gun.js.org/">Gun.js</a> is an open-source project I’ve had my eye on for several years now, every once in a while checking back to see how it’s progressed, and whether the project I’m working on at the time is a good fit for it.</p>

<p>Gun stands out as one of the few players that’s actually delivering a peer-to-peer / decentralized system that works on a large scale.</p>

<p>Using my <a href="/posts/in-search-of-a-local-first-database/">criteria for a local-first database</a>, here’s how it stacks up:</p>
 11 minute read]]>
 
</description>
<summary>
 
<![CDATA[<p><a href="https://gun.js.org/">Gun.js</a> is an open-source project I’ve had my eye on for several years now, every once in a while checking back to see how it’s progressed, and whether the project I’m working on at the time is a good fit for it.</p>

<p>Gun stands out as one of the few players that’s actually delivering a peer-to-peer / decentralized system that works on a large scale.</p>

<p>Using my <a href="/posts/in-search-of-a-local-first-database/">criteria for a local-first database</a>, here’s how it stacks up:</p>
 11 minute read]]>
 
</summary>
<author> "Jared Forsyth" </author>
<link>
 
https://jaredforsyth.com/posts/local-first-database-gun-js/
 
</link>
<guid>
 
https://jaredforsyth.com/posts/local-first-database-gun-js/
 
</guid>

<pubDate>Fri, 01 May 2020 05:00:00 GMT</pubDate>
</item>

<item>
<title>
 
<![CDATA[In Search of a Local-First Database]]>
 
</title>
<description>
 
<![CDATA[<p>I’ve been wrestling with the issue of “data storage that syncs and works offline” for a number of years now, and have gotten 80% of the way on a few different implementations, but always ultimately get stymied by the little things, like “how do I make it not break”.</p>

<p>Recently, I’ve been re-energized in my search by the wonderful <a href="https://www.inkandswitch.com/local-first.html">Local-first software</a> article by <a href="https://www.inkandswitch.com/">Ink &amp; Switch</a>, and then by <a href="https://twitter.com/jlongster">James Long</a>’s dotConf talk, <a href="https://www.dotconferences.com/2019/12/james-long-crdts-for-mortals">CRDTs for Mortals</a>.</p>
 7 minute read]]>
 
</description>
<summary>
 
<![CDATA[<p>I’ve been wrestling with the issue of “data storage that syncs and works offline” for a number of years now, and have gotten 80% of the way on a few different implementations, but always ultimately get stymied by the little things, like “how do I make it not break”.</p>

<p>Recently, I’ve been re-energized in my search by the wonderful <a href="https://www.inkandswitch.com/local-first.html">Local-first software</a> article by <a href="https://www.inkandswitch.com/">Ink &amp; Switch</a>, and then by <a href="https://twitter.com/jlongster">James Long</a>’s dotConf talk, <a href="https://www.dotconferences.com/2019/12/james-long-crdts-for-mortals">CRDTs for Mortals</a>.</p>
 7 minute read]]>
 
</summary>
<author> "Jared Forsyth" </author>
<link>
 
https://jaredforsyth.com/posts/in-search-of-a-local-first-database/
 
</link>
<guid>
 
https://jaredforsyth.com/posts/in-search-of-a-local-first-database/
 
</guid>

<pubDate>Sat, 11 Apr 2020 05:00:00 GMT</pubDate>
</item>

<item>
<title>
 
<![CDATA[Hybrid Logical Clocks]]>
 
</title>
<description>
 
<![CDATA[<div class='note'><p>This is the first in a series of posts digging into James Long’s talk <a href="https://www.dotconferences.com/2019/12/james-long-crdts-for-mortals">CRDTs for Mortals</a>, and the accompanying <a href="https://github.com/jlongster/crdt-example-app">demo app</a> he created.</p>
</div>
<p>So, you’re writing a <s>destributed system</s> local-first app, and you’re sending events back and forth between various clients and the server. One thing you’d really like to be able to do is determine <strong>the order in which events happened</strong> – this is important for the “last” part of “last-write-wins” CRDTs, for example. So you add a timestamp to each event as it’s created, and all is well.</p>
 7 minute read]]>
 
</description>
<summary>
 
<![CDATA[<div class='note'><p>This is the first in a series of posts digging into James Long’s talk <a href="https://www.dotconferences.com/2019/12/james-long-crdts-for-mortals">CRDTs for Mortals</a>, and the accompanying <a href="https://github.com/jlongster/crdt-example-app">demo app</a> he created.</p>
</div>
<p>So, you’re writing a <s>destributed system</s> local-first app, and you’re sending events back and forth between various clients and the server. One thing you’d really like to be able to do is determine <strong>the order in which events happened</strong> – this is important for the “last” part of “last-write-wins” CRDTs, for example. So you add a timestamp to each event as it’s created, and all is well.</p>
 7 minute read]]>
 
</summary>
<author> "Jared Forsyth" </author>
<link>
 
https://jaredforsyth.com/posts/hybrid-logical-clocks/
 
</link>
<guid>
 
https://jaredforsyth.com/posts/hybrid-logical-clocks/
 
</guid>

<pubDate>Fri, 14 Feb 2020 06:00:00 GMT</pubDate>
</item>

<item>
<title>
 
<![CDATA[My Scientific Sourdough 🍞]]>
 
</title>
<description>
 
<![CDATA[24 minute read]]>
 
</description>
<summary>
 
<![CDATA[24 minute read]]>
 
</summary>
<author> "Jared Forsyth" </author>
<link>
 
https://jaredforsyth.com/posts/my-scientific-sourdough/
 
</link>
<guid>
 
https://jaredforsyth.com/posts/my-scientific-sourdough/
 
</guid>

<pubDate>Tue, 31 Dec 2019 06:00:00 GMT</pubDate>
</item>

<item>
<title>
 
<![CDATA[Automatic, well-typed JSON serialization in Reason/OCaml with Milk 🥛]]>
 
</title>
<description>
 
<![CDATA[<p>One of the things that keeps coming up as a pain point in Reason development is the boilerplate involved in parsing &amp; generating JSON. Whether you’re using JSON for a REST api, or an on-disk file format, JSON is ubiquitous, and if you’re coming from JavaScript, you’re used to it also being painless! Because the data objects you’re working with are immediately serializable to JSON and back.</p>
<p><a href="https://github.com/jaredly/milk"><code class="language-javascript">Milk</code> 🥛</a> is a new tool I developed that generates serialization and deserialization code for your Reason/OCaml types, including types from arbitrary external packages, <em>and</em> it manages migration when the types change.</p>
 10 minute read]]>
 
</description>
<summary>
 
<![CDATA[<p>One of the things that keeps coming up as a pain point in Reason development is the boilerplate involved in parsing &amp; generating JSON. Whether you’re using JSON for a REST api, or an on-disk file format, JSON is ubiquitous, and if you’re coming from JavaScript, you’re used to it also being painless! Because the data objects you’re working with are immediately serializable to JSON and back.</p>
<p><a href="https://github.com/jaredly/milk"><code class="language-javascript">Milk</code> 🥛</a> is a new tool I developed that generates serialization and deserialization code for your Reason/OCaml types, including types from arbitrary external packages, <em>and</em> it manages migration when the types change.</p>
 10 minute read]]>
 
</summary>
<author> "Jared Forsyth" </author>
<link>
 
https://jaredforsyth.com/posts/announcing-milk/
 
</link>
<guid>
 
https://jaredforsyth.com/posts/announcing-milk/
 
</guid>

<pubDate>Tue, 28 May 2019 05:00:00 GMT</pubDate>
</item>

<item>
<title>
 
<![CDATA[Terraform: generate 3-d models of geographic terrain]]>
 
</title>
<description>
 
<![CDATA[<p>I just spent the past two weeks building a GUI Rust app to help you generate a 3-d model of terrain from around the world, that can then be used for 3-d printing, rendering, or whatever you like.</p>
 7 minute read]]>
 
</description>
<summary>
 
<![CDATA[<p>I just spent the past two weeks building a GUI Rust app to help you generate a 3-d model of terrain from around the world, that can then be used for 3-d printing, rendering, or whatever you like.</p>
 7 minute read]]>
 
</summary>
<author> "Jared Forsyth" </author>
<link>
 
https://jaredforsyth.com/posts/intoducing-terraform/
 
</link>
<guid>
 
https://jaredforsyth.com/posts/intoducing-terraform/
 
</guid>

<pubDate>Thu, 16 May 2019 05:00:00 GMT</pubDate>
</item>

<item>
<title>
 
<![CDATA[Optional Attribute Access in Reason]]>
 
</title>
<description>
 
<![CDATA[<p>One thing that you’ll run into when interfacing with complex javascript objects in Reason, is that dealing with optional objects can be a huge pain. The most common place to run into this is when using the excellent <a href="https://github.com/mhallin/graphql_ppx">graphql-ppx</a> syntax plugin (often together with <a href="https://github.com/apollographql/reason-apollo">reason-apollo</a>), because the result of a graphql query is a large complex javascript object, with many parts of it that are optional.</p>
 2 minute read]]>
 
</description>
<summary>
 
<![CDATA[<p>One thing that you’ll run into when interfacing with complex javascript objects in Reason, is that dealing with optional objects can be a huge pain. The most common place to run into this is when using the excellent <a href="https://github.com/mhallin/graphql_ppx">graphql-ppx</a> syntax plugin (often together with <a href="https://github.com/apollographql/reason-apollo">reason-apollo</a>), because the result of a graphql query is a large complex javascript object, with many parts of it that are optional.</p>
 2 minute read]]>
 
</summary>
<author> "Jared Forsyth" </author>
<link>
 
https://jaredforsyth.com/posts/optional-attribute-access-in-reason/
 
</link>
<guid>
 
https://jaredforsyth.com/posts/optional-attribute-access-in-reason/
 
</guid>

<pubDate>Tue, 13 Nov 2018 06:00:00 GMT</pubDate>
</item>

<item>
<title>
 
<![CDATA[State of Reason Survey: Preliminary Results]]>
 
</title>
<description>
 
<![CDATA[<p>I’m planning to do some fancy social science analysis of the results, but first I’ll just give you a dump of the summary data that came out of this.</p>
<p>First of all, there were 398 responses! Thanks to everyone who contributed :)</p>
 4 minute read]]>
 
</description>
<summary>
 
<![CDATA[<p>I’m planning to do some fancy social science analysis of the results, but first I’ll just give you a dump of the summary data that came out of this.</p>
<p>First of all, there were 398 responses! Thanks to everyone who contributed :)</p>
 4 minute read]]>
 
</summary>
<author> "Jared Forsyth" </author>
<link>
 
https://jaredforsyth.com/posts/state-of-reason-survey-preliminary-results/
 
</link>
<guid>
 
https://jaredforsyth.com/posts/state-of-reason-survey-preliminary-results/
 
</guid>

<pubDate>Sat, 10 Nov 2018 06:00:00 GMT</pubDate>
</item>

<item>
<title>
 
<![CDATA[Deploying Native Reason/OCaml with Zeit's now.sh]]>
 
</title>
<description>
 
<![CDATA[<p>I’m working on a new ReasonReact project that will need a stateful server, and I thought it might be nice to write that in Reason too :) but what’s the best way to deploy it? And by “best” I mean “easiest, with a free-to-try option”. After looking around a little, I settled on Zeit’s <a href="http://now.sh">now.sh</a>.</p>
<p>What did I end up with? <strong>A 10mb docker image</strong> with a server inside!</p>
 3 minute read]]>
 
</description>
<summary>
 
<![CDATA[<p>I’m working on a new ReasonReact project that will need a stateful server, and I thought it might be nice to write that in Reason too :) but what’s the best way to deploy it? And by “best” I mean “easiest, with a free-to-try option”. After looking around a little, I settled on Zeit’s <a href="http://now.sh">now.sh</a>.</p>
<p>What did I end up with? <strong>A 10mb docker image</strong> with a server inside!</p>
 3 minute read]]>
 
</summary>
<author> "Jared Forsyth" </author>
<link>
 
https://jaredforsyth.com/posts/deploying-native-reason-ocaml-with-now-sh/
 
</link>
<guid>
 
https://jaredforsyth.com/posts/deploying-native-reason-ocaml-with-now-sh/
 
</guid>

<pubDate>Fri, 07 Sep 2018 05:00:00 GMT</pubDate>
</item>

<item>
<title>
 
<![CDATA[Hot-reloading OCaml on Web, Desktop, and Android]]>
 
</title>
<description>
 
<![CDATA[4 minute read]]>
 
</description>
<summary>
 
<![CDATA[4 minute read]]>
 
</summary>
<author> "Jared Forsyth" </author>
<link>
 
https://jaredforsyth.com/posts/hot-reloading-ocaml-on-web-desktop-and-android/
 
</link>
<guid>
 
https://jaredforsyth.com/posts/hot-reloading-ocaml-on-web-desktop-and-android/
 
</guid>

<pubDate>Tue, 23 Jan 2018 06:00:00 GMT</pubDate>
</item>

<item>
<title>
 
<![CDATA[Reason mobile cross-compilation deep dive]]>
 
</title>
<description>
 
<![CDATA[<p>I recently released <a href="https://github.com/jaredly/reprocessing-scripts">a tool that will manage all of this stuff</a> (see the <a href="/posts/making-a-cross-platform-mobile-game-in-reason-ocaml/">accompanying blog post</a>), but I figure it’s good to document what I went through for future ocaml cross-compilation spelunkers.</p>
 7 minute read]]>
 
</description>
<summary>
 
<![CDATA[<p>I recently released <a href="https://github.com/jaredly/reprocessing-scripts">a tool that will manage all of this stuff</a> (see the <a href="/posts/making-a-cross-platform-mobile-game-in-reason-ocaml/">accompanying blog post</a>), but I figure it’s good to document what I went through for future ocaml cross-compilation spelunkers.</p>
 7 minute read]]>
 
</summary>
<author> "Jared Forsyth" </author>
<link>
 
https://jaredforsyth.com/posts/reason-mobile-cross-compilation-deep-dive/
 
</link>
<guid>
 
https://jaredforsyth.com/posts/reason-mobile-cross-compilation-deep-dive/
 
</guid>

<pubDate>Tue, 23 Jan 2018 06:00:00 GMT</pubDate>
</item>

<item>
<title>
 
<![CDATA[Making a cross-platform mobile game in Reason/OCaml]]>
 
</title>
<description>
 
<![CDATA[<p>I launched the first cross-platform mobile native game written in Reason a few weeks ago 🎉, to the <a href="https://play.google.com/store/apps/details?id=com.jaredforsyth.gravitron">Android</a> and <a href="https://itunes.apple.com/us/app/gravitron-master-gravity/id1330043938">iOS app stores</a>, with a free <a href="https://gravitron.jaredforsyth.com">web version</a> and a <a href="https://github.com/jaredly/gravitron/releases/tag/1.0.0">macos desktop bundle</a> (source code <a href="https://github.com/jaredly/gravitron">all on github</a>).</p>
<p>Getting there required lots of fiddling with cross-compilers and build systems, and so I made a tool that will take away much of the pain involved, so you can get started immediately and get your game into the world. <strong>NB: This is still super experimental</strong> but I’m really excited about it and want to get y’all in on the fun.</p>
 5 minute read]]>
 
</description>
<summary>
 
<![CDATA[<p>I launched the first cross-platform mobile native game written in Reason a few weeks ago 🎉, to the <a href="https://play.google.com/store/apps/details?id=com.jaredforsyth.gravitron">Android</a> and <a href="https://itunes.apple.com/us/app/gravitron-master-gravity/id1330043938">iOS app stores</a>, with a free <a href="https://gravitron.jaredforsyth.com">web version</a> and a <a href="https://github.com/jaredly/gravitron/releases/tag/1.0.0">macos desktop bundle</a> (source code <a href="https://github.com/jaredly/gravitron">all on github</a>).</p>
<p>Getting there required lots of fiddling with cross-compilers and build systems, and so I made a tool that will take away much of the pain involved, so you can get started immediately and get your game into the world. <strong>NB: This is still super experimental</strong> but I’m really excited about it and want to get y’all in on the fun.</p>
 5 minute read]]>
 
</summary>
<author> "Jared Forsyth" </author>
<link>
 
https://jaredforsyth.com/posts/making-a-cross-platform-mobile-game-in-reason-ocaml/
 
</link>
<guid>
 
https://jaredforsyth.com/posts/making-a-cross-platform-mobile-game-in-reason-ocaml/
 
</guid>

<pubDate>Sat, 13 Jan 2018 06:00:00 GMT</pubDate>
</item>

<item>
<title>
 
<![CDATA[Building async/await in Reason]]>
 
</title>
<description>
 
<![CDATA[<p>Lots of people have come into the discord channel asking about how to elegantly deal with async things. We’ve got <code class="language-javascript">Promise<span class="token punctuation">.</span>then_</code> and good old callbacks, but having a syntax like <code class="language-javascript">async<span class="token operator">/</span><span class="token keyword">await</span></code> can really make things nicer when you have a lot of async going on. So far in the web clients I’ve made, there hasn’t been enough asynchrony to really feel that pain, but I thought it would be an interesting challenge to tackle anyway.</p>
 8 minute read]]>
 
</description>
<summary>
 
<![CDATA[<p>Lots of people have come into the discord channel asking about how to elegantly deal with async things. We’ve got <code class="language-javascript">Promise<span class="token punctuation">.</span>then_</code> and good old callbacks, but having a syntax like <code class="language-javascript">async<span class="token operator">/</span><span class="token keyword">await</span></code> can really make things nicer when you have a lot of async going on. So far in the web clients I’ve made, there hasn’t been enough asynchrony to really feel that pain, but I thought it would be an interesting challenge to tackle anyway.</p>
 8 minute read]]>
 
</summary>
<author> "Jared Forsyth" </author>
<link>
 
https://jaredforsyth.com/posts/building-async-await-in-reason/
 
</link>
<guid>
 
https://jaredforsyth.com/posts/building-async-await-in-reason/
 
</guid>

<pubDate>Sat, 30 Dec 2017 06:00:00 GMT</pubDate>
</item>

<item>
<title>
 
<![CDATA[Advanced ReasonReact: Higher Order Components]]>
 
</title>
<description>
 
<![CDATA[<p>After jumping into ReasonReact, I soon came to the question “How do I do higher-order components?” I had some duplicated logic in several components regarding data fetching, and I wanted to use this familiar React tool to refactor.</p>
<p>To illustrate, we’ll be making a “fetches something from the network” wrapper component. We’ll start with a “mixed component” that we’ll then try to refactor.</p>
 6 minute read]]>
 
</description>
<summary>
 
<![CDATA[<p>After jumping into ReasonReact, I soon came to the question “How do I do higher-order components?” I had some duplicated logic in several components regarding data fetching, and I wanted to use this familiar React tool to refactor.</p>
<p>To illustrate, we’ll be making a “fetches something from the network” wrapper component. We’ll start with a “mixed component” that we’ll then try to refactor.</p>
 6 minute read]]>
 
</summary>
<author> "Jared Forsyth" </author>
<link>
 
https://jaredforsyth.com/posts/advanced-reasonreact-hider-order-components/
 
</link>
<guid>
 
https://jaredforsyth.com/posts/advanced-reasonreact-hider-order-components/
 
</guid>

<pubDate>Sun, 12 Nov 2017 06:00:00 GMT</pubDate>
</item>

<item>
<title>
 
<![CDATA[A ReasonReact Tutorial]]>
 
</title>
<description>
 
<![CDATA[
<p>Are you a big fan of React, and want to know more about Reason/OCaml? I made this for you!</p>

<blockquote><p>This tutorial was updated on April 20, 2019 for reason-react version 0.7.0, and React hooks! If you want to see what it was like before hooks, <a href="http://web.archive.org/web/20190420064733/https://jaredforsyth.com/posts/a-reason-react-tutorial/">here's the previous version</a></p></blockquote>

<p><a href="http://facebook.github.io/reason/">Reason</a> is a project that adds a JavaScript-style syntax and a bunch of conventions and tooling to OCaml. The goal is to make this awesome language, with its powerful type system and robust multi-platform compiler, accessible to a broader audience. It's backed by the good folks at Facebook who invented and built React, and so naturally having best-in-class React interop has been a high priority.</p>

<p>This tutorial aims to give you a nice introduction to the syntax and type system of Reason, through the <a href="https://reasonml.github.io/reason-react/">ReasonReact library</a>. We'll be building a simple Todo list application.</p>
 Read more]]>
 
</description>
<summary>
 
<![CDATA[
<p>Are you a big fan of React, and want to know more about Reason/OCaml? I made this for you!</p>

<blockquote><p>This tutorial was updated on April 20, 2019 for reason-react version 0.7.0, and React hooks! If you want to see what it was like before hooks, <a href="http://web.archive.org/web/20190420064733/https://jaredforsyth.com/posts/a-reason-react-tutorial/">here's the previous version</a></p></blockquote>

<p><a href="http://facebook.github.io/reason/">Reason</a> is a project that adds a JavaScript-style syntax and a bunch of conventions and tooling to OCaml. The goal is to make this awesome language, with its powerful type system and robust multi-platform compiler, accessible to a broader audience. It's backed by the good folks at Facebook who invented and built React, and so naturally having best-in-class React interop has been a high priority.</p>

<p>This tutorial aims to give you a nice introduction to the syntax and type system of Reason, through the <a href="https://reasonml.github.io/reason-react/">ReasonReact library</a>. We'll be building a simple Todo list application.</p>
 Read more]]>
 
</summary>
<author> "Jared Forsyth" </author>
<link>
 
https://jaredforsyth.com/posts/a-reason-react-tutorial/
 
</link>
<guid>
 
https://jaredforsyth.com/posts/a-reason-react-tutorial/
 
</guid>

<pubDate>Wed, 05 Jul 2017 05:00:00 GMT</pubDate>
</item>

<item>
<title>
 
<![CDATA[When will ReasonML be ready?]]>
 
</title>
<description>
 
<![CDATA[<p>Someone came into our <a href="https://discord.gg/reasonml">discord channel</a> a few days ago asking “Is Reason suitable for migrating a large production JavaScript codebase incrementally?” I answered “Yes, but wait 6 months.”</p>
<p>What’s the current status? At the moment, we’re mostly in the realm of “enthusiasts who are OK with being on the bleeding edge, and want to help build out the foundation in their spare time.”</p>
 4 minute read]]>
 
</description>
<summary>
 
<![CDATA[<p>Someone came into our <a href="https://discord.gg/reasonml">discord channel</a> a few days ago asking “Is Reason suitable for migrating a large production JavaScript codebase incrementally?” I answered “Yes, but wait 6 months.”</p>
<p>What’s the current status? At the moment, we’re mostly in the realm of “enthusiasts who are OK with being on the bleeding edge, and want to help build out the foundation in their spare time.”</p>
 4 minute read]]>
 
</summary>
<author> "Jared Forsyth" </author>
<link>
 
https://jaredforsyth.com/posts/when-will-reasonml-be-ready/
 
</link>
<guid>
 
https://jaredforsyth.com/posts/when-will-reasonml-be-ready/
 
</guid>

<pubDate>Fri, 23 Jun 2017 05:00:00 GMT</pubDate>
</item>

<item>
<title>
 
<![CDATA[Template-based macros in Reason/OCaml]]>
 
</title>
<description>
 
<![CDATA[<p>A couple of people have shown up in <a href="https://discord.gg/reasonml">the discord channel</a> asking whether Reason has macros, and the answer is “sort of.” I think we can do better.</p>
 7 minute read]]>
 
</description>
<summary>
 
<![CDATA[<p>A couple of people have shown up in <a href="https://discord.gg/reasonml">the discord channel</a> asking whether Reason has macros, and the answer is “sort of.” I think we can do better.</p>
 7 minute read]]>
 
</summary>
<author> "Jared Forsyth" </author>
<link>
 
https://jaredforsyth.com/posts/template-based-macros-for-reason-ocaml/
 
</link>
<guid>
 
https://jaredforsyth.com/posts/template-based-macros-for-reason-ocaml/
 
</guid>

<pubDate>Tue, 20 Jun 2017 05:00:00 GMT</pubDate>
</item>

<item>
<title>
 
<![CDATA[Your first native Reason/OCaml project]]>
 
</title>
<description>
 
<![CDATA[<p>I just wrote my first Reason project that compiled to native, and you can too! Luckily for you, my first native project was a cli tool to help people get started with native Reason development 🙌.</p>
 6 minute read]]>
 
</description>
<summary>
 
<![CDATA[<p>I just wrote my first Reason project that compiled to native, and you can too! Luckily for you, my first native project was a cli tool to help people get started with native Reason development 🙌.</p>
 6 minute read]]>
 
</summary>
<author> "Jared Forsyth" </author>
<link>
 
https://jaredforsyth.com/posts/your-first-native-reason-ocaml-project/
 
</link>
<guid>
 
https://jaredforsyth.com/posts/your-first-native-reason-ocaml-project/
 
</guid>

<pubDate>Sat, 17 Jun 2017 05:00:00 GMT</pubDate>
</item>

<item>
<title>
 
<![CDATA[Getting Started with Reason and BuckleScript]]>
 
</title>
<description>
 
<![CDATA[<p>A couple of people have asked me how to get up and running recently, so I thought I’d put something together. If you’re looking for a “just clone this repo &amp; go”, <a href="https://github.com/jaredly/reason-bucklescript-example">here’s a very simple boilerplate</a> I put together for this post, or you can check out the <a href="https://github.com/chenglou/reason-react-example">reason-react-example</a> repository.</p>
 4 minute read]]>
 
</description>
<summary>
 
<![CDATA[<p>A couple of people have asked me how to get up and running recently, so I thought I’d put something together. If you’re looking for a “just clone this repo &amp; go”, <a href="https://github.com/jaredly/reason-bucklescript-example">here’s a very simple boilerplate</a> I put together for this post, or you can check out the <a href="https://github.com/chenglou/reason-react-example">reason-react-example</a> repository.</p>
 4 minute read]]>
 
</summary>
<author> "Jared Forsyth" </author>
<link>
 
https://jaredforsyth.com/posts/getting-started-with-reason-and-bucklescript/
 
</link>
<guid>
 
https://jaredforsyth.com/posts/getting-started-with-reason-and-bucklescript/
 
</guid>

<pubDate>Sat, 03 Jun 2017 05:00:00 GMT</pubDate>
</item>

<item>
<title>
 
<![CDATA[JavaScript Interop with Reason and BuckleScript]]>
 
</title>
<description>
 
<![CDATA[<p>So you’re all ready to write some Reason but you need to call a JavaScript function? Or maybe you can’t figure out how to write something in OCaml-land and wish you could just bail for a minute &amp; write it in JavaScript? Fortunately, both of those are fairly easy to pull off.</p>
 8 minute read]]>
 
</description>
<summary>
 
<![CDATA[<p>So you’re all ready to write some Reason but you need to call a JavaScript function? Or maybe you can’t figure out how to write something in OCaml-land and wish you could just bail for a minute &amp; write it in JavaScript? Fortunately, both of those are fairly easy to pull off.</p>
 8 minute read]]>
 
</summary>
<author> "Jared Forsyth" </author>
<link>
 
https://jaredforsyth.com/posts/javascript-interop-with-reason-and-bucklescript/
 
</link>
<guid>
 
https://jaredforsyth.com/posts/javascript-interop-with-reason-and-bucklescript/
 
</guid>

<pubDate>Sat, 03 Jun 2017 05:00:00 GMT</pubDate>
</item>

<item>
<title>
 
<![CDATA[Detecting unused styles in JavaScript with `babel-traverse`]]>
 
</title>
<description>
 
<![CDATA[<p>Last week, my coworker <a href="https://twitter.com/crm416">Charlie</a> asked what it would take to automatically detect and purge unused <a href="https://github.com/Khan/aphrodite">aphrodite</a> styles in our codebase.</p>
<p>If asked 2 years ago, I probably would have gone with a regex and a string-munging python script, but I’d just spent the past few nights messing with babel plugins, and figured I could probably get pretty far with relatively little work. As it happened, I was <strong>impressed by how easy it was</strong> using the tools that babel provides.</p>
<p>As a bonus, it also works with <a href="https://github.com/facebook/react-native">React Native</a> because they have the same API, and it could probably be extended to other libraries without too much work.</p>
 8 minute read]]>
 
</description>
<summary>
 
<![CDATA[<p>Last week, my coworker <a href="https://twitter.com/crm416">Charlie</a> asked what it would take to automatically detect and purge unused <a href="https://github.com/Khan/aphrodite">aphrodite</a> styles in our codebase.</p>
<p>If asked 2 years ago, I probably would have gone with a regex and a string-munging python script, but I’d just spent the past few nights messing with babel plugins, and figured I could probably get pretty far with relatively little work. As it happened, I was <strong>impressed by how easy it was</strong> using the tools that babel provides.</p>
<p>As a bonus, it also works with <a href="https://github.com/facebook/react-native">React Native</a> because they have the same API, and it could probably be extended to other libraries without too much work.</p>
 8 minute read]]>
 
</summary>
<author> "Jared Forsyth" </author>
<link>
 
https://jaredforsyth.com/posts/analyzing-javascript-with-babel-traverse/
 
</link>
<guid>
 
https://jaredforsyth.com/posts/analyzing-javascript-with-babel-traverse/
 
</guid>

<pubDate>Sat, 08 Apr 2017 05:00:00 GMT</pubDate>
</item>

<item>
<title>
 
<![CDATA[What Holds Me Back From Clojurescript]]>
 
</title>
<description>
 
<![CDATA[<p>I’ve expressed <a href="https://twitter.com/jaredforsyth/status/507253337310236672">multiple</a> <a href="https://twitter.com/jaredforsyth/status/668947788021960704">times</a> that I really want to get into clojurescript, but I keep running into barriers.</p>
<p>My background: I’m an experienced JS dev, and for my personal projects I use the latest &amp; greatest of <a href="https://facebook.github.com/react">React</a>, <a href="https://flowtype.org">Flow</a>, <a href="https://babeljs.io">Babel</a>, and <a href="https://webpack.github.io">Webpack</a>, which makes for a pretty rocking experience. Given my background, lots of my hesitation could just be the fact that staying in my comfort zone of javascript is <em>easy</em>, though it may be far less <em>simple</em> than the experience provided by clojurescript.</p>
<p>By the end of this post, I hope I will have convinced myself to face my fears and dive into clojurescript anyway :D</p>
 11 minute read]]>
 
</description>
<summary>
 
<![CDATA[<p>I’ve expressed <a href="https://twitter.com/jaredforsyth/status/507253337310236672">multiple</a> <a href="https://twitter.com/jaredforsyth/status/668947788021960704">times</a> that I really want to get into clojurescript, but I keep running into barriers.</p>
<p>My background: I’m an experienced JS dev, and for my personal projects I use the latest &amp; greatest of <a href="https://facebook.github.com/react">React</a>, <a href="https://flowtype.org">Flow</a>, <a href="https://babeljs.io">Babel</a>, and <a href="https://webpack.github.io">Webpack</a>, which makes for a pretty rocking experience. Given my background, lots of my hesitation could just be the fact that staying in my comfort zone of javascript is <em>easy</em>, though it may be far less <em>simple</em> than the experience provided by clojurescript.</p>
<p>By the end of this post, I hope I will have convinced myself to face my fears and dive into clojurescript anyway :D</p>
 11 minute read]]>
 
</summary>
<author> "Jared Forsyth" </author>
<link>
 
https://jaredforsyth.com/posts/What-holds-me-back-from-Clojurescript/
 
</link>
<guid>
 
https://jaredforsyth.com/posts/What-holds-me-back-from-Clojurescript/
 
</guid>

<pubDate>Thu, 26 Nov 2015 06:00:00 GMT</pubDate>
</item>

<item>
<title>
 
<![CDATA[Visualizing Reactive Streams: Hot and Cold Observables]]>
 
</title>
<description>
 
<![CDATA[<p>Reactive Programming is getting a lot of attention these days, and it promises to reduce frustration, bugs, and greenhouse gas emissions. Unfortunately, there’s a sizeable learning curve involved while you try and get your head to think in streams instead of imperative sequential processes.</p>
 6 minute read]]>
 
</description>
<summary>
 
<![CDATA[<p>Reactive Programming is getting a lot of attention these days, and it promises to reduce frustration, bugs, and greenhouse gas emissions. Unfortunately, there’s a sizeable learning curve involved while you try and get your head to think in streams instead of imperative sequential processes.</p>
 6 minute read]]>
 
</summary>
<author> "Jared Forsyth" </author>
<link>
 
https://jaredforsyth.com/posts/visualizing-reactive-streams-hot-and-cold/
 
</link>
<guid>
 
https://jaredforsyth.com/posts/visualizing-reactive-streams-hot-and-cold/
 
</guid>

<pubDate>Fri, 06 Mar 2015 06:00:00 GMT</pubDate>
</item>

<item>
<title>
 
<![CDATA[Rust compiling rust: adventures with librustc]]>
 
</title>
<description>
 
<![CDATA[<p>For <a href="http://jaredly.github.io/itreed/">the web-based everything notebook</a> that I’m working on, I’ve been writing backend hookups to various programming REPLs, including <a href="http://ipython.org">IPython</a> and <a href="http://gorilla-repl.org">Gorilla</a>. I wanted to be able to evaluate rust code as well in this notebook environment, and so I set about writing a simple server that would compile up a string in rust when asked. This proved do have a couple of gotchas, so I thought I’d air my thoughts here.</p>
 4 minute read]]>
 
</description>
<summary>
 
<![CDATA[<p>For <a href="http://jaredly.github.io/itreed/">the web-based everything notebook</a> that I’m working on, I’ve been writing backend hookups to various programming REPLs, including <a href="http://ipython.org">IPython</a> and <a href="http://gorilla-repl.org">Gorilla</a>. I wanted to be able to evaluate rust code as well in this notebook environment, and so I set about writing a simple server that would compile up a string in rust when asked. This proved do have a couple of gotchas, so I thought I’d air my thoughts here.</p>
 4 minute read]]>
 
</summary>
<author> "Jared Forsyth" </author>
<link>
 
https://jaredforsyth.com/posts/rust-compiling-rust-adventures-with-librustc/
 
</link>
<guid>
 
https://jaredforsyth.com/posts/rust-compiling-rust-adventures-with-librustc/
 
</guid>

<pubDate>Sat, 22 Nov 2014 06:00:00 GMT</pubDate>
</item>

<item>
<title>
 
<![CDATA[Switching from Ghost to Hexo]]>
 
</title>
<description>
 
<![CDATA[<p>My blog used to use <a href="http://hyde.github.io/">Hyde</a>, a python clone of the popular jekyll platform. When <a href="http://ghost.org">Ghost</a> came out, I quickly switched over, due in main part to the great editor and beautiful themes. I used <a href="https://github.com/axitkhurana/buster">buster</a> to serialize the blog so that I could still serve it as a static site. I had two main regrets, though. 1) using buster to scrape ghost was a hack. 2) My posts were locked in an sqlite db, where git could only do a binary diff.</p>
 1 minute read]]>
 
</description>
<summary>
 
<![CDATA[<p>My blog used to use <a href="http://hyde.github.io/">Hyde</a>, a python clone of the popular jekyll platform. When <a href="http://ghost.org">Ghost</a> came out, I quickly switched over, due in main part to the great editor and beautiful themes. I used <a href="https://github.com/axitkhurana/buster">buster</a> to serialize the blog so that I could still serve it as a static site. I had two main regrets, though. 1) using buster to scrape ghost was a hack. 2) My posts were locked in an sqlite db, where git could only do a binary diff.</p>
 1 minute read]]>
 
</summary>
<author> "Jared Forsyth" </author>
<link>
 
https://jaredforsyth.com/posts/switching-from-ghost-to-hexo/
 
</link>
<guid>
 
https://jaredforsyth.com/posts/switching-from-ghost-to-hexo/
 
</guid>

<pubDate>Sat, 26 Jul 2014 05:00:00 GMT</pubDate>
</item>

<item>
<title>
 
<![CDATA[The Hexo static blogging engine gets an admin UI]]>
 
</title>
<description>
 
<![CDATA[<p>I <a href="/2014/07/26/switching-from-ghost-to-hexo/">recently switched</a> from <a href="http://ghost.org">ghost</a> to <a href="http://hexo.io">hexo</a>, and the biggest thing missing for me was the editor interface. So I made one. Currently, it’s mostly a clone of the Ghost interface, but I have some ideas for making it even more awesome.</p>
 1 minute read]]>
 
</description>
<summary>
 
<![CDATA[<p>I <a href="/2014/07/26/switching-from-ghost-to-hexo/">recently switched</a> from <a href="http://ghost.org">ghost</a> to <a href="http://hexo.io">hexo</a>, and the biggest thing missing for me was the editor interface. So I made one. Currently, it’s mostly a clone of the Ghost interface, but I have some ideas for making it even more awesome.</p>
 1 minute read]]>
 
</summary>
<author> "Jared Forsyth" </author>
<link>
 
https://jaredforsyth.com/posts/the-hexo-static-blogging-engine-gets-an-admin-ui/
 
</link>
<guid>
 
https://jaredforsyth.com/posts/the-hexo-static-blogging-engine-gets-an-admin-ui/
 
</guid>

<pubDate>Sat, 26 Jul 2014 05:00:00 GMT</pubDate>
</item>

<item>
<title>
 
<![CDATA[Rust vs Go]]>
 
</title>
<description>
 
<![CDATA[<p>Go and Rust seem like natural competitors. They are both trying the role of a C-like low-level language with modern affordances, safety, and nice, clean concurrency. And they’re each backed by a major player in the browser race - go by Google, rust by Mozilla.</p>
 6 minute read]]>
 
</description>
<summary>
 
<![CDATA[<p>Go and Rust seem like natural competitors. They are both trying the role of a C-like low-level language with modern affordances, safety, and nice, clean concurrency. And they’re each backed by a major player in the browser race - go by Google, rust by Mozilla.</p>
 6 minute read]]>
 
</summary>
<author> "Jared Forsyth" </author>
<link>
 
https://jaredforsyth.com/posts/rust-vs-go/
 
</link>
<guid>
 
https://jaredforsyth.com/posts/rust-vs-go/
 
</guid>

<pubDate>Sat, 22 Mar 2014 05:00:00 GMT</pubDate>
</item>

<item>
<title>
 
<![CDATA[First Impressions of Rust]]>
 
</title>
<description>
 
<![CDATA[2 minute read]]>
 
</description>
<summary>
 
<![CDATA[2 minute read]]>
 
</summary>
<author> "Jared Forsyth" </author>
<link>
 
https://jaredforsyth.com/posts/first-impressions-of-rust/
 
</link>
<guid>
 
https://jaredforsyth.com/posts/first-impressions-of-rust/
 
</guid>

<pubDate>Thu, 20 Mar 2014 05:00:00 GMT</pubDate>
</item>

<item>
<title>
 
<![CDATA[The Noble Perceptron]]>
 
</title>
<description>
 
<![CDATA[<p>The perceptron is one of the most primitive learners, and is also of the easier ones to understand intuitively. I’ll first give some background, and then an animation in javascript with 2D data, and an implementation in python, with graphs of it running on some traditional datasets.</p>
 6 minute read]]>
 
</description>
<summary>
 
<![CDATA[<p>The perceptron is one of the most primitive learners, and is also of the easier ones to understand intuitively. I’ll first give some background, and then an animation in javascript with 2D data, and an implementation in python, with graphs of it running on some traditional datasets.</p>
 6 minute read]]>
 
</summary>
<author> "Jared Forsyth" </author>
<link>
 
https://jaredforsyth.com/posts/the-noble-perceptron/
 
</link>
<guid>
 
https://jaredforsyth.com/posts/the-noble-perceptron/
 
</guid>

<pubDate>Wed, 29 Jan 2014 06:00:00 GMT</pubDate>
</item>

<item>
<title>
 
<![CDATA[Photon Ray Tracing]]>
 
</title>
<description>
 
<![CDATA[<p>A few months ago I saw @scanlime’s “Zen Photon Garden” on hacker news, and was really impressed. In short, you draw walls/mirrors with your mouse, and it ray-traces light from a central source. Very beautiful and “zen”. However, as a programmer, drawing lines by hand was far too inaccurate. So I forked it and added a scriptable interface for adding walls.</p>
 1 minute read]]>
 
</description>
<summary>
 
<![CDATA[<p>A few months ago I saw @scanlime’s “Zen Photon Garden” on hacker news, and was really impressed. In short, you draw walls/mirrors with your mouse, and it ray-traces light from a central source. Very beautiful and “zen”. However, as a programmer, drawing lines by hand was far too inaccurate. So I forked it and added a scriptable interface for adding walls.</p>
 1 minute read]]>
 
</summary>
<author> "Jared Forsyth" </author>
<link>
 
https://jaredforsyth.com/posts/photon-ray-tracing/
 
</link>
<guid>
 
https://jaredforsyth.com/posts/photon-ray-tracing/
 
</guid>

<pubDate>Mon, 20 Jan 2014 06:00:00 GMT</pubDate>
</item>
</channel></rss>