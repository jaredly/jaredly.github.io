<rss
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:content="http://purl.org/rss/1.0/modules/content/"
    xmlns:atom="http://www.w3.org/2005/Atom"
    version="2.0"><channel>
<title><![CDATA[All posts | JaredForsyth.com]]></title>
<item>
<title><![CDATA[Local-first database: RxDB + PouchDB]]></title>
<description><![CDATA[7 minute read]]></description>
<summary><![CDATA[7 minute read]]></summary>
<author>Jared Forsyth</author>
<link>https://jaredforsyth.com/posts/local-first-database-rxdb-pouchdb/</link>
<guid>https://jaredforsyth.com/posts/local-first-database-rxdb-pouchdb/</guid>

<pubDate>12 May 2020 00:00:00 GMT</pubDate>
</item>

<item>
<title><![CDATA[Local-first database: remoteStorage.js]]></title>
<description>
<![CDATA[<p><a href="https://remotestorage.io/" target="_blank">remoteStorage.js</a> is a an offline-first solution that&#39;s been around for quite some time, and stands out for having a <a href="https://datatracker.ietf.org/doc/draft-dejong-remotestorage/" target="_blank">formal protocol spec</a>, first drafted in 2012. It would be really cool if it took off, but unfortunately there are only <a href="https://wiki.remotestorage.io/Servers" target="_blank">one or two commercial providers</a>, and the <a href="https://github.com/fkooman/php-remote-storage" target="_blank">only stable open-source server implementation</a> is in PHP. There&#39;s <a href="https://github.com/untitaker/mysteryshack" target="_blank">one written in rust</a> that has been <a href="https://github.com/untitaker/mysteryshack" target="_blank">unmaintained</a> since early 2018, and a <a href="https://github.com/remotestorage/armadietto" target="_blank">nodejs one</a> that has a big warning up top about being experimental &amp; alpha-stage. Still, I figured it would be interesting to see how it stacks up according to my <a href="https://jaredforsyth.com/posts/in-search-of-a-local-first-database/" target="_blank">local-first database criteria</a>. You can also look at the evaluation of <a href="https://jaredforsyth.com/posts/local-first-database-gun-js/" target="_blank">gun-js</a> to see how it compares.</p>

<div class='note'><p>Technically, &quot;remoteStorage&quot; is the protocol, and &quot;remoteStorage.js&quot; is the &quot;reference client imeplementation&quot;. My goal with this series is to look at solutions that are immediately ready to be used to build apps, so my evaluation is of the javascript client (and a corresponding community-built javascript server). While many of the features of the client &amp; server are inherent to the protocol, there are also many things that are more due to implementation details than the underlying spec. 🤷</p>
</div> 8 minute read]]>
</description>
<summary>
<![CDATA[<p><a href="https://remotestorage.io/" target="_blank">remoteStorage.js</a> is a an offline-first solution that&#39;s been around for quite some time, and stands out for having a <a href="https://datatracker.ietf.org/doc/draft-dejong-remotestorage/" target="_blank">formal protocol spec</a>, first drafted in 2012. It would be really cool if it took off, but unfortunately there are only <a href="https://wiki.remotestorage.io/Servers" target="_blank">one or two commercial providers</a>, and the <a href="https://github.com/fkooman/php-remote-storage" target="_blank">only stable open-source server implementation</a> is in PHP. There&#39;s <a href="https://github.com/untitaker/mysteryshack" target="_blank">one written in rust</a> that has been <a href="https://github.com/untitaker/mysteryshack" target="_blank">unmaintained</a> since early 2018, and a <a href="https://github.com/remotestorage/armadietto" target="_blank">nodejs one</a> that has a big warning up top about being experimental &amp; alpha-stage. Still, I figured it would be interesting to see how it stacks up according to my <a href="https://jaredforsyth.com/posts/in-search-of-a-local-first-database/" target="_blank">local-first database criteria</a>. You can also look at the evaluation of <a href="https://jaredforsyth.com/posts/local-first-database-gun-js/" target="_blank">gun-js</a> to see how it compares.</p>

<div class='note'><p>Technically, &quot;remoteStorage&quot; is the protocol, and &quot;remoteStorage.js&quot; is the &quot;reference client imeplementation&quot;. My goal with this series is to look at solutions that are immediately ready to be used to build apps, so my evaluation is of the javascript client (and a corresponding community-built javascript server). While many of the features of the client &amp; server are inherent to the protocol, there are also many things that are more due to implementation details than the underlying spec. 🤷</p>
</div> 8 minute read]]>
</summary>
<author>Jared Forsyth</author>
<link>https://jaredforsyth.com/posts/local-first-database-remotestorage/</link>
<guid>https://jaredforsyth.com/posts/local-first-database-remotestorage/</guid>

<pubDate>06 May 2020 00:00:00 GMT</pubDate>
</item>

<item>
<title><![CDATA[Local-first database: gun.js]]></title>
<description>
<![CDATA[<p><a href="https://gun.js.org/" target="_blank">Gun.js</a> is an open-source project I&#39;ve had my eye on for several years now, every once in a while checking back to see how it&#39;s progressed, and whether the project I&#39;m working on at the time is a good fit for it.</p>

<p>Gun stands out as one of the few players that&#39;s actually delivering a peer-to-peer / decentralized system that works on a large scale.</p>

<p>Using my <a href="https://jaredforsyth.com/posts/in-search-of-a-local-first-database/" target="_blank">criteria for a local-first database</a>, here&#39;s how it stacks up:</p>
 10 minute read]]>
</description>
<summary>
<![CDATA[<p><a href="https://gun.js.org/" target="_blank">Gun.js</a> is an open-source project I&#39;ve had my eye on for several years now, every once in a while checking back to see how it&#39;s progressed, and whether the project I&#39;m working on at the time is a good fit for it.</p>

<p>Gun stands out as one of the few players that&#39;s actually delivering a peer-to-peer / decentralized system that works on a large scale.</p>

<p>Using my <a href="https://jaredforsyth.com/posts/in-search-of-a-local-first-database/" target="_blank">criteria for a local-first database</a>, here&#39;s how it stacks up:</p>
 10 minute read]]>
</summary>
<author>Jared Forsyth</author>
<link>https://jaredforsyth.com/posts/local-first-database-gun-js/</link>
<guid>https://jaredforsyth.com/posts/local-first-database-gun-js/</guid>

<pubDate>01 May 2020 00:00:00 GMT</pubDate>
</item>

<item>
<title><![CDATA[In Search of a Local-First Database]]></title>
<description>
<![CDATA[<p>I&#39;ve been wrestling with the issue of &quot;data storage that syncs and works offline&quot; for a number of years now, and have gotten 80% of the way on a few different implementations, but always ultimately get stymied by the little things, like &quot;how do I make it not break&quot;.</p>

<p>Recently, I&#39;ve been re-energized in my search by the wonderful <a href="https://www.inkandswitch.com/local-first.html" target="_blank">Local-first software</a> article by <a href="https://www.inkandswitch.com/" target="_blank">Ink &amp; Switch</a>, and then by <a href="https://twitter.com/jlongster" target="_blank">James Long</a>&#39;s dotConf talk, <a href="https://www.dotconferences.com/2019/12/james-long-crdts-for-mortals" target="_blank">CRDTs for Mortals</a>.</p>
 6 minute read]]>
</description>
<summary>
<![CDATA[<p>I&#39;ve been wrestling with the issue of &quot;data storage that syncs and works offline&quot; for a number of years now, and have gotten 80% of the way on a few different implementations, but always ultimately get stymied by the little things, like &quot;how do I make it not break&quot;.</p>

<p>Recently, I&#39;ve been re-energized in my search by the wonderful <a href="https://www.inkandswitch.com/local-first.html" target="_blank">Local-first software</a> article by <a href="https://www.inkandswitch.com/" target="_blank">Ink &amp; Switch</a>, and then by <a href="https://twitter.com/jlongster" target="_blank">James Long</a>&#39;s dotConf talk, <a href="https://www.dotconferences.com/2019/12/james-long-crdts-for-mortals" target="_blank">CRDTs for Mortals</a>.</p>
 6 minute read]]>
</summary>
<author>Jared Forsyth</author>
<link>https://jaredforsyth.com/posts/in-search-of-a-local-first-database/</link>
<guid>https://jaredforsyth.com/posts/in-search-of-a-local-first-database/</guid>

<pubDate>11 Apr 2020 00:00:00 GMT</pubDate>
</item>

<item>
<title><![CDATA[Hybrid Logical Clocks]]></title>
<description>
<![CDATA[<div class='note'><p>This is the first in a series of posts digging into James Long&#39;s talk <a href="https://www.dotconferences.com/2019/12/james-long-crdts-for-mortals" target="_blank">CRDTs for Mortals</a>, and the accompanying <a href="https://github.com/jlongster/crdt-example-app" target="_blank">demo app</a> he created.</p>
</div>
<p>So, you&#39;re writing a <strike>destributed system</strike> local-first app, and you&#39;re sending events back and forth between various clients and the server. One thing you&#39;d really like to be able to do is determine <strong>the order in which events happened</strong> -- this is important for the &quot;last&quot; part of &quot;last-write-wins&quot; CRDTs, for example. So you add a timestamp to each event as it&#39;s created, and all is well.</p>
 6 minute read]]>
</description>
<summary>
<![CDATA[<div class='note'><p>This is the first in a series of posts digging into James Long&#39;s talk <a href="https://www.dotconferences.com/2019/12/james-long-crdts-for-mortals" target="_blank">CRDTs for Mortals</a>, and the accompanying <a href="https://github.com/jlongster/crdt-example-app" target="_blank">demo app</a> he created.</p>
</div>
<p>So, you&#39;re writing a <strike>destributed system</strike> local-first app, and you&#39;re sending events back and forth between various clients and the server. One thing you&#39;d really like to be able to do is determine <strong>the order in which events happened</strong> -- this is important for the &quot;last&quot; part of &quot;last-write-wins&quot; CRDTs, for example. So you add a timestamp to each event as it&#39;s created, and all is well.</p>
 6 minute read]]>
</summary>
<author>Jared Forsyth</author>
<link>https://jaredforsyth.com/posts/hybrid-logical-clocks/</link>
<guid>https://jaredforsyth.com/posts/hybrid-logical-clocks/</guid>

<pubDate>14 Feb 2020 00:00:00 GMT</pubDate>
</item>

<item>
<title><![CDATA[My Scientific Sourdough 🍞]]></title>
<description><![CDATA[23 minute read]]></description>
<summary><![CDATA[23 minute read]]></summary>
<author>Jared Forsyth</author>
<link>https://jaredforsyth.com/posts/my-scientific-sourdough/</link>
<guid>https://jaredforsyth.com/posts/my-scientific-sourdough/</guid>

<pubDate>31 Dec 2019 00:00:00 GMT</pubDate>
</item>

<item>
<title><![CDATA[Automatic, well-typed JSON serialization in Reason/OCaml with Milk 🥛]]></title>
<description>
<![CDATA[<p>One of the things that keeps coming up as a pain point in Reason development is the boilerplate involved in parsing &amp; generating JSON. Whether you&#39;re using JSON for a REST api, or an on-disk file format, JSON is ubiquitous, and if you&#39;re coming from JavaScript, you&#39;re used to it also being painless! Because the data objects you&#39;re working with are immediately serializable to JSON and back.</p>
<p><a href="https://github.com/jaredly/milk" target="_blank"><code>Milk</code> 🥛</a> is a new tool I developed that generates serialization and deserialization code for your Reason/OCaml types, including types from arbitrary external packages, <em>and</em> it manages migration when the types change.</p>
 9 minute read]]>
</description>
<summary>
<![CDATA[<p>One of the things that keeps coming up as a pain point in Reason development is the boilerplate involved in parsing &amp; generating JSON. Whether you&#39;re using JSON for a REST api, or an on-disk file format, JSON is ubiquitous, and if you&#39;re coming from JavaScript, you&#39;re used to it also being painless! Because the data objects you&#39;re working with are immediately serializable to JSON and back.</p>
<p><a href="https://github.com/jaredly/milk" target="_blank"><code>Milk</code> 🥛</a> is a new tool I developed that generates serialization and deserialization code for your Reason/OCaml types, including types from arbitrary external packages, <em>and</em> it manages migration when the types change.</p>
 9 minute read]]>
</summary>
<author>Jared Forsyth</author>
<link>https://jaredforsyth.com/posts/announcing-milk/</link>
<guid>https://jaredforsyth.com/posts/announcing-milk/</guid>

<pubDate>28 May 2019 00:00:00 GMT</pubDate>
</item>

<item>
<title><![CDATA[Terraform: generate 3-d models of geographic terrain]]></title>
<description>
<![CDATA[<p>I just spent the past two weeks building a GUI Rust app to help you generate a 3-d model of terrain from around the world, that can then be used for 3-d printing, rendering, or whatever you like.</p>
 7 minute read]]>
</description>
<summary>
<![CDATA[<p>I just spent the past two weeks building a GUI Rust app to help you generate a 3-d model of terrain from around the world, that can then be used for 3-d printing, rendering, or whatever you like.</p>
 7 minute read]]>
</summary>
<author>Jared Forsyth</author>
<link>https://jaredforsyth.com/posts/intoducing-terraform/</link>
<guid>https://jaredforsyth.com/posts/intoducing-terraform/</guid>

<pubDate>16 May 2019 00:00:00 GMT</pubDate>
</item>

<item>
<title><![CDATA[Optional Attribute Access in Reason]]></title>
<description>
<![CDATA[<p>One thing that you&#39;ll run into when interfacing with complex javascript objects in Reason, is that dealing with optional objects can be a huge pain. The most common place to run into this is when using the excellent <a href="https://github.com/mhallin/graphql_ppx" target="_blank">graphql-ppx</a> syntax plugin (often together with <a href="https://github.com/apollographql/reason-apollo" target="_blank">reason-apollo</a>), because the result of a graphql query is a large complex javascript object, with many parts of it that are optional.</p>
 2 minute read]]>
</description>
<summary>
<![CDATA[<p>One thing that you&#39;ll run into when interfacing with complex javascript objects in Reason, is that dealing with optional objects can be a huge pain. The most common place to run into this is when using the excellent <a href="https://github.com/mhallin/graphql_ppx" target="_blank">graphql-ppx</a> syntax plugin (often together with <a href="https://github.com/apollographql/reason-apollo" target="_blank">reason-apollo</a>), because the result of a graphql query is a large complex javascript object, with many parts of it that are optional.</p>
 2 minute read]]>
</summary>
<author>Jared Forsyth</author>
<link>https://jaredforsyth.com/posts/optional-attribute-access-in-reason/</link>
<guid>https://jaredforsyth.com/posts/optional-attribute-access-in-reason/</guid>

<pubDate>13 Nov 2018 00:00:00 GMT</pubDate>
</item>

<item>
<title><![CDATA[State of Reason Survey: Preliminary Results]]></title>
<description>
<![CDATA[<p>I&#39;m planning to do some fancy social science analysis of the results, but first I&#39;ll just give you a dump of the summary data that came out of this.</p>
<p>First of all, there were 398 responses! Thanks to everyone who contributed :)</p>
 4 minute read]]>
</description>
<summary>
<![CDATA[<p>I&#39;m planning to do some fancy social science analysis of the results, but first I&#39;ll just give you a dump of the summary data that came out of this.</p>
<p>First of all, there were 398 responses! Thanks to everyone who contributed :)</p>
 4 minute read]]>
</summary>
<author>Jared Forsyth</author>
<link>https://jaredforsyth.com/posts/state-of-reason-survey-preliminary-results/</link>
<guid>https://jaredforsyth.com/posts/state-of-reason-survey-preliminary-results/</guid>

<pubDate>10 Nov 2018 00:00:00 GMT</pubDate>
</item>

<item>
<title><![CDATA[Deploying Native Reason/OCaml with Zeit's now.sh]]></title>
<description>
<![CDATA[<p>I&#39;m working on a new ReasonReact project that will need a stateful server, and I thought it might be nice to write that in Reason too :) but what&#39;s the best way to deploy it? And by &quot;best&quot; I mean &quot;easiest, with a free-to-try option&quot;. After looking around a little, I settled on Zeit&#39;s <a href="http://now.sh" target="_blank">now.sh</a>.</p>
<p>What did I end up with? <strong>A 10mb docker image</strong> with a server inside!</p>
 3 minute read]]>
</description>
<summary>
<![CDATA[<p>I&#39;m working on a new ReasonReact project that will need a stateful server, and I thought it might be nice to write that in Reason too :) but what&#39;s the best way to deploy it? And by &quot;best&quot; I mean &quot;easiest, with a free-to-try option&quot;. After looking around a little, I settled on Zeit&#39;s <a href="http://now.sh" target="_blank">now.sh</a>.</p>
<p>What did I end up with? <strong>A 10mb docker image</strong> with a server inside!</p>
 3 minute read]]>
</summary>
<author>Jared Forsyth</author>
<link>https://jaredforsyth.com/posts/deploying-native-reason-ocaml-with-now-sh/</link>
<guid>https://jaredforsyth.com/posts/deploying-native-reason-ocaml-with-now-sh/</guid>

<pubDate>07 Sep 2018 00:00:00 GMT</pubDate>
</item>

<item>
<title><![CDATA[Hot-reloading OCaml on Web, Desktop, and Android]]></title>
<description><![CDATA[3 minute read]]></description>
<summary><![CDATA[3 minute read]]></summary>
<author>Jared Forsyth</author>
<link>https://jaredforsyth.com/posts/hot-reloading-ocaml-on-web-desktop-and-android/</link>
<guid>https://jaredforsyth.com/posts/hot-reloading-ocaml-on-web-desktop-and-android/</guid>

<pubDate>23 Jan 2018 00:00:00 GMT</pubDate>
</item>

<item>
<title><![CDATA[Reason mobile cross-compilation deep dive]]></title>
<description>
<![CDATA[<p>I recently released <a href="https://github.com/jaredly/reprocessing-scripts" target="_blank">a tool that will manage all of this stuff</a> (see the <a href="https://jaredforsyth.com/posts/making-a-cross-platform-mobile-game-in-reason-ocaml/" target="_blank">accompanying blog post</a>), but I figure it&#39;s good to document what I went through for future ocaml cross-compilation spelunkers.</p>
 7 minute read]]>
</description>
<summary>
<![CDATA[<p>I recently released <a href="https://github.com/jaredly/reprocessing-scripts" target="_blank">a tool that will manage all of this stuff</a> (see the <a href="https://jaredforsyth.com/posts/making-a-cross-platform-mobile-game-in-reason-ocaml/" target="_blank">accompanying blog post</a>), but I figure it&#39;s good to document what I went through for future ocaml cross-compilation spelunkers.</p>
 7 minute read]]>
</summary>
<author>Jared Forsyth</author>
<link>https://jaredforsyth.com/posts/reason-mobile-cross-compilation-deep-dive/</link>
<guid>https://jaredforsyth.com/posts/reason-mobile-cross-compilation-deep-dive/</guid>

<pubDate>23 Jan 2018 00:00:00 GMT</pubDate>
</item>

<item>
<title><![CDATA[Making a cross-platform mobile game in Reason/OCaml]]></title>
<description>
<![CDATA[<p>I launched the first cross-platform mobile native game written in Reason a few weeks ago 🎉, to the <a href="https://play.google.com/store/apps/details?id=com.jaredforsyth.gravitron" target="_blank">Android</a> and <a href="https://itunes.apple.com/us/app/gravitron-master-gravity/id1330043938" target="_blank">iOS app stores</a>, with a free <a href="https://gravitron.jaredforsyth.com" target="_blank">web version</a> and a <a href="https://github.com/jaredly/gravitron/releases/tag/1.0.0" target="_blank">macos desktop bundle</a> (source code <a href="https://github.com/jaredly/gravitron" target="_blank">all on github</a>).</p>
<p>Getting there required lots of fiddling with cross-compilers and build systems, and so I made a tool that will take away much of the pain involved, so you can get started immediately and get your game into the world. <strong>NB: This is still super experimental</strong> but I&#39;m really excited about it and want to get y&#39;all in on the fun.</p>
 4 minute read]]>
</description>
<summary>
<![CDATA[<p>I launched the first cross-platform mobile native game written in Reason a few weeks ago 🎉, to the <a href="https://play.google.com/store/apps/details?id=com.jaredforsyth.gravitron" target="_blank">Android</a> and <a href="https://itunes.apple.com/us/app/gravitron-master-gravity/id1330043938" target="_blank">iOS app stores</a>, with a free <a href="https://gravitron.jaredforsyth.com" target="_blank">web version</a> and a <a href="https://github.com/jaredly/gravitron/releases/tag/1.0.0" target="_blank">macos desktop bundle</a> (source code <a href="https://github.com/jaredly/gravitron" target="_blank">all on github</a>).</p>
<p>Getting there required lots of fiddling with cross-compilers and build systems, and so I made a tool that will take away much of the pain involved, so you can get started immediately and get your game into the world. <strong>NB: This is still super experimental</strong> but I&#39;m really excited about it and want to get y&#39;all in on the fun.</p>
 4 minute read]]>
</summary>
<author>Jared Forsyth</author>
<link>https://jaredforsyth.com/posts/making-a-cross-platform-mobile-game-in-reason-ocaml/</link>
<guid>https://jaredforsyth.com/posts/making-a-cross-platform-mobile-game-in-reason-ocaml/</guid>

<pubDate>13 Jan 2018 00:00:00 GMT</pubDate>
</item>

<item>
<title><![CDATA[Building async/await in Reason]]></title>
<description>
<![CDATA[<p>Lots of people have come into the discord channel asking about how to elegantly deal with async things. We&#39;ve got <code>Promise.then_</code> and good old callbacks, but having a syntax like <code>async/await</code> can really make things nicer when you have a lot of async going on. So far in the web clients I&#39;ve made, there hasn&#39;t been enough asynchrony to really feel that pain, but I thought it would be an interesting challenge to tackle anyway.</p>
 7 minute read]]>
</description>
<summary>
<![CDATA[<p>Lots of people have come into the discord channel asking about how to elegantly deal with async things. We&#39;ve got <code>Promise.then_</code> and good old callbacks, but having a syntax like <code>async/await</code> can really make things nicer when you have a lot of async going on. So far in the web clients I&#39;ve made, there hasn&#39;t been enough asynchrony to really feel that pain, but I thought it would be an interesting challenge to tackle anyway.</p>
 7 minute read]]>
</summary>
<author>Jared Forsyth</author>
<link>https://jaredforsyth.com/posts/building-async-await-in-reason/</link>
<guid>https://jaredforsyth.com/posts/building-async-await-in-reason/</guid>

<pubDate>30 Dec 2017 00:00:00 GMT</pubDate>
</item>

<item>
<title><![CDATA[Advanced ReasonReact: Higher Order Components]]></title>
<description>
<![CDATA[<p>After jumping into ReasonReact, I soon came to the question &quot;How do I do higher-order components?&quot; I had some duplicated logic in several components regarding data fetching, and I wanted to use this familiar React tool to refactor.</p>
<p>To illustrate, we&#39;ll be making a &quot;fetches something from the network&quot; wrapper component. We&#39;ll start with a &quot;mixed component&quot; that we&#39;ll then try to refactor.</p>
 5 minute read]]>
</description>
<summary>
<![CDATA[<p>After jumping into ReasonReact, I soon came to the question &quot;How do I do higher-order components?&quot; I had some duplicated logic in several components regarding data fetching, and I wanted to use this familiar React tool to refactor.</p>
<p>To illustrate, we&#39;ll be making a &quot;fetches something from the network&quot; wrapper component. We&#39;ll start with a &quot;mixed component&quot; that we&#39;ll then try to refactor.</p>
 5 minute read]]>
</summary>
<author>Jared Forsyth</author>
<link>https://jaredforsyth.com/posts/advanced-reasonreact-hider-order-components/</link>
<guid>https://jaredforsyth.com/posts/advanced-reasonreact-hider-order-components/</guid>

<pubDate>12 Nov 2017 00:00:00 GMT</pubDate>
</item>

<item>
<title><![CDATA[A ReasonReact Tutorial]]></title>
<description>
<![CDATA[
<p>Are you a big fan of React, and want to know more about Reason/OCaml? I made this for you!</p>

<blockquote><p>This tutorial was updated on April 20, 2019 for reason-react version 0.7.0, and React hooks! If you want to see what it was like before hooks, <a href="http://web.archive.org/web/20190420064733/https://jaredforsyth.com/posts/a-reason-react-tutorial/">here's the previous version</a></p></blockquote>

<p><a href="http://facebook.github.io/reason/">Reason</a> is a project that adds a JavaScript-style syntax and a bunch of conventions and tooling to OCaml. The goal is to make this awesome language, with its powerful type system and robust multi-platform compiler, accessible to a broader audience. It's backed by the good folks at Facebook who invented and built React, and so naturally having best-in-class React interop has been a high priority.</p>

<p>This tutorial aims to give you a nice introduction to the syntax and type system of Reason, through the <a href="https://reasonml.github.io/reason-react/">ReasonReact library</a>. We'll be building a simple Todo list application.</p>

 Read more]]>
</description>
<summary>
<![CDATA[
<p>Are you a big fan of React, and want to know more about Reason/OCaml? I made this for you!</p>

<blockquote><p>This tutorial was updated on April 20, 2019 for reason-react version 0.7.0, and React hooks! If you want to see what it was like before hooks, <a href="http://web.archive.org/web/20190420064733/https://jaredforsyth.com/posts/a-reason-react-tutorial/">here's the previous version</a></p></blockquote>

<p><a href="http://facebook.github.io/reason/">Reason</a> is a project that adds a JavaScript-style syntax and a bunch of conventions and tooling to OCaml. The goal is to make this awesome language, with its powerful type system and robust multi-platform compiler, accessible to a broader audience. It's backed by the good folks at Facebook who invented and built React, and so naturally having best-in-class React interop has been a high priority.</p>

<p>This tutorial aims to give you a nice introduction to the syntax and type system of Reason, through the <a href="https://reasonml.github.io/reason-react/">ReasonReact library</a>. We'll be building a simple Todo list application.</p>

 Read more]]>
</summary>
<author>Jared Forsyth</author>
<link>https://jaredforsyth.com/posts/a-reason-react-tutorial/</link>
<guid>https://jaredforsyth.com/posts/a-reason-react-tutorial/</guid>

<pubDate>05 Jul 2017 00:00:00 GMT</pubDate>
</item>

<item>
<title><![CDATA[When will ReasonML be ready?]]></title>
<description>
<![CDATA[<p>Someone came into our <a href="https://discord.gg/reasonml" target="_blank">discord channel</a> a few days ago asking &quot;Is Reason suitable for migrating a large production JavaScript codebase incrementally?&quot; I answered &quot;Yes, but wait 6 months.&quot;</p>
<p>What&#39;s the current status? At the moment, we&#39;re mostly in the realm of &quot;enthusiasts who are OK with being on the bleeding edge, and want to help build out the foundation in their spare time.&quot;</p>
 4 minute read]]>
</description>
<summary>
<![CDATA[<p>Someone came into our <a href="https://discord.gg/reasonml" target="_blank">discord channel</a> a few days ago asking &quot;Is Reason suitable for migrating a large production JavaScript codebase incrementally?&quot; I answered &quot;Yes, but wait 6 months.&quot;</p>
<p>What&#39;s the current status? At the moment, we&#39;re mostly in the realm of &quot;enthusiasts who are OK with being on the bleeding edge, and want to help build out the foundation in their spare time.&quot;</p>
 4 minute read]]>
</summary>
<author>Jared Forsyth</author>
<link>https://jaredforsyth.com/posts/when-will-reasonml-be-ready/</link>
<guid>https://jaredforsyth.com/posts/when-will-reasonml-be-ready/</guid>

<pubDate>23 Jun 2017 00:00:00 GMT</pubDate>
</item>

<item>
<title><![CDATA[Template-based macros in Reason/OCaml]]></title>
<description>
<![CDATA[<p>A couple of people have shown up in <a href="https://discord.gg/reasonml" target="_blank">the discord channel</a> asking whether Reason has macros, and the answer is &quot;sort of.&quot; I think we can do better.</p>
 6 minute read]]>
</description>
<summary>
<![CDATA[<p>A couple of people have shown up in <a href="https://discord.gg/reasonml" target="_blank">the discord channel</a> asking whether Reason has macros, and the answer is &quot;sort of.&quot; I think we can do better.</p>
 6 minute read]]>
</summary>
<author>Jared Forsyth</author>
<link>https://jaredforsyth.com/posts/template-based-macros-for-reason-ocaml/</link>
<guid>https://jaredforsyth.com/posts/template-based-macros-for-reason-ocaml/</guid>

<pubDate>20 Jun 2017 00:00:00 GMT</pubDate>
</item>

<item>
<title><![CDATA[Your first native Reason/OCaml project]]></title>
<description>
<![CDATA[<p>I just wrote my first Reason project that compiled to native, and you can too! Luckily for you, my first native project was a cli tool to help people get started with native Reason development 🙌.</p>
 5 minute read]]>
</description>
<summary>
<![CDATA[<p>I just wrote my first Reason project that compiled to native, and you can too! Luckily for you, my first native project was a cli tool to help people get started with native Reason development 🙌.</p>
 5 minute read]]>
</summary>
<author>Jared Forsyth</author>
<link>https://jaredforsyth.com/posts/your-first-native-reason-ocaml-project/</link>
<guid>https://jaredforsyth.com/posts/your-first-native-reason-ocaml-project/</guid>

<pubDate>17 Jun 2017 00:00:00 GMT</pubDate>
</item>

<item>
<title><![CDATA[Getting Started with Reason and BuckleScript]]></title>
<description>
<![CDATA[<p>A couple of people have asked me how to get up and running recently, so I thought I&#39;d put something together. If you&#39;re looking for a &quot;just clone this repo &amp; go&quot;, <a href="https://github.com/jaredly/reason-bucklescript-example" target="_blank">here&#39;s a very simple boilerplate</a> I put together for this post, or you can check out the <a href="https://github.com/chenglou/reason-react-example" target="_blank">reason-react-example</a> repository.</p>
 3 minute read]]>
</description>
<summary>
<![CDATA[<p>A couple of people have asked me how to get up and running recently, so I thought I&#39;d put something together. If you&#39;re looking for a &quot;just clone this repo &amp; go&quot;, <a href="https://github.com/jaredly/reason-bucklescript-example" target="_blank">here&#39;s a very simple boilerplate</a> I put together for this post, or you can check out the <a href="https://github.com/chenglou/reason-react-example" target="_blank">reason-react-example</a> repository.</p>
 3 minute read]]>
</summary>
<author>Jared Forsyth</author>
<link>https://jaredforsyth.com/posts/getting-started-with-reason-and-bucklescript/</link>
<guid>https://jaredforsyth.com/posts/getting-started-with-reason-and-bucklescript/</guid>

<pubDate>03 Jun 2017 00:00:00 GMT</pubDate>
</item>

<item>
<title><![CDATA[JavaScript Interop with Reason and BuckleScript]]></title>
<description>
<![CDATA[<p>So you&#39;re all ready to write some Reason but you need to call a JavaScript function? Or maybe you can&#39;t figure out how to write something in OCaml-land and wish you could just bail for a minute &amp; write it in JavaScript? Fortunately, both of those are fairly easy to pull off.</p>
 8 minute read]]>
</description>
<summary>
<![CDATA[<p>So you&#39;re all ready to write some Reason but you need to call a JavaScript function? Or maybe you can&#39;t figure out how to write something in OCaml-land and wish you could just bail for a minute &amp; write it in JavaScript? Fortunately, both of those are fairly easy to pull off.</p>
 8 minute read]]>
</summary>
<author>Jared Forsyth</author>
<link>https://jaredforsyth.com/posts/javascript-interop-with-reason-and-bucklescript/</link>
<guid>https://jaredforsyth.com/posts/javascript-interop-with-reason-and-bucklescript/</guid>

<pubDate>03 Jun 2017 00:00:00 GMT</pubDate>
</item>

<item>
<title><![CDATA[Detecting unused styles in JavaScript with `babel-traverse`]]></title>
<description>
<![CDATA[<p>Last week, my coworker <a href="https://twitter.com/crm416" target="_blank">Charlie</a> asked what it would take to automatically detect and purge unused <a href="https://github.com/Khan/aphrodite" target="_blank">aphrodite</a> styles in our codebase.</p>
<p>If asked 2 years ago, I probably would have gone with a regex and a string-munging python script, but I&#39;d just spent the past few nights messing with babel plugins, and figured I could probably get pretty far with relatively little work. As it happened, I was <strong>impressed by how easy it was</strong> using the tools that babel provides.</p>
<p>As a bonus, it also works with <a href="https://github.com/facebook/react-native" target="_blank">React Native</a> because they have the same API, and it could probably be extended to other libraries without too much work.</p>
 7 minute read]]>
</description>
<summary>
<![CDATA[<p>Last week, my coworker <a href="https://twitter.com/crm416" target="_blank">Charlie</a> asked what it would take to automatically detect and purge unused <a href="https://github.com/Khan/aphrodite" target="_blank">aphrodite</a> styles in our codebase.</p>
<p>If asked 2 years ago, I probably would have gone with a regex and a string-munging python script, but I&#39;d just spent the past few nights messing with babel plugins, and figured I could probably get pretty far with relatively little work. As it happened, I was <strong>impressed by how easy it was</strong> using the tools that babel provides.</p>
<p>As a bonus, it also works with <a href="https://github.com/facebook/react-native" target="_blank">React Native</a> because they have the same API, and it could probably be extended to other libraries without too much work.</p>
 7 minute read]]>
</summary>
<author>Jared Forsyth</author>
<link>https://jaredforsyth.com/posts/analyzing-javascript-with-babel-traverse/</link>
<guid>https://jaredforsyth.com/posts/analyzing-javascript-with-babel-traverse/</guid>

<pubDate>08 Apr 2017 00:00:00 GMT</pubDate>
</item>

<item>
<title><![CDATA[What Holds Me Back From Clojurescript]]></title>
<description>
<![CDATA[<p>I&#39;ve expressed <a href="https://twitter.com/jaredforsyth/status/507253337310236672" target="_blank">multiple</a> <a href="https://twitter.com/jaredforsyth/status/668947788021960704" target="_blank">times</a> that I really want to get into clojurescript, but I keep running into barriers.</p>
<p>My background: I&#39;m an experienced JS dev, and for my personal projects I use the latest &amp; greatest of <a href="https://facebook.github.com/react" target="_blank">React</a>, <a href="https://flowtype.org" target="_blank">Flow</a>, <a href="https://babeljs.io" target="_blank">Babel</a>, and <a href="https://webpack.github.io" target="_blank">Webpack</a>, which makes for a pretty rocking experience. Given my background, lots of my hesitation could just be the fact that staying in my comfort zone of javascript is <em>easy</em>, though it may be far less <em>simple</em> than the experience provided by clojurescript.</p>
<p>By the end of this post, I hope I will have convinced myself to face my fears and dive into clojurescript anyway :D</p>
 10 minute read]]>
</description>
<summary>
<![CDATA[<p>I&#39;ve expressed <a href="https://twitter.com/jaredforsyth/status/507253337310236672" target="_blank">multiple</a> <a href="https://twitter.com/jaredforsyth/status/668947788021960704" target="_blank">times</a> that I really want to get into clojurescript, but I keep running into barriers.</p>
<p>My background: I&#39;m an experienced JS dev, and for my personal projects I use the latest &amp; greatest of <a href="https://facebook.github.com/react" target="_blank">React</a>, <a href="https://flowtype.org" target="_blank">Flow</a>, <a href="https://babeljs.io" target="_blank">Babel</a>, and <a href="https://webpack.github.io" target="_blank">Webpack</a>, which makes for a pretty rocking experience. Given my background, lots of my hesitation could just be the fact that staying in my comfort zone of javascript is <em>easy</em>, though it may be far less <em>simple</em> than the experience provided by clojurescript.</p>
<p>By the end of this post, I hope I will have convinced myself to face my fears and dive into clojurescript anyway :D</p>
 10 minute read]]>
</summary>
<author>Jared Forsyth</author>
<link>https://jaredforsyth.com/posts/What-holds-me-back-from-Clojurescript/</link>
<guid>https://jaredforsyth.com/posts/What-holds-me-back-from-Clojurescript/</guid>

<pubDate>26 Nov 2015 00:00:00 GMT</pubDate>
</item>

<item>
<title><![CDATA[Visualizing Reactive Streams: Hot and Cold Observables]]></title>
<description>
<![CDATA[<p>Reactive Programming is getting a lot of attention these days, and it promises to reduce frustration, bugs, and greenhouse gas emissions. Unfortunately, there&#39;s a sizeable learning curve involved while you try and get your head to think in streams instead of imperative sequential processes.</p>
 5 minute read]]>
</description>
<summary>
<![CDATA[<p>Reactive Programming is getting a lot of attention these days, and it promises to reduce frustration, bugs, and greenhouse gas emissions. Unfortunately, there&#39;s a sizeable learning curve involved while you try and get your head to think in streams instead of imperative sequential processes.</p>
 5 minute read]]>
</summary>
<author>Jared Forsyth</author>
<link>https://jaredforsyth.com/posts/visualizing-reactive-streams-hot-and-cold/</link>
<guid>https://jaredforsyth.com/posts/visualizing-reactive-streams-hot-and-cold/</guid>

<pubDate>06 Mar 2015 00:00:00 GMT</pubDate>
</item>

<item>
<title><![CDATA[Rust compiling rust: adventures with librustc]]></title>
<description>
<![CDATA[<p>For <a href="http://jaredly.github.io/itreed/" target="_blank">the web-based everything notebook</a> that I&#39;m working on, I&#39;ve been writing backend hookups to various programming REPLs, including <a href="http://ipython.org" target="_blank">IPython</a> and <a href="http://gorilla-repl.org" target="_blank">Gorilla</a>. I wanted to be able to evaluate rust code as well in this notebook environment, and so I set about writing a simple server that would compile up a string in rust when asked. This proved do have a couple of gotchas, so I thought I&#39;d air my thoughts here.</p>
 4 minute read]]>
</description>
<summary>
<![CDATA[<p>For <a href="http://jaredly.github.io/itreed/" target="_blank">the web-based everything notebook</a> that I&#39;m working on, I&#39;ve been writing backend hookups to various programming REPLs, including <a href="http://ipython.org" target="_blank">IPython</a> and <a href="http://gorilla-repl.org" target="_blank">Gorilla</a>. I wanted to be able to evaluate rust code as well in this notebook environment, and so I set about writing a simple server that would compile up a string in rust when asked. This proved do have a couple of gotchas, so I thought I&#39;d air my thoughts here.</p>
 4 minute read]]>
</summary>
<author>Jared Forsyth</author>
<link>https://jaredforsyth.com/posts/rust-compiling-rust-adventures-with-librustc/</link>
<guid>https://jaredforsyth.com/posts/rust-compiling-rust-adventures-with-librustc/</guid>

<pubDate>22 Nov 2014 00:00:00 GMT</pubDate>
</item>

<item>
<title><![CDATA[The Hexo static blogging engine gets an admin UI]]></title>
<description>
<![CDATA[<p>I <a href="/2014/07/26/switching-from-ghost-to-hexo/">recently switched</a> from <a href="http://ghost.org" target="_blank">ghost</a> to <a href="http://hexo.io" target="_blank">hexo</a>, and the biggest thing missing for me was the editor interface. So I made one. Currently, it&#39;s mostly a clone of the Ghost interface, but I have some ideas for making it even more awesome.</p>
 1 minute read]]>
</description>
<summary>
<![CDATA[<p>I <a href="/2014/07/26/switching-from-ghost-to-hexo/">recently switched</a> from <a href="http://ghost.org" target="_blank">ghost</a> to <a href="http://hexo.io" target="_blank">hexo</a>, and the biggest thing missing for me was the editor interface. So I made one. Currently, it&#39;s mostly a clone of the Ghost interface, but I have some ideas for making it even more awesome.</p>
 1 minute read]]>
</summary>
<author>Jared Forsyth</author>
<link>https://jaredforsyth.com/posts/the-hexo-static-blogging-engine-gets-an-admin-ui/</link>
<guid>https://jaredforsyth.com/posts/the-hexo-static-blogging-engine-gets-an-admin-ui/</guid>

<pubDate>26 Jul 2014 00:00:00 GMT</pubDate>
</item>

<item>
<title><![CDATA[Switching from Ghost to Hexo]]></title>
<description>
<![CDATA[<p>My blog used to use <a href="http://hyde.github.io/" target="_blank">Hyde</a>, a python clone of the popular jekyll platform. When <a href="http://ghost.org" target="_blank">Ghost</a> came out, I quickly switched over, due in main part to the great editor and beautiful themes. I used <a href="https://github.com/axitkhurana/buster" target="_blank">buster</a> to serialize the blog so that I could still serve it as a static site. I had two main regrets, though. 1) using buster to scrape ghost was a hack. 2) My posts were locked in an sqlite db, where git could only do a binary diff.</p>
 0 minute read]]>
</description>
<summary>
<![CDATA[<p>My blog used to use <a href="http://hyde.github.io/" target="_blank">Hyde</a>, a python clone of the popular jekyll platform. When <a href="http://ghost.org" target="_blank">Ghost</a> came out, I quickly switched over, due in main part to the great editor and beautiful themes. I used <a href="https://github.com/axitkhurana/buster" target="_blank">buster</a> to serialize the blog so that I could still serve it as a static site. I had two main regrets, though. 1) using buster to scrape ghost was a hack. 2) My posts were locked in an sqlite db, where git could only do a binary diff.</p>
 0 minute read]]>
</summary>
<author>Jared Forsyth</author>
<link>https://jaredforsyth.com/posts/switching-from-ghost-to-hexo/</link>
<guid>https://jaredforsyth.com/posts/switching-from-ghost-to-hexo/</guid>

<pubDate>26 Jul 2014 00:00:00 GMT</pubDate>
</item>

<item>
<title><![CDATA[Rust vs Go]]></title>
<description>
<![CDATA[<p>Go and Rust seem like natural competitors. They are both trying the role of a C-like low-level language with modern affordances, safety, and nice, clean concurrency. And they&#39;re each backed by a major player in the browser race - go by Google, rust by Mozilla.</p>
 5 minute read]]>
</description>
<summary>
<![CDATA[<p>Go and Rust seem like natural competitors. They are both trying the role of a C-like low-level language with modern affordances, safety, and nice, clean concurrency. And they&#39;re each backed by a major player in the browser race - go by Google, rust by Mozilla.</p>
 5 minute read]]>
</summary>
<author>Jared Forsyth</author>
<link>https://jaredforsyth.com/posts/rust-vs-go/</link>
<guid>https://jaredforsyth.com/posts/rust-vs-go/</guid>

<pubDate>22 Mar 2014 00:00:00 GMT</pubDate>
</item>

<item>
<title><![CDATA[First Impressions of Rust]]></title>
<description>
<![CDATA[<p>A while ago, I made a cellular automata simulator in Go, inspired by <a href="https://www.youtube.com/watch?v=M4cV0nCIZoc" target="_blank">this video</a> about a &quot;rock, paper, scissors&quot; simulation, where there are three &quot;species&quot; of cells which consume each other. <!-- Here's [a post about that](). --></p>
<p>Last week I rewrote this in Rust</p>
 1 minute read]]>
</description>
<summary>
<![CDATA[<p>A while ago, I made a cellular automata simulator in Go, inspired by <a href="https://www.youtube.com/watch?v=M4cV0nCIZoc" target="_blank">this video</a> about a &quot;rock, paper, scissors&quot; simulation, where there are three &quot;species&quot; of cells which consume each other. <!-- Here's [a post about that](). --></p>
<p>Last week I rewrote this in Rust</p>
 1 minute read]]>
</summary>
<author>Jared Forsyth</author>
<link>https://jaredforsyth.com/posts/first-impressions-of-rust/</link>
<guid>https://jaredforsyth.com/posts/first-impressions-of-rust/</guid>

<pubDate>20 Mar 2014 00:00:00 GMT</pubDate>
</item>

<item>
<title><![CDATA[The Noble Perceptron]]></title>
<description>
<![CDATA[<p>The perceptron is one of the most primitive learners, and is also of the easier ones to understand intuitively. I&#39;ll first give some background, and then an animation in javascript with 2D data, and an implementation in python, with graphs of it running on some traditional datasets.</p>
 6 minute read]]>
</description>
<summary>
<![CDATA[<p>The perceptron is one of the most primitive learners, and is also of the easier ones to understand intuitively. I&#39;ll first give some background, and then an animation in javascript with 2D data, and an implementation in python, with graphs of it running on some traditional datasets.</p>
 6 minute read]]>
</summary>
<author>Jared Forsyth</author>
<link>https://jaredforsyth.com/posts/the-noble-perceptron/</link>
<guid>https://jaredforsyth.com/posts/the-noble-perceptron/</guid>

<pubDate>29 Jan 2014 00:00:00 GMT</pubDate>
</item>

<item>
<title><![CDATA[Photon Ray Tracing]]></title>
<description>
<![CDATA[<p>A few months ago I saw @scanlime&#39;s &quot;Zen Photon Garden&quot; on hacker news, and was really impressed. In short, you draw walls/mirrors with your mouse, and it ray-traces light from a central source. Very beautiful and &quot;zen&quot;. However, as a programmer, drawing lines by hand was far too inaccurate. So I forked it and added a scriptable interface for adding walls.</p>
 0 minute read]]>
</description>
<summary>
<![CDATA[<p>A few months ago I saw @scanlime&#39;s &quot;Zen Photon Garden&quot; on hacker news, and was really impressed. In short, you draw walls/mirrors with your mouse, and it ray-traces light from a central source. Very beautiful and &quot;zen&quot;. However, as a programmer, drawing lines by hand was far too inaccurate. So I forked it and added a scriptable interface for adding walls.</p>
 0 minute read]]>
</summary>
<author>Jared Forsyth</author>
<link>https://jaredforsyth.com/posts/photon-ray-tracing/</link>
<guid>https://jaredforsyth.com/posts/photon-ray-tracing/</guid>

<pubDate>20 Jan 2014 00:00:00 GMT</pubDate>
</item>
</channel></rss>